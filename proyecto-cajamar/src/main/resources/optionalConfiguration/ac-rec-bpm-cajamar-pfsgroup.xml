<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
               http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
               http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd"
    default-autowire="byName">

	<!-- Beans,handlers,Managers ... --> 
 	    
	<!-- BPM activos -->
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteDeclaracionIVAIGIC/hcj_declaracionIVAIGIC.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteElevacionCajamar/hcj_elevacionCajamar.xml" p:version="-1"/>
	
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteFaseLiquidacion/haya_tramiteFaseLiquidacion.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteConclusion/cj_conclusion.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/procedimientoSolicitudConcursal/cj_solicitudConcursal.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteCalificacion/cj_calificacion.xml" p:version="-1"/>		
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteFaseConvenio/tramiteFaseConvenioV4.xml" p:version="-1"/>		
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteFaseComunAbreviado/tramiteFaseComunAbreviadoV4.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteDemandaIncidental/cj_demandaIncidental.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteDeclaracionIncumplimiento/cj_declaracionIncumplimiento.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteDemandadoEnIncidente/haya_tramiteDemandadoEnIncidente.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteReaperturaConcurso/haya_tramiteReaperturaConcurso.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteHomologacionAcuerdo/haya_tramiteHomologacionAcuerdo.xml" p:version="-1"/>	
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramiteVentaDirecta/cj_ventaDirecta.xml" p:version="-1"/>
	<bean parent="bpm.processFactory" p:definitionLocation="classpath:process/pfsgroup/cajamar/tramitePropuestaAnticipada/cj_propuestaAnticipada.xml" p:version="-1"/>		
	
		
	<!-- Groovy's -->
	<bean id="jbpmUtilCajamarConcursos" class="es.pfsgroup.recovery.haya.utils.JBPMProcessHayaManager" >
  	<property name="contextScripts">
  		<list>
  			<value><![CDATA[ 	
				def comprobarExisteDocumentoPLALIQ = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "PLALIQ");
	            }
	            
	            def comprobarExisteDocumentoAAPLIQ = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "AAPLIQ");
	            }
	            
	            def comprobarExisteDocumentoINFRENCUE = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "INFRENCUE");
	            }
	            
	            def comprobarExisteDocumentoAUTCONCON = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "AUTCONCON");
	            }
	            
	            def comprobarExisteDocumentoINFPRO = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "INFPRO");
	            }
	            
	            def comprobarExisteDocumentoRESJUD = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "RESJUD");
	            }
	            
	            def comprobarExisteDocumentoINFADMCON = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "INFADMCON");
	            }
	            
	            def existeConvenioAprobadoJunta = {
					def convenioManager = ctx.getBean("convenioManager");
               		for (convenio in convenioManager.listaConveniosPorProcedimiento(idProcedimiento)) {
	                  	if (convenio.getEstadoConvenio().getCodigo() == '3') {
	                  		return true;
	                  	}
               		};
               
					return false;
				}
				
				def existeConvenioNoAdmitido = {
					def convenioManager = ctx.getBean("convenioManager");
					for (convenio in convenioManager.listaConveniosPorProcedimiento(idProcedimiento)) {
						if (convenio.getEstadoConvenio().getCodigo() == '4') {
							return true;
						}
					};
					return false;
				}
				
				def comprobarExisteDocumentoACTJUNACR = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "ACTJUNACR");
	            }
	            
	            def comprobarExisteDocumentoRESADE = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "RESADE");
	            }
	            
	            def comprobarExisteDocumentoBOE = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "BOE");
	            }
	            
	            def comprobarExisteDocumentoRESJUZ = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "RESJUZ");
	            }
	            
	            def comprobarExisteDocumentoINTDEM = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "INTDEM");
	            }
	            
	            def comprobarExisteDocumentoINFCANOPE = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "INFCANOPE");
	            }
	            
	            def comprobarExisteDocumentoOFEVEN = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "OFEVEN");
	            }
	            
	            def comprobarExisteDocumentoINFSOBVEN = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "INFSOBVEN");
	            }
	            
	            def comprobarExisteDocumentoAUTO = {
	                def adjudicacionProcedimientoManager = ctx.getBean("adjudicacionProcedimientoManagerDelegated");
	                return adjudicacionProcedimientoManager.comprobarAdjunto(idProcedimiento, "AUTO");
	            }
	            
	            def existeConvenioAnticipadoAsunto = {
               		def cuentaAnticipado = 0;
               		def convenioManager = ctx.getBean("convenioManager");
               		for (convenio in convenioManager.listaConveniosPorAsunto(idProcedimiento)) {
	                  	if (convenio.getTipoConvenio().getCodigo() == '1') {
	                  		cuentaAnticipado = cuentaAnticipado + 1
	                  	  	if (cuentaAnticipado>1) {
	                  	  		return false;
	                  	  	}
	                  	  	
	                  	  	if (convenio.getDescripcionAnticipado() == null) {
	                  	  		return false;
	                  	  	}
	                  	}
               		};
               		
               		if (cuentaAnticipado<1) {
               			return false;
               		} 
               		else {
               			return true;
               		}
            	}
            	
            	def existeConvenioAnticipadoAdmitidoAsunto = {
               		def convenioManager = ctx.getBean("convenioManager");
               		for (convenio in convenioManager.listaConveniosPorAsunto(idProcedimiento)) {
                  		if ((convenio.getTipoConvenio().getCodigo() == '1') && (convenio.getEstadoConvenio().getCodigo() == '2')) {
                  	 		return true;
                  		}
               		};
               		
               		return false;
            	}
            	
            	def existeConvenioAnticipadoNoAdmitidoAsunto = {
               		def convenioManager = ctx.getBean("convenioManager");
               		for (convenio in convenioManager.listaConveniosPorAsunto(idProcedimiento)) {
                  		if ((convenio.getTipoConvenio().getCodigo() == '1') && (convenio.getEstadoConvenio().getCodigo() == '4')) {
                  	 		return true;
                  		}
               		};
               		
               		return false;
            	}
            	
            	def existeConvenioAnticipadoAdmitidoTrasAprobacionAsunto = {
					def convenioManager = ctx.getBean("convenioManager");
					for (convenio in convenioManager.listaConveniosPorAsunto(idProcedimiento)) {
                		if ((convenio.getTipoConvenio().getCodigo() == '1') && (convenio.getEstadoConvenio().getCodigo() == '5')) {
	                  		return true;
    	              	}
        	       	};
        	       	
            	   	return false;
				}	
            	
            	def existeConvenioAnticipadoNoAdmitidoTrasAprobacionAsunto = {
					def convenioManager = ctx.getBean("convenioManager");
					for (convenio in convenioManager.listaConveniosPorAsunto(idProcedimiento)) {
                		if ((convenio.getTipoConvenio().getCodigo() == '1') && (convenio.getEstadoConvenio().getCodigo() == '6')) {
                  			return true;
                  		}
               		};
               		
               		return false;
				}
  			 ]]>
  			</value>
  		</list>
  	</property>
  </bean> 
  
  <!-- Diccionarios -->
     
</beans>
