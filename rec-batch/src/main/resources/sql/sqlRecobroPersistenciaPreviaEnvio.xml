<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
        <entry key="recobro.idxdrop.jobPersistenciaPreviaEnvio.Oracle10gDialect">
        <![CDATA[
            DECLARE
              A_TABLES DBMS_SQL.VARCHAR2_TABLE;
              nCount NUMBER;

            BEGIN
              A_TABLES(1) := 'TMP_REC_CONTRATOS_CONS_BAJA';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_FICHERO_CONTRATOS';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_EXP_AGE_MAR';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_EXP_AGE_MAR_EXC';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_EXP_AGE_MAR_GES';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_EXP_AGE_CNT';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_EXP_AGE_CNT_EXC';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_GAE_GAGER';
              A_TABLES(A_TABLES.LAST + 1) := 'REC_FICHERO_CONTRATOS';
              A_TABLES(A_TABLES.LAST + 1) := 'REC_FICHERO_PERSONAS';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_SAGER_INFO';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_CICLOS_RECOBRO_PTES';
              A_TABLES(A_TABLES.LAST + 1) := 'TMP_REC_REPARTO_DIA_ANTERIOR';

              FOR I IN A_TABLES.FIRST..A_TABLES.LAST LOOP
                DBMS_OUTPUT.PUT_LINE('Limpiando índice de '||A_TABLES(I));

                FOR IDX IN (SELECT INDEX_NAME FROM USER_INDEXES  WHERE TABLE_NAME = A_TABLES(I)) LOOP
                  DBMS_OUTPUT.PUT_LINE('- Borrando índice '||IDX.INDEX_NAME);
                  OPERACION_DDL.DDL_INDEX('DROP',IDX.INDEX_NAME); --unusable
                END LOOP;
              END LOOP;

            END;
        ]]>
    </entry>


    <!-- Paso 1: PROCESO DE TAREAS PREVIAS -->
    <!-- BORRAMOS LA TABLA TMP_REC_CONTRATOS_CONS_BAJA -->
    <entry key="recobro.borrado.tmp_rec_contratos_cons_baja.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_CONTRATOS_CONS_BAJA');
            end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA TMPREC_FICHERO_CONTRATOS -->
    <entry key="recobro.borrado.tmp_rec_fichero_contratos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_FICHERO_CONTRATOS');
            end;
        ]]>
    </entry>
    <!-- BORRADO DE LA TABLA TMP_REC_EXP_AGE_MAR_SUB -->
    <entry key="recobro.borrado.tmp_rec_exp_age_mar_sub.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_EXP_AGE_MAR_SUB');
            end;
        ]]>
    </entry>
    <!-- BORRADO DE LA TABLA TMP_REC_EXP_AGE_MAR -->
    <entry key="recobro.borrado.tmp_rec_exp_age_mar.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_EXP_AGE_MAR');
            end;
        ]]>
    </entry>
    <!-- BORRADO DE LA TABLA TMP_REC_EXP_AGE_MAR_EXC -->
    <entry key="recobro.borrado.tmp_rec_exp_age_mar_exc.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_EXP_AGE_MAR_EXC');
            end;
        ]]>
    </entry>
    <!-- BORRADO DE LA TABLA TMP_REC_EXP_AGE_MAR_GES -->
    <entry key="recobro.borrado.tmp_rec_exp_age_mar_ges.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_EXP_AGE_MAR_GES');
            end;
        ]]>
    </entry>
    <!-- BORRADO DE LA TABLA TMP_REC_EXP_AGE_CNT -->
    <entry key="recobro.borrado.tmp_rec_exp_age_cnt.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_EXP_AGE_CNT');
            end;
        ]]>
    </entry>
    <!-- BORRADO DE LA TABLA TMP_REC_EXP_AGE_CNT_EXC -->
    <entry key="recobro.borrado.tmp_rec_exp_age_cnt_exc.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_EXP_AGE_CNT_EXC');
            end;
        ]]>
    </entry>

    <!-- BORRADO DE LA TABLA TMP_GAE_GAGER -->
    <entry key="recobro.borrado.tmp_gae_gager.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_GAE_GAGER');
            end;
        ]]>
    </entry>

    <!-- BORRADO DE LA TABLA TMP_SAGER_INFO -->
    <entry key="recobro.borrado.tmp_sager_info.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_SAGER_INFO');
            end;
        ]]>
    </entry>

    <!-- BORRADO DE LA TABLA TMP_CICLOS_RECOBRO_PTES -->
    <entry key="recobro.borrado.tmp_ciclos_recobro_ptes.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_CICLOS_RECOBRO_PTES');
            end;
        ]]>
    </entry>

    <!-- BORRADO DE LA TABLA TMP_CRE_NUEVOS -->
    <entry key="recobro.borrado.tmp_cre_nuevos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_CRE_NUEVOS');
            end;
        ]]>
    </entry>

    <!-- BORRADO DE LA TABLA TMP_CRC_NUEVOS -->
    <entry key="recobro.borrado.tmp_crc_nuevos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_CRC_NUEVOS');
            end;
        ]]>
    </entry>

    <!-- BORRADO DE LA TABLA TMP_CRP_NUEVOS -->
    <entry key="recobro.borrado.tmp_crp_nuevos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_CRP_NUEVOS');
            end;
        ]]>
    </entry>

    <!-- ********************************************************* -->
    <!-- GESTIÓN DE CICLOS DE RECOBRO Y CANCELACIÓN DE EXPEDIENTES -->
    <!-- ********************************************************* -->
    <!-- Cerramos ciclos de recobro para los expedientes que no estén activos -->
    <entry key="recobro.cierre.ciclos.Oracle10gDialect">
        <![CDATA[
            -- SET SERVEROUTPUT ON;
            DECLARE
              V_ID_MOB_ID NUMBER(16,0);
            BEGIN
              -- OBTENEMOS EL ID DEL MOTIVO DE BAJA
              SELECT DD_MOB_ID INTO V_ID_MOB_ID FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = ${motivobaja.fingestion};

              -- PRIMERO CERRRAMOS LOS CICLOS DE RECOBRO
              UPDATE CRE_CICLO_RECOBRO_EXP
              SET CRE_FECHA_BAJA = TRUNC(SYSDATE),
              DD_MOB_ID = V_ID_MOB_ID,
              USUARIOMODIFICAR = '${usuario.crear}',
              FECHAMODIFICAR = SYSDATE
              WHERE
                CRE_ID IN
                (SELECT CRE.CRE_ID FROM CRE_CICLO_RECOBRO_EXP CRE
                  INNER JOIN EXP_EXPEDIENTES EXP ON CRE.EXP_ID = EXP.EXP_ID
                    LEFT JOIN ${master.schema}.DD_EEX_ESTADO_EXPEDIENTE DD ON EXP.DD_EEX_ID = DD.DD_EEX_ID
                  WHERE CRE.BORRADO = ${borrado.no.id}
                    AND CRE_FECHA_BAJA IS NULL
                    AND DD.DD_EEX_CODIGO <> ${ddEstadoExpedientes.Activo.codigo}
                    AND EXP.BORRADO = ${borrado.no.id}
                    AND EXP.EXP_MANUAL = ${manual.no.id});

              -- AHORA CERRAMOS LOS CICLOS DE CONTRATO
              UPDATE CRC_CICLO_RECOBRO_CNT
              SET CRC_FECHA_BAJA = TRUNC(SYSDATE),
              DD_MOB_ID = V_ID_MOB_ID,
              USUARIOMODIFICAR = '${usuario.crear}',
              FECHAMODIFICAR = SYSDATE
              WHERE
                CRC_ID IN
                (SELECT CRC.CRC_ID
                FROM CRC_CICLO_RECOBRO_CNT CRC
                  INNER JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID
                  INNER JOIN EXP_EXPEDIENTES EXP ON CRE.EXP_ID = EXP.EXP_ID
                  LEFT JOIN ${master.schema}.DD_EEX_ESTADO_EXPEDIENTE DD ON EXP.DD_EEX_ID = DD.DD_EEX_ID
                WHERE CRC.BORRADO = ${borrado.no.id}
                  AND CRC.CRC_FECHA_BAJA IS NULL
                  AND DD.DD_EEX_CODIGO <> ${ddEstadoExpedientes.Activo.codigo}
                  AND EXP.BORRADO = ${borrado.no.id}
                  AND EXP.EXP_MANUAL = ${manual.no.id});

              -- AHORA CERRAMOS LOS CICLOS DE PERSONAS
              UPDATE CRP_CICLO_RECOBRO_PER
              SET CRP_FECHA_BAJA = TRUNC(SYSDATE),
              DD_MOB_ID = V_ID_MOB_ID,
              USUARIOMODIFICAR = '${usuario.crear}',
              FECHAMODIFICAR = SYSDATE
              WHERE
                CRP_ID IN
                (SELECT CRP.CRP_ID
                FROM CRP_CICLO_RECOBRO_PER CRP
                  INNER JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRP.CRE_ID = CRE.CRE_ID
                  INNER JOIN EXP_EXPEDIENTES EXP ON CRE.EXP_ID = EXP.EXP_ID
                  LEFT JOIN ${master.schema}.DD_EEX_ESTADO_EXPEDIENTE DD ON EXP.DD_EEX_ID = DD.DD_EEX_ID
                WHERE CRP.BORRADO = ${borrado.no.id}
                  AND CRP.CRP_FECHA_BAJA IS NULL
                  AND DD.DD_EEX_CODIGO <> ${ddEstadoExpedientes.Activo.codigo}
                  AND EXP.BORRADO = ${borrado.no.id}
                  AND EXP.EXP_MANUAL = ${manual.no.id});
            END;
        ]]>
    </entry>

        <entry key="recobro.finalizar.ciclos_recobro_contrato_por_excepcion.Oracle10gDialect">
        <![CDATA[
            /*
             * EXCEPTUAR CONTRATOS
             * - Cierra los ciclos de recobro de un contrato exceptuado
             * - Cierra los ciclos de recobro de las personas que se van quedando sin deuda
             *    irregular en el expediente.
             */
            DECLARE

              /* CONSTANTES */
              C_USUARIO_BATCH VARCHAR2(50 CHAR);
              C_MASTER_SCHEMA VARCHAR2(50 CHAR);

              /* VARIABLES */
              V_MOB_ID NUMBER(16);

            BEGIN

              /* CONSTANTES */
              C_USUARIO_BATCH := '${usuario.crear}';
              C_MASTER_SCHEMA := '${master.schema}';

              /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
              BEGIN
                  EXECUTE IMMEDIATE 'SELECT DD_MOB_ID FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''EXC'''
                  INTO V_MOB_ID;

                  EXCEPTION WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=EXC');
              END;


              /* CONJUNTO BASE DE CONTRATOS A EXCEPTUAR */
              DELETE FROM TMP_EXCEPCIONES_CONTRATOS;
              COMMIT;

              --** Log
              --DBMS_OUTPUT.PUT_LINE('[INFO] TMP_EXCEPCIONES_CONTRATOS Vaciada.'||SQL%ROWCOUNT||' Filas.');
              --
              INSERT INTO TMP_EXCEPCIONES_CONTRATOS
                (CNT_ID, CRE_ID, EXC_ID)
              SELECT a.CNT_ID ,b.CRE_ID ,a.EXC_ID
               FROM BATCH_DATOS_EXCEPTUADOS a, CRC_CICLO_RECOBRO_CNT b
              WHERE a.CNT_ID = b.CNT_ID
                AND a.CNT_ID IS NOT NULL
                AND b.CRC_FECHA_BAJA IS NULL
                AND b.BORRADO = 0;

              OPERACION_DDL.DDL_TABLE('STATS','TMP_EXCEPCIONES_CONTRATOS');

              --** Log
              --DBMS_OUTPUT.PUT_LINE('[INFO] TMP_EXCEPCIONES_CONTRATOS Actualizada.'||SQL%ROWCOUNT||' Filas.');
              COMMIT;

              /* CERRAR CICLOS DE RECOBRO CNT */
              UPDATE CRC_CICLO_RECOBRO_CNT crc
                 SET crc.CRC_FECHA_BAJA = TRUNC(SYSDATE)
                   , crc.DD_MOB_ID = V_MOB_ID
                   , crc.USUARIOMODIFICAR = C_USUARIO_BATCH
                   , crc.FECHAMODIFICAR = SYSDATE
                   , crc.EXC_ID = ( SELECT exc.EXC_ID
                                    FROM BATCH_DATOS_EXCEPTUADOS  exc
                                    WHERE exc.CNT_ID = crc.CNT_ID
                                    AND   exc.CNT_ID IS NOT NULL )
               WHERE EXISTS (SELECT 1
                             FROM BATCH_DATOS_EXCEPTUADOS  exc
                             WHERE exc.CNT_ID = crc.CNT_ID
                             AND   exc.CNT_ID IS NOT NULL )
                 AND crc.CRC_FECHA_BAJA IS NULL
                 AND crc.BORRADO = 0;

              --** Log
              --DBMS_OUTPUT.PUT_LINE('[INFO] CRC_CICLO_RECOBRO_CNT Actualizada.'||SQL%ROWCOUNT||' Filas.');
              COMMIT;

              /* CERRAMOS CRP DE PERSONAS QUE SE HAN QUEDADO SIN DEUDA */
              MERGE INTO CRP_CICLO_RECOBRO_PER upd
              USING
              (   SELECT CRP.CRP_ID
                       , MAX(TMP.EXC_ID) as EXC_ID -- Por si hay más de un cnt de la persona con distintos exc_id
                    FROM TMP_EXCEPCIONES_CONTRATOS TMP
                      -- buscamos ciclo de recobro persona para update
                      JOIN CRP_CICLO_RECOBRO_PER CRP ON TMP.CRE_ID = CRP.CRE_ID
                      -- buscamos contratos de la persona
                      JOIN CPE_CONTRATOS_PERSONAS CPE ON CRP.PER_ID = CPE.PER_ID AND CPE.BORRADO=0
                      -- obtenemos los contratos que tienen ciclos de deuda abiertos en el expediente
                      LEFT JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRP.CRE_ID = CRC.CRE_ID AND CPE.CNT_ID = CRC.CNT_ID
                      LEFT JOIN BATCH_DATOS_CNT CNT ON CRC.CNT_ID = CNT.CNT_ID
                    WHERE CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
                   GROUP BY CRP.CRP_ID
                   HAVING SUM(NVL(CNT.CNT_RIESGO,0)) <= 0
              ) mrg
              ON ( upd.CRP_ID = mrg.CRP_ID )
              WHEN MATCHED
                THEN UPDATE
                        SET upd.CRP_FECHA_BAJA = TRUNC(SYSDATE)
                          , upd.DD_MOB_ID = V_MOB_ID
                          , upd.USUARIOMODIFICAR = C_USUARIO_BATCH
                          , upd.FECHAMODIFICAR = SYSDATE
                          , upd.EXC_ID = mrg.EXC_ID;
               --** Log
               --DBMS_OUTPUT.PUT_LINE('[INFO] CRP_CICLO_RECOBRO_PER Actualizada.'||SQL%ROWCOUNT||' Filas.');
               COMMIT;

            END;
        ]]>
    </entry>

    <entry key="recobro.finalizar.ciclos_recobro_persona_por_excepcion.Oracle10gDialect">
        <![CDATA[
            /*
             * EXCEPTUAR PERSONAS
             * - Cierra los ciclos de recobro de una persona exceptuado
             * - Cierra los ciclos de recobro de los contratos que que estaban vinculados
             *     esas personas y para los cuales no les queda ninguna persona no exceptuada
             *     en el expediente.
             */
            DECLARE

              /* CONSTANTES */
              C_USUARIO_BATCH VARCHAR2(50 CHAR);
              C_MASTER_SCHEMA VARCHAR2(50 CHAR);

              /* VARIABLES */
              V_MOB_ID NUMBER(16);

            BEGIN

              /* CONSTANTES */
              C_USUARIO_BATCH := '${usuario.crear}';
              C_MASTER_SCHEMA := '${master.schema}';

              /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
              BEGIN
                  EXECUTE IMMEDIATE 'SELECT DD_MOB_ID FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''EXP'''
                  INTO V_MOB_ID;

                  EXCEPTION WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=EXP');
              END;

              /* CONJUNTO BASE DE PERSONAS A EXCEPTUAR */
              DELETE FROM TMP_EXCEPCIONES_PERSONAS;
              COMMIT;
              --
              INSERT INTO TMP_EXCEPCIONES_PERSONAS
                 (PER_ID, CRE_ID, EXC_ID)
              SELECT crp.PER_ID, crp.CRE_ID ,exc.EXC_ID
                FROM CRP_CICLO_RECOBRO_PER crp, BATCH_DATOS_EXCEPTUADOS exc
               WHERE exc.PER_ID = crp.PER_ID
                 AND exc.PER_ID IS NOT NULL
                 AND crp.CRP_FECHA_BAJA IS NULL
                 AND crp.BORRADO = 0;

              OPERACION_DDL.DDL_TABLE('STATS','TMP_EXCEPCIONES_PERSONAS');


              /* CERRAR CICLOS DE RECOBRO CRP ACTUAL */
              UPDATE CRP_CICLO_RECOBRO_PER crp
                 SET crp.CRP_FECHA_BAJA = TRUNC(SYSDATE)
                   , crp.EXC_ID = (SELECT exc.exc_id
                                   FROM BATCH_DATOS_EXCEPTUADOS  exc
                                   WHERE exc.PER_ID = crp.PER_ID
                                   AND   exc.PER_ID IS NOT NULL )
                   , crp.DD_MOB_ID = V_MOB_ID
                   , crp.USUARIOMODIFICAR = C_USUARIO_BATCH
                   , crp.FECHAMODIFICAR = SYSDATE
               WHERE EXISTS (SELECT 1
                             FROM BATCH_DATOS_EXCEPTUADOS  exc
                             WHERE exc.PER_ID = crp.PER_ID
                             AND   exc.PER_ID IS NOT NULL )
                 AND crp.CRP_FECHA_BAJA IS NULL
                 AND crp.BORRADO = 0;
              COMMIT;


              /* CERRAR CRP DE CONTRATOS QUE SE HAN QUEDADO SIN PERSONA */
              MERGE INTO CRC_CICLO_RECOBRO_CNT upd
              USING
              ( SELECT CRC.CRC_ID
                     , MAX(TMP.EXC_ID) as EXC_ID -- Por si hay más de un cnt con distintos exc_id
                     , COUNT(CRP.CRP_ID) as PERS
                  FROM TMP_EXCEPCIONES_PERSONAS TMP
                    JOIN CRC_CICLO_RECOBRO_CNT CRC ON TMP.CRE_ID = CRC.CRE_ID
                    -- buscamos las personas de los contratos
                    JOIN CPE_CONTRATOS_PERSONAS CPE ON CRC.CNT_ID = CPE.CNT_ID AND CPE.BORRADO=0
                    -- obtenemos las personas que tienen ciclos de deuda abiertas en el expediente
                    LEFT JOIN CRP_CICLO_RECOBRO_PER CRP ON CRC.CRE_ID = CRP.CRE_ID AND CPE.PER_ID = CRP.PER_ID AND CRP.BORRADO = 0 AND CRP.CRP_FECHA_BAJA IS NULL
                GROUP BY CRC.CRC_ID
                HAVING COUNT(CRP.CRP_ID) <= 0
              ) mrg
              ON (upd.CRC_ID = mrg.CRC_ID)
              WHEN MATCHED
                THEN UPDATE
                        SET upd.CRC_FECHA_BAJA = TRUNC(SYSDATE)
                          , upd.DD_MOB_ID = V_MOB_ID
                          , upd.USUARIOMODIFICAR = C_USUARIO_BATCH
                          , upd.FECHAMODIFICAR = SYSDATE
                          , upd.EXC_ID = mrg.EXC_ID;
              COMMIT;

            END;
        ]]>
    </entry>

    <entry key="recobro.insert.ciclos_recobro_contrato_por_fin_excepcion.Oracle10gDialect">
        <![CDATA[
            declare
            begin
            -- Insertamos un CRC nuevo por cada uno que haya llegado a fin de excepcion
            DELETE FROM TMP_CNT_FIN_EXCEPCION;
            COMMIT;
            --
            INSERT INTO TMP_CNT_FIN_EXCEPCION
              ( CRC_ID, CNT_ID, CRE_ID, CRC_ID_ENVIO, CRC_FECHA_ALTA
              , CRC_POS_VIVA_NO_VENCIDA, CRC_POS_VIVA_VENCIDA, CRC_INT_ORDIN_DEVEN, CRC_INT_MORAT_DEVEN
              , CRC_COMISIONES, CRC_GASTOS, CRC_IMPUESTOS
              , VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            SELECT S_CRC_CICLO_RECOBRO_CNT.NEXTVAL, D.*
            FROM
            (   SELECT distinct CRC.CNT_ID, CRC.CRE_ID
                       , to_number(to_char(TRUNC(sysdate),'yyyyMMdd')||CRC.CNT_ID) AS CRC_ID_ENVIO
                       , TRUNC(SYSDATE) AS CRC_FECHA_ALTA
                       , NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0) AS CRC_POS_VIVA_NO_VENCIDA
                       , NVL(MOV.MOV_POS_VIVA_VENCIDA,0)    AS CRC_POS_VIVA_VENCIDA
                       , NVL(MOV.MOV_INT_REMUNERATORIOS,0)  AS CRC_INT_ORDIN_DEVEN
                       , NVL(MOV.MOV_INT_MORATORIOS,0)      AS CRC_INT_MORAT_DEVEN
                       , NVL(MOV.MOV_COMISIONES,0)          AS CRC_COMISIONES
                       , NVL(MOV.MOV_GASTOS,0)              AS CRC_GASTOS
                       , NVL(MOV.MOV_IMPUESTOS,0)           AS CRC_IMPUESTOS
                       , 0 VERSION, '${usuario.crear}' USUARIOCREAR, SYSDATE FECHACREAR,0 BORRADO
                FROM CRC_CICLO_RECOBRO_CNT CRC
                  JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID  -- cogemos ciclo recobro exp
                  JOIN CNT_CONTRATOS CNT ON CRC.CNT_ID = CNT.CNT_ID       -- exista contrato
                  JOIN BATCH_DATOS_CNT BCNT ON CNT.CNT_ID = BCNT.CNT_ID      -- contratos con riesgo
                  JOIN MOV_MOVIMIENTOS MOV ON CNT.CNT_ID = MOV.CNT_ID AND CNT.CNT_FECHA_EXTRACCION = MOV.MOV_FECHA_EXTRACCION  -- cogemos importes
                  -- cruzamos con los motivos de baja para asegurarnos que sólo cogemos contratos exceptuados por sí mismos
                  JOIN ${master.schema}.DD_MOB_MOTIVOS_BAJA MOB ON CRC.DD_MOB_ID = MOB.DD_MOB_ID
                  -- cruzamos con los exceptuados para ver que ya no exista
                  LEFT JOIN BATCH_DATOS_EXCEPTUADOS EXC ON CRC.CNT_ID = EXC.CNT_ID
                  -- cruzamos con otrso ciclos de recobro para ver que ya no haya otro abierto.
                  LEFT JOIN CRC_CICLO_RECOBRO_CNT OTR ON CRC.CRE_ID = OTR.CRE_ID AND CRC.CNT_ID = OTR.CNT_ID AND OTR.BORRADO = 0 AND OTR.CRC_FECHA_BAJA IS NULL
                WHERE CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
                  AND BCNT.CNT_RIESGO > 0
                  AND CRC.BORRADO = 0
                  -- cogemos contratos exceptuados por sí mismos, no porque se haya exceptuado la persona
                  AND MOB.DD_MOB_CODIGO = 'EXC'
                  -- el ciclo de recobro tiene que estar dado de baja
                  AND CRC.CRC_FECHA_BAJA IS NOT NULL
                  -- la exceptuación ya no está vigente
                  AND EXC.EXC_ID IS NULL
                  -- no hay ningún otro ciclo de recobro abierto
                  AND OTR.CRC_ID IS NULL
            ) D;
            COMMIT;

            OPERACION_DDL.DDL_TABLE('STATS','TMP_CNT_FIN_EXCEPCION');

            -- Insertamos los nuevos ciclos calculados
            INSERT INTO CRC_CICLO_RECOBRO_CNT
                 ( CRC_ID, CNT_ID, CRE_ID, CRC_ID_ENVIO, CRC_FECHA_ALTA
                 , CRC_POS_VIVA_NO_VENCIDA, CRC_POS_VIVA_VENCIDA, CRC_INT_ORDIN_DEVEN, CRC_INT_MORAT_DEVEN, CRC_COMISIONES, CRC_GASTOS, CRC_IMPUESTOS
                 , VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            SELECT CRC_ID, CNT_ID, CRE_ID, CRC_ID_ENVIO, CRC_FECHA_ALTA
                 , CRC_POS_VIVA_NO_VENCIDA, CRC_POS_VIVA_VENCIDA, CRC_INT_ORDIN_DEVEN, CRC_INT_MORAT_DEVEN, CRC_COMISIONES, CRC_GASTOS, CRC_IMPUESTOS
                 , VERSION, USUARIOCREAR, FECHACREAR, BORRADO
              FROM TMP_CNT_FIN_EXCEPCION;
            COMMIT;


            -- Insertamos los CRP por cada uno que se exceptuaron cuando el contrato
            INSERT INTO CRP_CICLO_RECOBRO_PER
              ( CRP_ID, PER_ID, CRE_ID, CRP_FECHA_ALTA, CRP_RIESGO_DIRECTO, CRP_RIESGO_INDIRECTO, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            SELECT S_CRP_CICLO_RECOBRO_PER.NEXTVAL, D.*
            FROM
            (SELECT distinct CRP.PER_ID, CRP.CRE_ID
                  , TRUNC(SYSDATE) AS CRP_FECHA_ALTA
                  , PERB.PER_RIESGO_DIRECTO   AS CRP_RIESGO_DIRECTO
                  , PERB.PER_RIESGO_INDIRECTO AS CRP_RIESGO_INDIRECTO
                  , 0 VERSION, '${usuario.crear}' USUARIOCREAR, SYSDATE FECHACREAR,0 BORRADO
                FROM CRP_CICLO_RECOBRO_PER CRP
                  JOIN BATCH_DATOS_PER PERB ON CRP.PER_ID = PERB.PER_ID
                  -- cruzamos con los motivos de baja para asegurarnos que sólo cogemos personas exceptuados por un contrato
                  JOIN ${master.schema}.DD_MOB_MOTIVOS_BAJA MOB ON CRP.DD_MOB_ID = MOB.DD_MOB_ID
                  -- cruzamos con fin de excepción para ver que ya no exista
                  JOIN TMP_CNT_FIN_EXCEPCION FIN ON CRP.CRE_ID = FIN.CRE_ID
                  -- comprobamos que la persona tiene relación con el contrato
                  JOIN BATCH_DATOS_CNT_PER CPE ON CRP.PER_ID = CPE.PER_ID AND FIN.CNT_ID = CPE.CNT_ID
                  -- cruzamos con otrso ciclos de recobro para ver que ya no haya otro abierto.
                  LEFT JOIN CRP_CICLO_RECOBRO_PER OTR ON CRP.CRE_ID = OTR.CRE_ID AND CRP.PER_ID = OTR.PER_ID AND OTR.BORRADO = 0 AND OTR.CRP_FECHA_BAJA IS NULL
                WHERE CRP.BORRADO = 0
                  -- cogemos personas exceptuadas al exceptuar el contrato
                  AND MOB.DD_MOB_CODIGO = 'EXC'
                  -- el ciclo de recobro tiene que estar dado de baja
                  AND CRP.CRP_FECHA_BAJA IS NOT NULL
                  -- no hay ningún otro ciclo de recobro abierto
                  AND OTR.CRP_ID IS NULL
            ) D;
            COMMIT;
            end;
        ]]>
    </entry>
    <entry key="recobro.insert.ciclos_recobro_persona_por_fin_excepcion.Oracle10gDialect">
        <![CDATA[
            declare
            begin

            --** Temporal con nuevos CRP por cada uno que ha finalizado la excepcion
            DELETE FROM TMP_PER_FIN_EXCEPCION;
            COMMIT;
            --
            INSERT INTO TMP_PER_FIN_EXCEPCION
              ( CRP_ID, PER_ID, CRE_ID, CRP_FECHA_ALTA
              , CRP_RIESGO_DIRECTO, CRP_RIESGO_INDIRECTO
              , VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            SELECT S_CRP_CICLO_RECOBRO_PER.NEXTVAL, D.*
            FROM (SELECT DISTINCT CRP.PER_ID
                       , CRP.CRE_ID
                       , TRUNC(SYSDATE) AS CRP_FECHA_ALTA
                       , PERB.PER_RIESGO_DIRECTO CRP_RIESGO_DIRECTO
                       , PERB.PER_RIESGO_INDIRECTO CRP_RIESGO_INDIRECTO
                       , 0 VERSION, '${usuario.crear}' USUARIOCREAR, SYSDATE FECHACREAR,0 BORRADO
                     FROM CRP_CICLO_RECOBRO_PER CRP
                       JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRP.CRE_ID = CRE.CRE_ID
                       JOIN BATCH_DATOS_PER PERB ON CRP.PER_ID = PERB.PER_ID
                       -- cruzamos con los motivos de baja para asegurarnos que sólo cogemos personas exceptuados por sí mismas
                       JOIN ${master.schema}.DD_MOB_MOTIVOS_BAJA MOB ON CRP.DD_MOB_ID = MOB.DD_MOB_ID
                       -- cruzamos con los exceptuados para ver que ya no exista
                       LEFT JOIN BATCH_DATOS_EXCEPTUADOS EXC ON CRP.PER_ID = EXC.PER_ID
                       -- cruzamos con otros ciclos de recobro para ver que ya no haya otro abierto.
                       LEFT JOIN CRP_CICLO_RECOBRO_PER OTR ON CRP.CRE_ID = OTR.CRE_ID AND CRP.PER_ID = OTR.PER_ID AND OTR.BORRADO = 0 AND OTR.CRP_FECHA_BAJA IS NULL
                     WHERE CRP.BORRADO = 0
                       -- el ciclo de recobro tiene que estar dado de baja
                       AND CRP.CRP_FECHA_BAJA IS NOT NULL
                       -- comprobamos ciclo de expediente
                       AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
                       -- cogemos personas exceptuadas por si mismas, no porque se haya exceptuado el contrato
                       AND MOB.DD_MOB_CODIGO = 'EXP'
                       -- la exceptuación ya no está vigente
                       AND EXC.EXC_ID IS NULL
                       -- no hay ningún otro ciclo de recobro abierto
                       AND OTR.CRP_ID IS NULL ) D;

            OPERACION_DDL.DDL_TABLE('STATS','TMP_PER_FIN_EXCEPCION');

            --** Persistencia CRP
            INSERT INTO CRP_CICLO_RECOBRO_PER
              ( CRP_ID, PER_ID, CRE_ID, CRP_FECHA_ALTA
              , CRP_RIESGO_DIRECTO, CRP_RIESGO_INDIRECTO
              , VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            SELECT CRP_ID, PER_ID, CRE_ID, CRP_FECHA_ALTA
                 , CRP_RIESGO_DIRECTO, CRP_RIESGO_INDIRECTO
                 , VERSION, USUARIOCREAR, FECHACREAR, BORRADO
              FROM TMP_PER_FIN_EXCEPCION;


            --** Insertamos un CRC nuevo por cada uno que se excepctuara cuando la persona
            INSERT INTO CRC_CICLO_RECOBRO_CNT
               ( CRC_ID, CNT_ID, CRE_ID, CRC_ID_ENVIO, CRC_FECHA_ALTA
               , CRC_POS_VIVA_NO_VENCIDA, CRC_POS_VIVA_VENCIDA, CRC_INT_ORDIN_DEVEN, CRC_INT_MORAT_DEVEN
               , CRC_COMISIONES, CRC_GASTOS, CRC_IMPUESTOS
               , VERSION, USUARIOCREAR, FECHACREAR, BORRADO )
            SELECT S_CRC_CICLO_RECOBRO_CNT.NEXTVAL, D.*
            FROM (SELECT CRC.CNT_ID
                       , CRC.CRE_ID
                       , to_number(to_char(TRUNC(sysdate), 'yyyyMMdd') || CRC.CNT_ID) AS CRC_ID_ENVIO
                       , TRUNC(SYSDATE) AS CRC_FECHA_ALTA
                       , NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0) AS CRC_POS_VIVA_NO_VENCIDA
                       , NVL(MOV.MOV_POS_VIVA_VENCIDA,0) AS CRC_POS_VIVA_VENCIDA
                       , NVL(MOV.MOV_INT_REMUNERATORIOS,0) AS CRC_INT_ORDIN_DEVEN
                       , NVL(MOV.MOV_INT_MORATORIOS,0) AS CRC_INT_MORAT_DEVEN
                       , NVL(MOV.MOV_COMISIONES,0) AS CRC_COMISIONES
                       , NVL(MOV.MOV_GASTOS,0) AS CRC_GASTOS
                       , NVL(MOV.MOV_IMPUESTOS,0) AS CRC_IMPUESTOS
                       , 0 VERSION, '${usuario.crear}' USUARIOCREAR, SYSDATE FECHACREAR,0 BORRADO
                  FROM CRC_CICLO_RECOBRO_CNT CRC
                    JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID
                    JOIN CNT_CONTRATOS CNT ON CRC.CNT_ID = CNT.CNT_ID
                    JOIN BATCH_DATOS_CNT BCNT ON CNT.CNT_ID = BCNT.CNT_ID
                    JOIN MOV_MOVIMIENTOS MOV ON CNT.CNT_ID = MOV.CNT_ID AND CNT.CNT_FECHA_EXTRACCION = MOV.MOV_FECHA_EXTRACCION
                    -- cruzamos con los motivos de baja para asegurarnos que sólo cogemos exceptuadoa junto con la persona
                    JOIN ${master.schema}.DD_MOB_MOTIVOS_BAJA MOB ON CRC.DD_MOB_ID = MOB.DD_MOB_ID
                    -- cruzamos con fin de excepción para ver que ya no exista
                    JOIN TMP_PER_FIN_EXCEPCION EXC ON CRC.CRE_ID = EXC.CRE_ID
                    -- cruzamos con otrso ciclos de recobro para ver que ya no haya otro abierto.
                    LEFT JOIN CRC_CICLO_RECOBRO_CNT OTR ON CRC.CRE_ID = OTR.CRE_ID AND CRC.CNT_ID = OTR.CNT_ID AND OTR.BORRADO = 0 AND OTR.CRC_FECHA_BAJA IS NULL
                  WHERE CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
                    AND BCNT.CNT_RIESGO > 0
                    AND CRC.BORRADO = 0
                    -- cogemos contratos exceptuados al exceptuar la persona
                    AND MOB.DD_MOB_CODIGO = 'EXP'
                    -- el ciclo de recobro tiene que estar dado de baja
                    AND CRC.CRC_FECHA_BAJA IS NOT NULL
                    -- el ciclo de recobro tiene haber estado exeptuado
                    AND CRC.EXC_ID IS NOT NULL
                    -- no hay ningún otro ciclo de recobro abierto
                    AND OTR.CRC_ID IS NULL ) D;
            COMMIT;
            end;
        ]]>
    </entry>

    <entry key="recobro.finalizar.ciclos_recobro_contrato_deuda_saldada.Oracle10gDialect">
        <![CDATA[
            /*
             * SALDAR DEUDA DE CONTRATOS
             * - Cierra los ciclos de recobro de un contrato con deuda saldada
             * - Cierra los ciclos de recobro de las personas que se van quedando sin deuda
             *    irregular en el expediente.
             */
            DECLARE
              /*
              * CONSTANTES
              */
              C_USUARIO_BATCH VARCHAR2(50 CHAR);
              C_MASTER_SCHEMA VARCHAR2(50 CHAR);

              /* CURSOSRS */
              /*
               * Este cursor sirve para recorrer todos los contratos con ciclos abiertos y sin deuda.
               */
              CURSOR C_SALDADOS IS SELECT DISTINCT CRC.CRC_ID, CRC.CRE_ID, CNTB.*
                    FROM BATCH_DATOS_CNT CNTB
                      JOIN CRC_CICLO_RECOBRO_CNT CRC ON CNTB.CNT_ID = CRC.CNT_ID AND CRC.BORRADO = 0
                      JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID AND CRE.CRE_FECHA_BAJA IS NULL
                      JOIN RCF_ESC_ESQUEMA_CARTERAS ESC ON CRE.RCF_ESC_ID = ESC.RCF_ESC_ID
                      JOIN RCF_DD_TGC_TIPO_GESTION_CART TGC ON ESC.DD_TGC_ID = TGC.DD_TGC_ID
                    WHERE NVL(CNTB.CNT_RIESGO,0) <= 0 AND CRC.CRC_FECHA_BAJA IS NULL
                      AND TGC.DD_TGC_CODIGO = 'GI';

              R_SAL C_SALDADOS%ROWTYPE;

              /*
               * Este cursor sirva para localizar los clclos de recobro de las personas que se han quedado
               *  sin deuda irregulr en el expediente.
               */
              CURSOR C_CRP_SIN_DEUDA(P_CRE_ID NUMBER) IS SELECT CRP.CRP_ID
                FROM CRP_CICLO_RECOBRO_PER CRP
                  -- buscamos contratos de la persona
                  JOIN CPE_CONTRATOS_PERSONAS CPE ON CRP.PER_ID = CPE.PER_ID AND CPE.BORRADO=0
                  -- obtenemos los contratos que tienen ciclos de deuda abiertos en el expediente
                  LEFT JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRP.CRE_ID = CRC.CRE_ID AND CPE.CNT_ID = CRC.CNT_ID AND CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
                  LEFT JOIN BATCH_DATOS_CNT CNT ON CRC.CNT_ID = CNT.CNT_ID
                WHERE CRP.CRE_ID = P_CRE_ID
                GROUP BY CRP.CRP_ID
                HAVING SUM(NVL(CNT.CNT_RIESGO,0)) <= 0;

              R_CRP C_CRP_SIN_DEUDA%ROWTYPE;

              /* VARIABLES */
              V_MOB_ID NUMBER(16);

            BEGIN
              /*
              * CONSTANTES
              */
              C_USUARIO_BATCH := '${usuario.crear}';
              C_MASTER_SCHEMA := '${master.schema}';

              /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
              BEGIN
                EXECUTE IMMEDIATE 'SELECT DD_MOB_ID FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''REG'''
                INTO V_MOB_ID;

                EXCEPTION WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=REG');
              END;

              /* INICIO BUCLE PRINCIPAL */
              IF NOT C_SALDADOS%ISOPEN THEN
                OPEN C_SALDADOS;
              END IF;
              LOOP
                FETCH C_SALDADOS INTO R_SAL;
                EXIT WHEN C_SALDADOS%NOTFOUND;


                UPDATE CRC_CICLO_RECOBRO_CNT
                  SET CRC_FECHA_BAJA = TRUNC(SYSDATE)
                    , DD_MOB_ID = V_MOB_ID
                    , USUARIOMODIFICAR = C_USUARIO_BATCH
                    , FECHAMODIFICAR = SYSDATE
                  WHERE CRC_ID = R_SAL.CRC_ID;

                  /* INICIO CERRAR CRP DE PERSONAS SIN DEUDA */
                  IF C_CRP_SIN_DEUDA%ISOPEN THEN
                    CLOSE C_CRP_SIN_DEUDA;
                  END IF;
                  OPEN C_CRP_SIN_DEUDA(R_SAL.CRE_ID);
                  LOOP
                    FETCH C_CRP_SIN_DEUDA INTO R_CRP;
                    EXIT WHEN C_CRP_SIN_DEUDA%NOTFOUND;

                    UPDATE CRP_CICLO_RECOBRO_PER
                      SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                      , DD_MOB_ID = V_MOB_ID
                      , USUARIOMODIFICAR = C_USUARIO_BATCH
                      , FECHAMODIFICAR = SYSDATE
                    WHERE CRP_ID = R_CRP.CRP_ID;
                  END LOOP;
                  CLOSE C_CRP_SIN_DEUDA;
                  /* FIN    CERRAR CRP DE PERSONAS SIN DEUDA */

              END LOOP;
              CLOSE C_SALDADOS;
              /* FIN BUCLE PRINCIPAL */
              COMMIT;
            END;
        ]]>
    </entry>

    <entry key="recobro.finalizar.expediente_deuda_saldada.Oracle10gDialect">
        <![CDATA[
            DECLARE
              /* CURSORES */
              CURSOR C_REGULARIZADOS IS SELECT CRE.CRE_ID, CRE.EXP_ID
                    FROM CRE_CICLO_RECOBRO_EXP CRE
                      JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRE.CRE_ID = CRC.CRE_ID AND CRE.CRE_FECHA_BAJA IS NULL
                      JOIN BATCH_DATOS_CNT CNT ON CRC.CNT_ID = CNT.CNT_ID
                    GROUP BY CRE.CRE_ID, CRE.EXP_ID
                    HAVING SUM(NVL(CNT.CNT_RIESGO, 0)) <= 0;

              R_EXP C_REGULARIZADOS%ROWTYPE;

              /*
               * CONSTANTES
               */
               C_USUARIO_BATCH VARCHAR2(50 CHAR);
               C_MASTER_SCHEMA VARCHAR2(50 CHAR);

              /* VARIABLES */
              V_DD_EEX_ID NUMBER(16);
              V_MOB_ID NUMBER(16);
            BEGIN
              /*
              * CONSTANTES
              */
              C_USUARIO_BATCH := '${usuario.crear}';
              C_MASTER_SCHEMA := '${master.schema}';
              BEGIN
                /* OBTENEMOS EL ID DEL MOTIVO REGULARIZACIÓN */
                EXECUTE IMMEDIATE 'SELECT DD_MOB_ID FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''REG'''
                INTO V_MOB_ID;

                EXCEPTION WHEN NO_DATA_FOUND THEN
                  RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=REG');
              END;

              -- Obtenemos el estado cancelado del expediente
              EXECUTE IMMEDIATE 'SELECT DD_EEX_ID
                        FROM '||C_MASTER_SCHEMA||'.DD_EEX_ESTADO_EXPEDIENTE
                        WHERE DD_EEX_CODIGO=''5'''
              INTO V_DD_EEX_ID;


              IF C_REGULARIZADOS%ISOPEN THEN
                CLOSE C_REGULARIZADOS;
              END IF;
              OPEN C_REGULARIZADOS;
              LOOP
                FETCH C_REGULARIZADOS INTO R_EXP;
                EXIT WHEN C_REGULARIZADOS%NOTFOUND;

                 -- Cerramos el ciclo de deuda del expediente
                UPDATE CRE_CICLO_RECOBRO_EXP
                      SET CRE_FECHA_BAJA = TRUNC(SYSDATE)
                      , DD_MOB_ID = V_MOB_ID
                      , USUARIOMODIFICAR = C_USUARIO_BATCH
                      , FECHAMODIFICAR = SYSDATE
                WHERE CRE_ID = R_EXP.CRE_ID;

                -- Cerramos los ciclos de recobro de los contratos que no lo estuvieran
                UPDATE CRC_CICLO_RECOBRO_CNT
                      SET CRC_FECHA_BAJA = TRUNC(SYSDATE)
                      , DD_MOB_ID = V_MOB_ID
                      , USUARIOMODIFICAR = C_USUARIO_BATCH
                      , FECHAMODIFICAR = SYSDATE
                WHERE CRE_ID = R_EXP.CRE_ID AND CRC_FECHA_BAJA IS NULL;

                -- Cerramos los ciclos de recobro de las personas que no lo estuvieran
                UPDATE CRP_CICLO_RECOBRO_PER
                      SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                      , DD_MOB_ID = V_MOB_ID
                      , USUARIOMODIFICAR = C_USUARIO_BATCH
                      , FECHAMODIFICAR = SYSDATE
                WHERE CRE_ID = R_EXP.CRE_ID AND CRP_FECHA_BAJA IS NULL;

                -- Actualizamos el estado del expediente a cancelado
                UPDATE EXP_EXPEDIENTES
                      SET DD_EEX_ID = V_DD_EEX_ID
                      , USUARIOMODIFICAR = C_USUARIO_BATCH
                      , FECHAMODIFICAR = SYSDATE
                WHERE EXP_ID = R_EXP.EXP_ID;
              END LOOP;
              CLOSE C_REGULARIZADOS;

              COMMIT;

            END;
        ]]>
    </entry>

    <entry key="recobro.finalizar.ciclos_recobro_rot_o_ra.Oracle10gDialect">
        <![CDATA[
            /*
             * Cierra los ciclos de deuda (exp, cnt y per) de aquellos expedientes que se tengan
             *  que rearquetipar o rotar.
             */
            DECLARE
              /*
               * CONSTANTES
               */
               cUSUARIO_BATCH VARCHAR2(10 CHAR);
               cMASTER_SCHEMA VARCHAR2(10 CHAR);
              /*
               * CURSORES
               */
               -- Este cursor nos junta los expedientes que se han rearquetipado
               --  con los que se han rotado, ya que vamos a cerrar los ciclos de todos
               --  por igual.
               CURSOR C_EXPEDIENTES IS SELECT DISTINCT * FROM (
                    SELECT EXP_ID, RCF_AGE_ID, RCF_SCA_ID FROM TMP_REC_EXP_REARQUETIPADO
                    UNION
                    SELECT EXP_ID, RCF_AGE_ID, RCF_SCA_ID FROM TMP_REC_EXP_ROTACION
                );

               R_EXP C_EXPEDIENTES%ROWTYPE;

               /* VARIABLES */
              V_MOB_ID NUMBER(16);

            BEGIN
                /*
                * CONSTANTES
                */
                cUSUARIO_BATCH := '${usuario.crear}';
                cMASTER_SCHEMA := '${master.schema}';

              /* OBTENEMOS EL ID DEL MOTIVO BAJA */
              BEGIN
                EXECUTE IMMEDIATE 'SELECT NVL(DD_MOB_ID,-1) FROM '||cMASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''FG'''
                INTO V_MOB_ID;

                EXCEPTION WHEN NO_DATA_FOUND THEN
                    RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=FG');
              END;

              /* Inicio bucle general de expedientes */
              IF NOT C_EXPEDIENTES%ISOPEN THEN
                OPEN C_EXPEDIENTES;
              END IF;
              LOOP
                FETCH C_EXPEDIENTES INTO R_EXP;
                EXIT WHEN C_EXPEDIENTES%NOTFOUND;

                -- cerramos los ciclos de recobro de los contratos
                EXECUTE IMMEDIATE 'UPDATE CRC_CICLO_RECOBRO_CNT
                      SET CRC_FECHA_BAJA = TRUNC(SYSDATE)
                          , DD_MOB_ID = '||V_MOB_ID||'
                          , USUARIOMODIFICAR = '''||cUSUARIO_BATCH||'''
                          , FECHAMODIFICAR = SYSDATE
                      WHERE BORRADO = 0
                        AND CRC_FECHA_BAJA IS NULL
                        AND CRE_ID IN (SELECT CRE_ID FROM CRE_CICLO_RECOBRO_EXP
                                        WHERE BORRADO = 0 AND EXP_ID = '||R_EXP.EXP_ID||'
                                        AND CRE_FECHA_BAJA IS NULL
                        )
                     ';

                -- cerramos los ciclos de recobro de las personas
                EXECUTE IMMEDIATE 'UPDATE CRP_CICLO_RECOBRO_PER
                      SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                          , DD_MOB_ID = '||V_MOB_ID||'
                          , USUARIOMODIFICAR = '''||cUSUARIO_BATCH||'''
                          , FECHAMODIFICAR = SYSDATE
                      WHERE BORRADO = 0
                        AND CRP_FECHA_BAJA IS NULL
                        AND CRE_ID IN (SELECT CRE_ID FROM CRE_CICLO_RECOBRO_EXP
                                        WHERE BORRADO = 0 AND EXP_ID = '||R_EXP.EXP_ID||'
                                        AND CRE_FECHA_BAJA IS NULL
                        )
                     ';

                -- Cerramos el ciclo de recobro del expediente
                EXECUTE IMMEDIATE 'UPDATE CRE_CICLO_RECOBRO_EXP
                      SET CRE_FECHA_BAJA = TRUNC(SYSDATE)
                          , DD_MOB_ID = '||V_MOB_ID||'
                          , USUARIOMODIFICAR = '''||cUSUARIO_BATCH||'''
                          , FECHAMODIFICAR = SYSDATE
                      WHERE BORRADO = 0 AND EXP_ID = '||R_EXP.EXP_ID||'
                         AND CRE_FECHA_BAJA IS NULL';

              END LOOP;
              CLOSE C_EXPEDIENTES;
              /* Fin bucle general de expedientes */
              COMMIT;
            END;
        ]]>
    </entry>

    <entry key="recobro.finalizar.ciclos_recobro_estado_no_recibido.Oracle10gDialect">
        <![CDATA[
        DECLARE
         /*
          * CONSTANTES
          */
          C_USUARIO_BATCH VARCHAR2(50 CHAR);
          C_MASTER_SCHEMA VARCHAR2(50 CHAR);

          /* CURSOSRS */
          /*
           * Este cursor sirve para recorrer todos los contratos NO RECIBIDOS con ciclos abiertos.
           */
          CURSOR C_NO_RECIBIDOS IS SELECT DISTINCT CRC.CRC_ID, CRC.CRE_ID
                from CRC_CICLO_RECOBRO_CNT CRC
                  JOIN CNT_CONTRATOS CNT ON CRC.CNT_ID = CNT.CNT_ID
                  JOIN ${master.schema}.DD_ESC_ESTADO_CNT ESC ON CNT.DD_ESC_ID = ESC.DD_ESC_ID
                WHERE
                  CRC.CRC_FECHA_BAJA IS NULL
                  AND CRC.BORRADO = 0
                  AND ESC.DD_ESC_CODIGO = '6';

          R_CRC C_NO_RECIBIDOS%ROWTYPE;

          /*
           * Este cursor sirva para localizar los clclos de recobro de las personas que se han quedado
           *  sin contratos con ciclos abiertos en el expediente.
           */
          CURSOR C_CRP_SIN_CRC(P_CRE_ID NUMBER) IS SELECT CRP.CRP_ID
            FROM CRP_CICLO_RECOBRO_PER CRP
              -- buscamos contratos de la persona
              JOIN CPE_CONTRATOS_PERSONAS CPE ON CRP.PER_ID = CPE.PER_ID AND CPE.BORRADO=0
              -- obtenemos los contratos que tienen ciclos de deuda abiertos en el expediente
              LEFT JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRP.CRE_ID = CRC.CRE_ID AND CPE.CNT_ID = CRC.CNT_ID AND CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
            WHERE CRP.CRE_ID = P_CRE_ID
              AND CRP.CRP_FECHA_BAJA IS NULL
              AND CRP.BORRADO = 0
            GROUP BY CRP.CRP_ID
            HAVING COUNT(CRC.CRC_ID) <= 0;

          R_CRP C_CRP_SIN_CRC%ROWTYPE;

          /* VARIABLES */
          V_MOB_ID NUMBER(16);
        BEGIN
          /*
          * CONSTANTES
          */
          C_USUARIO_BATCH := '${usuario.crear}';
          C_MASTER_SCHEMA := '${master.schema}';

          /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_MOB_ID) FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''NR'''
            INTO V_MOB_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=NR');
          END;

          /* INICIO BUCLE PRINCIPAL */
          IF NOT C_NO_RECIBIDOS%ISOPEN THEN
            OPEN C_NO_RECIBIDOS;
          END IF;
          LOOP
            FETCH C_NO_RECIBIDOS INTO R_CRC;
            EXIT WHEN C_NO_RECIBIDOS%NOTFOUND;


            UPDATE CRC_CICLO_RECOBRO_CNT
              SET CRC_FECHA_BAJA = TRUNC(SYSDATE)
                , DD_MOB_ID = V_MOB_ID
                , USUARIOMODIFICAR = C_USUARIO_BATCH
                , FECHAMODIFICAR = SYSDATE
              WHERE CRC_ID = R_CRC.CRC_ID;

              /* INICIO CERRAR CRP DE PERSONAS SIN DEUDA */
              IF C_CRP_SIN_CRC%ISOPEN THEN
                CLOSE C_CRP_SIN_CRC;
              END IF;
              OPEN C_CRP_SIN_CRC(R_CRC.CRE_ID);
              LOOP
                FETCH C_CRP_SIN_CRC INTO R_CRP;
                EXIT WHEN C_CRP_SIN_CRC%NOTFOUND;

                UPDATE CRP_CICLO_RECOBRO_PER
                  SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                  , DD_MOB_ID = V_MOB_ID
                  , USUARIOMODIFICAR = C_USUARIO_BATCH
                  , FECHAMODIFICAR = SYSDATE
                WHERE CRP_ID = R_CRP.CRP_ID;
              END LOOP;
              CLOSE C_CRP_SIN_CRC;
              /* FIN    CERRAR CRP DE PERSONAS SIN DEUDA */

          END LOOP;
          CLOSE C_NO_RECIBIDOS;
          /* FIN BUCLE PRINCIPAL */
          COMMIT;
         END;
    ]]>
    </entry>

    <entry key="recobro.finalizar.ciclos_recobro_estado_cancelado.Oracle10gDialect">
        <![CDATA[
        DECLARE
        /*
          * CONSTANTES
          */
          C_USUARIO_BATCH VARCHAR2(50 CHAR);
          C_MASTER_SCHEMA VARCHAR2(50 CHAR);

          /* CURSOSRS */
          /*
           * Este cursor sirve para recorrer todos los contratos CANCELADOS con ciclos abiertos.
           */
          CURSOR C_CANCELADOS IS SELECT DISTINCT CRC.CRC_ID, CRC.CRE_ID
                from CRC_CICLO_RECOBRO_CNT CRC
                  JOIN CNT_CONTRATOS CNT ON CRC.CNT_ID = CNT.CNT_ID
                  JOIN ${master.schema}.DD_ESC_ESTADO_CNT ESC ON CNT.DD_ESC_ID = ESC.DD_ESC_ID
                WHERE
                  CRC.CRC_FECHA_BAJA IS NULL
                  AND CRC.BORRADO = 0
                  AND ESC.DD_ESC_CODIGO = '7';

          R_CRC C_CANCELADOS%ROWTYPE;

          /*
           * Este cursor sirva para localizar los clclos de recobro de las personas que se han quedado
           *  sin contratos con ciclos abiertos en el expediente.
           */
          CURSOR C_CRP_SIN_CRC(P_CRE_ID NUMBER) IS SELECT CRP.CRP_ID
            FROM CRP_CICLO_RECOBRO_PER CRP
              -- buscamos contratos de la persona
              JOIN CPE_CONTRATOS_PERSONAS CPE ON CRP.PER_ID = CPE.PER_ID AND CPE.BORRADO=0
              -- obtenemos los contratos que tienen ciclos de deuda abiertos en el expediente
              LEFT JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRP.CRE_ID = CRC.CRE_ID AND CPE.CNT_ID = CRC.CNT_ID AND CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
            WHERE CRP.CRE_ID = P_CRE_ID
              AND CRP.CRP_FECHA_BAJA IS NULL
              AND CRP.BORRADO = 0
            GROUP BY CRP.CRP_ID
            HAVING COUNT(CRC.CRC_ID) <= 0;

          R_CRP C_CRP_SIN_CRC%ROWTYPE;

          /* VARIABLES */
          V_MOB_ID NUMBER(16);
        BEGIN
          /*
          * CONSTANTES
          */
          C_USUARIO_BATCH := '${usuario.crear}';
          C_MASTER_SCHEMA := '${master.schema}';

          /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_MOB_ID) FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''CAN'''
            INTO V_MOB_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=CAN');
          END;

          /* INICIO BUCLE PRINCIPAL */
          IF NOT C_CANCELADOS%ISOPEN THEN
            OPEN C_CANCELADOS;
          END IF;
          LOOP
            FETCH C_CANCELADOS INTO R_CRC;
            EXIT WHEN C_CANCELADOS%NOTFOUND;


            UPDATE CRC_CICLO_RECOBRO_CNT
              SET CRC_FECHA_BAJA = TRUNC(SYSDATE)
                , DD_MOB_ID = V_MOB_ID
                , USUARIOMODIFICAR = C_USUARIO_BATCH
                , FECHAMODIFICAR = SYSDATE
              WHERE CRC_ID = R_CRC.CRC_ID;

              /* INICIO CERRAR CRP DE PERSONAS SIN DEUDA */
              IF C_CRP_SIN_CRC%ISOPEN THEN
                CLOSE C_CRP_SIN_CRC;
              END IF;
              OPEN C_CRP_SIN_CRC(R_CRC.CRE_ID);
              LOOP
                FETCH C_CRP_SIN_CRC INTO R_CRP;
                EXIT WHEN C_CRP_SIN_CRC%NOTFOUND;

                UPDATE CRP_CICLO_RECOBRO_PER
                  SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                  , DD_MOB_ID = V_MOB_ID
                  , USUARIOMODIFICAR = C_USUARIO_BATCH
                  , FECHAMODIFICAR = SYSDATE
                WHERE CRP_ID = R_CRP.CRP_ID;
              END LOOP;
              CLOSE C_CRP_SIN_CRC;
              /* FIN    CERRAR CRP DE PERSONAS SIN DEUDA */

          END LOOP;
          CLOSE C_CANCELADOS;
          /* FIN BUCLE PRINCIPAL */
          COMMIT;
        END;
    ]]>
    </entry>

    <entry key="recobro.finalizar.ciclos_recobro_exp_sin_crc.Oracle10gDialect">
        <![CDATA[
        DECLARE
        /*
          * CONSTANTES
          */
          C_USUARIO_BATCH VARCHAR2(50 CHAR);
          C_MASTER_SCHEMA VARCHAR2(50 CHAR);

          /* CURSOSRS */
          /*
           * Este cursor sirve para recorrer todos los contratos NO RECIBIDOS con ciclos abiertos.
           */
          CURSOR C_SIN_CRC IS SELECT DISTINCT CRE.CRE_ID
        FROM CRE_CICLO_RECOBRO_EXP CRE
          LEFT JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRE.CRE_ID = CRC.CRE_ID AND CRC.CRC_FECHA_BAJA IS NULL AND CRC.BORRADO = 0
        WHERE CRE.CRE_FECHA_BAJA IS NULL
          AND CRE.BORRADO = 0
          AND CRC.CRC_ID IS NULL;

          TYPE T_CRE IS TABLE OF C_SIN_CRC%ROWTYPE INDEX BY BINARY_INTEGER;
          L_CRE T_CRE;

          /* VARIABLES */
          V_MOB_ID NUMBER(16);
        BEGIN
          /*
          * CONSTANTES
          */
          C_USUARIO_BATCH := '${usuario.crear}';
          C_MASTER_SCHEMA := '${master.schema}';

          /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_MOB_ID) FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''FCRC'''
            INTO V_MOB_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTIVO DE BAJA CODIGO=FCRC');
          END;

          /* INICIO BUCLE PRINCIPAL */
          OPEN C_SIN_CRC;
            FETCH C_SIN_CRC BULK COLLECT INTO L_CRE;

            -- Cerramos los ciclos de recobro de persona asociados al CRE
            FORALL I IN 1..L_CRE.COUNT
            UPDATE CRP_CICLO_RECOBRO_PER
              SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                , DD_MOB_ID = V_MOB_ID
                , USUARIOMODIFICAR = C_USUARIO_BATCH
                , FECHAMODIFICAR = SYSDATE
              WHERE CRE_ID = L_CRE(I).CRE_ID
                AND CRP_FECHA_BAJA IS NULL;

            FORALL I IN 1..L_CRE.COUNT
            UPDATE CRE_CICLO_RECOBRO_EXP
              SET CRE_FECHA_BAJA = TRUNC(SYSDATE)
                , DD_MOB_ID = V_MOB_ID
                , USUARIOMODIFICAR = C_USUARIO_BATCH
                , FECHAMODIFICAR = SYSDATE
              WHERE CRE_ID = L_CRE(I).CRE_ID;

          CLOSE C_SIN_CRC;
          /* FIN BUCLE PRINCIPAL */
          COMMIT;
        END;
    ]]>
    </entry>

    <entry key="recobro.candelar_exp_sin_cre.Oracle10gDialect">
        <![CDATA[
        DECLARE
            /*
          * CONSTANTES
          */
          C_USUARIO_BATCH VARCHAR2(50 CHAR);
          C_MASTER_SCHEMA VARCHAR2(50 CHAR);

          /* CURSOSRS */
          /*
           * Este cursor sirve para recorrer todos los contratos NO RECIBIDOS con ciclos abiertos.
           */
          CURSOR C_SIN_CRE IS SELECT DISTINCT EXP.EXP_ID
        FROM EXP_EXPEDIENTES EXP
          JOIN DD_TPX_TIPO_EXPEDIENTE TPX ON EXP.DD_TPX_ID = TPX.DD_TPX_ID
          JOIN ${master.schema}.DD_EEX_ESTADO_EXPEDIENTE EEX ON EXP.DD_EEX_ID = EEX.DD_EEX_ID
          LEFT JOIN CRE_CICLO_RECOBRO_EXP CRE ON EXP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
        WHERE TPX.DD_TPX_CODIGO = 'REC'
          AND EEX.DD_EEX_CODIGO = 1
          AND EXP.BORRADO = 0
          AND CRE.CRE_ID IS NULL;

          TYPE T_EXP IS TABLE OF C_SIN_CRE%ROWTYPE INDEX BY BINARY_INTEGER;
          L_EXP T_EXP;

          /* VARIABLES */
          V_EEX_ID NUMBER(16);
        BEGIN
          /*
          * CONSTANTES
          */
          C_USUARIO_BATCH := '${usuario.crear}';
          C_MASTER_SCHEMA := '${master.schema}';

          /* OBTENEMOS EL ID DEL MOTIVO EXCEPTUACION */
          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_EEX_ID) FROM '||C_MASTER_SCHEMA||'.DD_EEX_ESTADO_EXPEDIENTE WHERE DD_EEX_CODIGO=''5'''
            INTO V_EEX_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL ESTADO DE EXPEDIENTE  CODIGO=5');
          END;

          /* INICIO BUCLE PRINCIPAL */
          OPEN C_SIN_CRE;
          LOOP
            FETCH C_SIN_CRE BULK COLLECT INTO L_EXP LIMIT 1000;


            -- Cerramos los ciclos de recobro de persona asociados al CRE
            FORALL I IN 1..L_EXP.COUNT
            UPDATE EXP_EXPEDIENTES
              SET DD_EEX_ID = V_EEX_ID
                , USUARIOMODIFICAR = C_USUARIO_BATCH
                , FECHAMODIFICAR = SYSDATE
              WHERE EXP_ID = L_EXP(I).EXP_ID;

            EXIT WHEN C_SIN_CRE%NOTFOUND;

          END LOOP;
          CLOSE C_SIN_CRE;
          /* FIN BUCLE PRINCIPAL */
          COMMIT;
        END;
    ]]>
    </entry>

    <!-- ******************************************************************* -->
    <!-- FIN DE LA GESTIÓN DE CICLOS DE RECOBRO Y CANCELACIÓN DE EXPEDIENTES -->
    <!-- ******************************************************************* -->

    <!-- CONSOLIDAMOS LOS EXPEDIENTES CANCELADOS Y LOS REARQUETIPADOS QUE SON TODOS LOS POSIBLES CONTRATOS DE BAJA -->
    <entry key="recobro.insert.tmp_rec_contratos_cons_baja.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_CONTRATOS_CONS_BAJA (EXP_ID, CNT_ID, RCF_AGE_ID)
                SELECT DISTINCT EXP_ID, CNT_ID, RCF_AGE_ID FROM (
                        SELECT CAN.EXP_ID, CEX.CNT_ID, ENT.RCF_AGE_ID
                        FROM TMP_REC_EXP_CANCELADOS CAN
                            INNER JOIN BATCH_DATOS_EXP ENT ON CAN.EXP_ID = ENT.EXP_ID
                            INNER JOIN BATCH_DATOS_CNT_EXP CEX ON CAN.EXP_ID = CEX.EXP_ID
                    UNION
                        SELECT EXP_ID, CNT_ID, RCF_AGE_ID
                        FROM TMP_REC_EXP_DESNORMALIZADO
                )
        ]]>
    </entry>

    <entry key="recobro.idxcreate.tmp_rec_contratos_cons_baja.Oracle10gDialect">
        <![CDATA[
            BEGIN
                -- Rebuid de indices
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_CNT_BAJA_1');
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_CNT_BAJA_2');
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_CNT_BAJA_3');

                -- Actualizamos estadisticas
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_CONTRATOS_CONS_BAJA');
                OPERACION_DDL.DDL_TABLE('STATS','CRC_CICLO_RECOBRO_CNT');
                OPERACION_DDL.DDL_TABLE('STATS','CRE_CICLO_RECOBRO_EXP');
            END;
        ]]>
    </entry>

    <!-- GUARDAMOS EL REPARTO DEL DÍA ANTERIOR MENOS LAS POSIBLES BAJAS DE HOY EN UNA TABLA TEMPORAL PARA TRABAJAR CON ELLA -->
    <entry key="recobro.insert.tmp_rec_fichero_contratos.Oracle10gDialect">
        <![CDATA[
            BEGIN
                EXECUTE IMMEDIATE 'INSERT INTO TMP_REC_FICHERO_CONTRATOS (RCF_AGE_ID, RCF_SCA_ID, CNT_ENV_ID, CNT_COD_PROPIETARIO, DD_TPR_CODIGO, CNT_CONTRATO, CNT_ID)
                SELECT CRE.RCF_AGE_ID, CRE.RCF_SCA_ID, CRC.CRC_ID_ENVIO, INFO.CODIGO_PROPIETARIO, INFO.TIPO_PRODUCTO, INFO.NUMERO_CONTRATO, CRC.CNT_ID
                FROM CRC_CICLO_RECOBRO_CNT CRC
                    JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRE.BORRADO = 0 AND  CRC.CRE_ID = CRE.CRE_ID
                    JOIN EXP_EXPEDIENTES EXP ON EXP.BORRADO = 0 AND CRE.EXP_ID = EXP.EXP_ID AND EXP.EXP_MANUAL = 0 AND EXP.DD_EEX_ID = 2
                       JOIN BATCH_DATOS_CNT_INFO INFO ON CRC.CNT_ID = INFO.CNT_ID
                LEFT JOIN TMP_REC_CONTRATOS_CONS_BAJA B ON CRC.CNT_ID = B.CNT_ID
                WHERE CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
                       AND B.CNT_ID IS NULL';

                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_FICHERO_CONT_1'); --rebuild
                COMMIT;
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_FICHERO_CONTRATOS');
            END;
        ]]>
    </entry>

    <!-- DESNORMALIZAMOS LAS PERSONAS EN LA TABLA TMP_REC_EXP_REPARTO_AGENCIAS QUE CONTIENE EL REPARTO
        DE HOY DE EXPEDIENTES EXISTENTES Y NUEVOS MÁS EL REPARTO DE AYER MENOS LAS POSIBLES BAJAS CONSOLIDADAS-->
    <!-- OJO!! CON EL TEMA DE LOS EXPEDIENTES MANUALES HAY QUE AÑADIR AL BATCH_DATOS_ENTRADAS EL CAMPO EXP_MANUAL
         PARA DESPUÉS AÑADIRLOS A LA TABLA TMP_REC_EXP_AGE_MAR -->
    <!-- Partimos este paso en varios

        <entry key="recobro.insert.tmp_rec_exp_age_mar.Oracle10gDialect">
        <![CDATA[
            INSERT  /*+ APPEND PARALLEL(TMP_REC_EXP_AGE_MAR_1, 16) PQ_DISTRIBUTE(TMP_REC_EXP_AGE_MAR_1, NONE) */ INTO TMP_REC_EXP_AGE_MAR
            SELECT DISTINCT RCF_AGE_ID, RCF_SCA_ID, EXP_ID, PER_ID FROM (
                (SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, PEX.PER_ID
                 FROM TMP_REC_EXP_REPARTO_AGENCIAS TMP
                 INNER JOIN BATCH_DATOS_PER_EXP PEX ON PEX.EXP_ID = TMP.EXP_ID
                UNION
                SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, SAL.PER_ID
                 FROM TMP_REC_EXP_REPARTO_AGENCIAS TMP
                 INNER JOIN BATCH_DATOS_SALIDA SAL ON SAL.EXP_ID = TMP.EXP_ID
                UNION
                SELECT DISTINCT ENT.RCF_AGE_ID, TMP.RCF_SCA_ID, CEX.EXP_ID, PEX.PER_ID
                 FROM TMP_REC_FICHERO_CONTRATOS TMP
                 INNER JOIN BATCH_DATOS_CNT_EXP CEX ON CEX.CNT_ID = TMP.CNT_ID
                 INNER JOIN BATCH_DATOS_PER_EXP PEX ON PEX.EXP_ID = CEX.EXP_ID
                 INNER JOIN BATCH_DATOS_EXP ENT ON ENT.EXP_ID = CEX.EXP_ID
                UNION
                SELECT EXP.RCF_AGE_ID, EXP.RCF_SCA_ID, EXP.EXP_ID, PER.PER_ID
                FROM BATCH_DATOS_EXP_MANUAL EXP
                INNER JOIN BATCH_DATOS_PER_EXP PER ON EXP.EXP_ID = PER.EXP_ID
                )
            )
        ]]>
    </entry>

     -->
    <entry key="recobro.insert.tmp_rec_exp_age_mar_sub_1.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_EXP_AGE_MAR_SUB
            (SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, CRP.PER_ID
                 FROM TMP_REC_EXP_REPARTO_AGENCIAS TMP
                    INNER JOIN CRE_CICLO_RECOBRO_EXP CRE ON TMP.EXP_ID = CRE.EXP_ID AND CRE.BORRADO = 0 AND CRE.CRE_FECHA_BAJA IS NULL
                    INNER JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND CRP.BORRADO = 0 AND CRP.CRP_FECHA_BAJA IS NULL
            )
        ]]>
    </entry>
    <entry key="recobro.insert.tmp_rec_exp_age_mar_sub_2.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_EXP_AGE_MAR_SUB
            (SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, SAL.PER_ID
                 FROM TMP_REC_EXP_REPARTO_AGENCIAS TMP
                 INNER JOIN BATCH_DATOS_SALIDA SAL ON SAL.EXP_ID = TMP.EXP_ID
            )
        ]]>
    </entry>
    <entry key="recobro.insert.tmp_rec_exp_age_mar_sub_3.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_EXP_AGE_MAR_SUB
            (SELECT DISTINCT CRE.RCF_AGE_ID, TMP.RCF_SCA_ID, CRE.EXP_ID, CRP.PER_ID
                FROM TMP_REC_FICHERO_CONTRATOS TMP
                    INNER JOIN CRC_CICLO_RECOBRO_CNT CRC ON TMP.CNT_ID = CRC.CNT_ID AND TMP.CNT_ENV_ID = CRC.CRC_ID_ENVIO
                    INNER JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID
                    INNER JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND CRP.CRP_FECHA_BAJA IS NULL AND CRP.BORRADO = 0
            )
        ]]>
    </entry>
    <entry key="recobro.insert.tmp_rec_exp_age_mar_sub_4.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_EXP_AGE_MAR_SUB
            (SELECT EXP.RCF_AGE_ID, EXP.RCF_SCA_ID, EXP.EXP_ID, CRP.PER_ID
                FROM BATCH_DATOS_EXP_MANUAL EXP
                    INNER JOIN CRE_CICLO_RECOBRO_EXP CRE ON EXP.EXP_ID = CRE.EXP_ID AND CRE.BORRADO = 0 AND CRE.CRE_FECHA_BAJA IS NULL
                    INNER JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND CRP.BORRADO = 0 AND CRP.CRP_FECHA_BAJA IS NULL
            )
        ]]>
    </entry>

    <entry key="recobro.insert.tmp_rec_exp_age_mar.Oracle10gDialect">
        <![CDATA[
           BEGIN
            OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_EXP_AGE_MAR_SUB');
            INSERT INTO TMP_REC_EXP_AGE_MAR
            SELECT DISTINCT RCF_AGE_ID, RCF_SCA_ID, EXP_ID, PER_ID FROM TMP_REC_EXP_AGE_MAR_SUB;
            COMMIT;
           END;
        ]]>
    </entry>

    <entry key="recobro.idxcreate.tmp_rec_exp_age_mar.Oracle10gDialect">
        <![CDATA[
            BEGIN
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_1'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_2'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_3'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_4'); --rebuild
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_EXP_AGE_MAR');
            END;
        ]]>
    </entry>

    <!-- EXCLUIMOS LAS PERSONAS EXCEPTUADAS Y LAS PERSONAS CUYA DEUDA IRREGULAR DE TODOS SUS CONTRATOS SEA = 0 -->
    <entry key="recobro.insert.tmp_rec_exp_age_mar_exc.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_EXP_AGE_MAR_EXC
            SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.PER_ID
              FROM TMP_REC_EXP_AGE_MAR TMP
                 , BATCH_DATOS_EXCEPTUADOS EXC
                 , BATCH_DATOS_PER PER
             WHERE TMP.PER_ID = EXC.PER_ID(+) AND EXC.EXC_ID IS NULL
               AND TMP.PER_ID = PER.PER_ID
               AND PER.PER_DEUDA_IRREGULAR > 0;
        ]]>
    </entry>

    <entry key="recobro.idxcreate.tmp_rec_exp_age_mar_exc.Oracle10gDialect">
        <![CDATA[
            BEGIN
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_EXC_1'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_EXC_2'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_EXC_3'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_EXC_4'); --rebuild
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_EXP_AGE_MAR_EXC');
            END;
        ]]>
    </entry>

    <!-- MARCAMOS LAS PERSONAS QUE TIENEN GESTION COMPARTIDA -->
    <entry key="recobro.insert.tmp_rec_exp_age_mar_ges.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_REC_EXP_AGE_MAR_GES
            (SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.PER_ID,
                    CASE WHEN (SELECT COUNT(*)
                                 FROM TMP_REC_EXP_AGE_MAR_EXC MAR
                                WHERE MAR.PER_ID = TMP.PER_ID) = 1 THEN 0 ELSE 1 END
               FROM TMP_REC_EXP_AGE_MAR_EXC TMP)
        ]]>
    </entry>

    <entry key="recobro.idxcreate.tmp_rec_exp_age_mar_ges.Oracle10gDialect">
        <![CDATA[
            BEGIN
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_GES_1'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_GES_2'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_GES_3'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_MAR_GES_4'); --rebuild
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_EXP_AGE_MAR_GES');
            END;
        ]]>
    </entry>

    <!-- DESNORMALIZAMOS LOS CONTRATOS EN LA TABLA TMP_REC_EXP_AGE_CNT -->
    <entry key="recobro.insert.tmp_rec_exp_age_cnt.Oracle10gDialect">
        <![CDATA[
            BEGIN
             INSERT INTO TMP_REC_EXP_AGE_CNT
             SELECT DISTINCT RCF_AGE_ID, RCF_SCA_ID, EXP_ID, PER_ID, CNT_ID, GES_ID FROM
             (
                    (SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.PER_ID, CRC.CNT_ID, TMP.GES_ID
                     FROM TMP_REC_EXP_AGE_MAR_GES TMP
                        INNER JOIN CRE_CICLO_RECOBRO_EXP CRE ON TMP.EXP_ID = CRE.EXP_ID AND CRE.BORRADO = 0 AND CRE.CRE_FECHA_BAJA IS NULL
                        INNER JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRE.CRE_ID = CRC.CRE_ID AND CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
                    UNION
                    SELECT DISTINCT  TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.PER_ID, SAL.CNT_ID, TMP.GES_ID
                     FROM TMP_REC_EXP_AGE_MAR_GES TMP
                     INNER JOIN BATCH_DATOS_SALIDA SAL ON SAL.EXP_ID = TMP.EXP_ID and SAL.PER_ID = TMP.PER_ID
                    )
              );
             COMMIT;
             OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_EXP_AGE_CNT');
            END;
        ]]>
    </entry>

    <!-- EXCLUIMOS LOS CONTRATOS EXCEPTUADOS, LOS QUE TENGAN RIESGO = 0 Y LOS QUE TENGAN DEUDA IRREGULAR = 0 -->
    <entry key="recobro.insert.tmp_rec_exp_age_cnt_exc.Oracle10gDialect">
        <![CDATA[
            BEGIN
                EXECUTE IMMEDIATE
                'INSERT INTO TMP_REC_EXP_AGE_CNT_EXC
                 (SELECT DISTINCT TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.PER_ID, TMP.CNT_ID, TMP.GES_ID
                    FROM TMP_REC_EXP_AGE_CNT TMP
                    INNER JOIN BATCH_DATOS_CNT CNT ON TMP.CNT_ID = CNT.CNT_ID AND CNT.CNT_RIESGO > 0
                    LEFT JOIN BATCH_DATOS_EXCEPTUADOS EXCNT ON TMP.CNT_ID = EXCNT.CNT_ID
                    LEFT JOIN BATCH_DATOS_EXCEPTUADOS EXPER ON TMP.PER_ID = EXPER.PER_ID
                   WHERE EXCNT.CNT_ID IS NULL AND EXPER.PER_ID IS NULL)';

                  OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_CNT_EXC_1'); --rebuild
                  OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_CNT_EXC_2'); --rebuild
                  OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_CNT_EXC_3'); --rebuild
                  OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_CNT_EXC_4'); --rebuild
                  OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_EXP_AGE_CNT_EXC_5'); --rebuild
                  OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_EXP_AGE_CNT_EXC');
            END;
        ]]>
    </entry>

    <!-- Paso 2: PROCESO DE CALCULO DE BAJAS -->
    <!-- BORRAMOS LA TABLA TMP_REC_REPARTO_DIA_ANTERIOR -->
    <entry key="recobro.borrado.tmp_rec_reparto_dia_anterior.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_REPARTO_DIA_ANTERIOR');
            end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA TMP_REC_CONTRATOS_BAJA -->
    <entry key="recobro.borrado.tmp_rec_contratos_baja.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_CONTRATOS_BAJA');
            end;
        ]]>
    </entry>

    <!-- BORRAMOS LA TABLA TMP_REC_CONTRATOS_CONS_BAJA_MOT -->
    <entry key="recobro.borrado.tmp_rec_contratos_baja_mot.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','TMP_REC_CONTRATOS_BAJA_MOT');
            end;
        ]]>
    </entry>

    <!-- CARGAMOS EL REPARTO DEL DIA ANTERIOR DESDE LA TABLA DE HISTORICO DE REPARTO -->
    <entry key="recobro.insert.tmp_rec_reparto_dia_anterior.Oracle10gDialect">
        <![CDATA[
            declare
                V_FECHA_HIST TIMESTAMP(9);
                V_SQL VARCHAR(2000);
            begin
                select max(FECHA_HIST) into V_FECHA_HIST from H_REC_FICHERO_CONTRATOS;

                DBMS_OUTPUT.PUT_LINE(V_FECHA_HIST);
                V_SQL := 'INSERT INTO TMP_REC_REPARTO_DIA_ANTERIOR
                          SELECT DISTINCT CNT.CNT_ID, REC.RCF_AGE_ID
                            FROM H_REC_FICHERO_CONTRATOS REC JOIN CNT_CONTRATOS CNT ON SUBSTR(REC.ID_ENVIO,9) = CNT.CNT_ID
                           WHERE REC.FECHA_HIST = :V_FECHA_HIST';
                EXECUTE IMMEDIATE V_SQL USING V_FECHA_HIST;

                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_REPARTO_DIA_ANT_1'); --rebuild
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_REC_REPARTO_DIA_ANT_2'); --rebuild
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_REPARTO_DIA_ANTERIOR');
            end;
        ]]>
    </entry>

    <!-- CRUZAMOS POR AGENCIA LA TABLA DEL REPARTO DEL DÍA ANTERIOR JUNTO CON LA TABLA DEL REPARTO DE HOY Y LO QUE FALTE SON LAS BAJAS -->
    <entry key="recobro.insert.tmp_rec_contratos_baja.Oracle10gDialect">
        <![CDATA[
            declare
                cursor agencias is select distinct RCF_AGE_ID from TMP_REC_REPARTO_DIA_ANTERIOR where RCF_AGE_ID is not null;
            begin
                for agencia in agencias
                loop
                    DBMS_OUTPUT.PUT_LINE(agencia.RCF_AGE_ID);

                    INSERT INTO TMP_REC_CONTRATOS_BAJA (CNT_ID, RCF_AGE_ID)
                    SELECT REC.CNT_ID, agencia.RCF_AGE_ID
                      FROM TMP_REC_REPARTO_DIA_ANTERIOR REC
                     WHERE REC.RCF_AGE_ID = agencia.RCF_AGE_ID
                       AND REC.CNT_ID NOT IN (SELECT TMP2.CNT_ID
                                                FROM TMP_REC_EXP_AGE_CNT_EXC TMP2
                                               WHERE TMP2.RCF_AGE_ID = agencia.RCF_AGE_ID);

                end loop;
                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_CONTRATOS_BAJA');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO DE BAJA APROVISIONAMIENTO -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.baja_aprovisionamiento.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
                mob_id_agencia number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'NR' AND BORRADO = 0;
                SELECT DD_MOB_ID INTO mob_id_agencia FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'BA' AND BORRADO = 0;

                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT  TMP.CNT_ID, TMP.RCF_AGE_ID, mob_id_agencia AS DD_MOB_ID
                FROM TMP_REC_REPARTO_DIA_ANTERIOR TMP
                WHERE CNT_ID IN (
                    SELECT CNT_ID FROM CRC_CICLO_RECOBRO_CNT WHERE TRUNC(CRC_FECHA_BAJA) = TRUNC(SYSDATE) AND DD_MOB_ID = mob_id
                )
                AND TMP.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);

                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_CONTRATOS_BAJA_MOT');

                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja NR o BA');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO DE FIN DE PLAZO -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.rotacion.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'FP' AND BORRADO = 0;
                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM TMP_REC_EXP_ROTACION TMP
                    INNER JOIN BATCH_DATOS_CNT_EXP CEX ON CEX.EXP_ID = TMP.EXP_ID
                    INNER JOIN TMP_REC_CONTRATOS_BAJA REC ON REC.CNT_ID = CEX.CNT_ID
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);

                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de rotación');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO CONTRATO EXCEPTUADO -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.exceptuados.contratos.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'EXC' AND BORRADO = 0;

                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM BATCH_DATOS_EXCEPTUADOS TMP
                    INNER JOIN TMP_REC_CONTRATOS_BAJA REC ON REC.CNT_ID = TMP.CNT_ID
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);

                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de contratos exceptuados');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO PERSONA EXCEPTUADA -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.exceptuados.personas.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'EXP' AND BORRADO = 0;
                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM BATCH_DATOS_EXCEPTUADOS TMP
                    INNER JOIN CPE_CONTRATOS_PERSONAS CPE ON TMP.PER_ID = CPE.PER_ID AND CPE.BORRADO = 0
                    INNER JOIN TMP_REC_CONTRATOS_BAJA REC ON REC.CNT_ID = CPE.CNT_ID
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de personas exceptuadas');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO DE FIN DE CAMPAÑA POR RUPTURA -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.ruptura.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'FDC' AND BORRADO = 0;
                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM TMP_REC_EXP_EXTINCION_RU TMP
                    INNER JOIN BATCH_DATOS_CNT_EXP CEX ON CEX.EXP_ID = TMP.EXP_ID
                    INNER JOIN TMP_REC_CONTRATOS_BAJA REC ON REC.CNT_ID = CEX.CNT_ID
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de ruptura');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO DE FIN DE CAMPAÑA POR REARQUETIPACION -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.rearquetipacion.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'FDC' AND BORRADO = 0;
                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM TMP_REC_EXP_EXTINCION_RA TMP
                    INNER JOIN BATCH_DATOS_CNT_EXP CEX ON CEX.EXP_ID = TMP.EXP_ID
                    INNER JOIN TMP_REC_CONTRATOS_BAJA REC ON REC.CNT_ID = CEX.CNT_ID
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de rearquetipación');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DE CONTRATOS CON MOTIVO DE REGULARIZACIÓN -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.regularizacion.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'REG' AND BORRADO = 0;
                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM TMP_REC_EXP_SIN_RIESGOS TMP
                    INNER JOIN BATCH_DATOS_CNT_EXP CEX ON CEX.EXP_ID = TMP.EXP_ID
                    INNER JOIN TMP_REC_CONTRATOS_BAJA REC ON REC.CNT_ID = CEX.CNT_ID
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de regularización');
            end;
        ]]>
    </entry>

    <!-- OBTENCIÓN DEL RESTO DEL MOTIVO OTROS PARA EL RESTO DE CONTRATOS -->
    <entry key="recobro.insert.tmp_rec_contratos_baja_mot.otros.Oracle10gDialect">
        <![CDATA[
            declare
                mob_id number;
            begin
                SELECT DD_MOB_ID INTO mob_id FROM ${master.schema}.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO = 'OTR' AND BORRADO = 0;

                INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT
                SELECT REC.CNT_ID, REC.RCF_AGE_ID, mob_id AS DD_MOB_ID
                FROM TMP_REC_CONTRATOS_BAJA REC
                WHERE REC.CNT_ID NOT IN (SELECT DISTINCT CNT_ID FROM TMP_REC_CONTRATOS_BAJA_MOT);

                OPERACION_DDL.DDL_TABLE('STATS','TMP_REC_CONTRATOS_BAJA_MOT');

                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    dbms_output.put_line('No se han encontrado datos para el motivo de baja de otros');
            end;
        ]]>
    </entry>


    <!-- Paso 3: PASAJE A PRODUCCIÓN DE TODOS LOS DATOS -->
    <!-- Subpaso 3.0 - Se desactivan todos los esquemas en extinción que no tengan ningún expediente activo  -->
    <entry key="recobro.update.desactivar_esquemas.Oracle10gDialect">
        <![CDATA[
            declare
                v_sql VARCHAR2(2000 CHAR);
                v_codigo_extincion VARCHAR2(5 CHAR);
                v_codigo_desactivado VARCHAR2(5 CHAR);
                v_codigo_expediente_activo VARCHAR2(5 CHAR);
            begin
                v_codigo_extincion:= ${ddEstadoEsquemas.Inactivo.codigo};
                v_codigo_desactivado:= ${ddEstadoEsquemas.Desactivado.codigo};
                v_codigo_expediente_activo:= ${ddEstadoExpedientes.Activo.codigo};
                v_sql:='
                    UPDATE RCF_ESQ_ESQUEMA ESQ SET ESQ.RCF_DD_EES_ID = (SELECT EES1.RCF_DD_EES_ID FROM RCF_DD_EES_ESTADO_ESQUEMA EES1
                    WHERE EES1.RCF_DD_EES_CODIGO = :v_codigo_desactivado),
                    ESQ.RCF_FECHA_DESACT = SYSDATE WHERE ESQ.RCF_ESQ_ID IN (
                    SELECT ESQ1.RCF_ESQ_ID FROM RCF_ESQ_ESQUEMA ESQ1
                    JOIN RCF_DD_EES_ESTADO_ESQUEMA EES ON ESQ1.RCF_DD_EES_ID = EES.RCF_DD_EES_ID
                    WHERE EES.RCF_DD_EES_CODIGO = :v_codigo_extincion AND (SELECT COUNT(DISTINCT EXPE.EXP_ID)
                    FROM BATCH_DATOS_EXP EXPE WHERE EXPE.RCF_ESQ_ID = ESQ1.RCF_ESQ_ID AND EXPE.DD_EEX_CODIGO = :v_codigo_expediente_activo) = 0)
                ';
                execute immediate v_sql using v_codigo_desactivado, v_codigo_extincion, v_codigo_expediente_activo;
            COMMIT;
            end;
        ]]>
    </entry>
    <!-- Subpaso 3.1 - Cancelar los expedientes rotos -->
    <entry key="recobro.update.cancelar_expedientes.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            UPDATE CRC_CICLO_RECOBRO_CNT
                SET CRC_FECHA_BAJA = TRUNC(SYSDATE)
                    , FECHAMODIFICAR = SYSDATE
                    , USUARIOMODIFICAR = '${usuario.crear}'
            WHERE CRC_ID IN (
                SELECT CRC_ID
                FROM CRC_CICLO_RECOBRO_CNT CRC
                    JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID
                    JOIN TMP_REC_EXP_CANCELADOS TMP ON CRE.EXP_ID = TMP.EXP_ID
                WHERE CRC.CRC_FECHA_BAJA IS NULL AND CRC.BORRADO = 0
            );

            UPDATE CRP_CICLO_RECOBRO_PER
                SET CRP_FECHA_BAJA = TRUNC(SYSDATE)
                    , FECHAMODIFICAR = SYSDATE
                    , USUARIOMODIFICAR = '${usuario.crear}'
            WHERE CRP_ID IN (
                SELECT CRP_ID
                FROM CRP_CICLO_RECOBRO_PER CRP
                    JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRP.CRE_ID = CRE.CRE_ID
                    JOIN TMP_REC_EXP_CANCELADOS TMP ON CRE.EXP_ID = TMP.EXP_ID
                WHERE CRP.CRP_FECHA_BAJA IS NULL AND CRP.BORRADO = 0
            );

            UPDATE CRE_CICLO_RECOBRO_EXP
                SET CRE_FECHA_BAJA = TRUNC(SYSDATE)
                    , FECHAMODIFICAR = SYSDATE
                    , USUARIOMODIFICAR = '${usuario.crear}'
            WHERE CRE_ID IN (
                SELECT CRE_ID
                FROM CRE_CICLO_RECOBRO_EXP CRE
                    JOIN TMP_REC_EXP_CANCELADOS TMP ON CRE.EXP_ID = TMP.EXP_ID
                WHERE CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
            );

            UPDATE EXP_EXPEDIENTES
            SET DD_EEX_ID = ${ddEstadoExpedientes.Cancelado.id},
                USUARIOMODIFICAR = '${usuario.crear}',
                FECHAMODIFICAR = SYSDATE
            WHERE EXP_ID IN (SELECT EXP_ID FROM TMP_REC_EXP_CANCELADOS);
        end;
        ]]>
    </entry>
    <!-- Subpaso 3.2 - Actualizar Arq_id en tabla expedientes
    OBSOLETO, EL ARQUETIPO NO SE MANTIENE EN ESE CAMPO
    <entry key="recobro.merge.exp_expendientes_tmp_rec_exp_rearquetipado.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            MERGE INTO EXP_EXPEDIENTES EXP
            USING
                (SELECT EXP_ID, ARQ_ID_NEW
                FROM TMP_REC_EXP_REARQUETIPADO) RA ON (RA.EXP_ID = EXP.EXP_ID)
            WHEN MATCHED THEN UPDATE
                SET EXP.ARQ_ID = ARQ_ID_NEW,
                    USUARIOMODIFICAR = '${usuario.crear}',
                    FECHAMODIFICAR = SYSDATE;
        end;
        ]]>
    </entry>-->
    <!-- Subpaso 3.3 - Insertar los nuevos clientes en CLI_CLIENTES
        ESTE PASO SE OMITE PORQUE EN PRINCIPIO NO ES NECESARIO... AL IGUAL QUE LA CREACIÓN EN CCL_CONTRATOS_CLIENTES...
        SI SE DETECTASE QUE FUESE NECESARIO SE ACTIVARIAN LAS QUERIES CORRESPONDIENTES
    <entry key="recobro.insert.cli_clientes.Oracle10gDialect">
        <![CDATA[
            INSERT INTO CLI_CLIENTES (CLI_ID, PER_ID, ARQ_ID, DD_EST_ID, DD_ECL_ID, CLI_FECHA_EST_ID,
                VERSION, USUARIOCREAR, FECHACREAR, BORRADO, CLI_FECHA_CREACION, CLI_TELECOBRO, OFI_ID )
            SELECT S_CLI_CLIENTES.NEXTVAL AS CLI_ID, TMP.PER_ID, (select arq_id from arq_arquetipos where arq_nombre='Generico') ARQ_ID,
                1 DD_EST_ID, 3 DD_ECL_ID, SYSDATE CLI_FECHA_EST_ID, 0 VERSION, '${usuario.crear}' USUARIOCREAR,
                SYSDATE FECHACREAR, ${borrado.si.id} BORRADO, SYSDATE CLI_FECHA_CREACION, 0 CLI_TELECOBRO, PER.OFI_ID
            FROM TMP_REC_NUEVOS_CLI TMP
                INNER JOIN PER_PERSONAS PER ON TMP.PER_ID = PER.PER_ID
        ]]>
    </entry>
    -->
    <!-- Subpaso 3.4 - Actualizamos arq_id de las personas con contratos libres de la tabla PER_PERSONAS
    OJO: Esto no debe hacerse. El ARQ_ID de la PER_PERSONAS no es el arquetipo de recobro. Éste se persiste en la tabla
    ARP_ARQ_RECOBRO_PERSONA

    <entry key="recobro.merge.per_personas_arq_id.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            MERGE INTO PER_PERSONAS PER
            USING
                (SELECT DISTINCT PER_ID, ARQ_ID
                FROM TMP_REC_CNT_LIBRE_DES_ARQ) RA ON (RA.PER_ID = PER.PER_ID)
            WHEN MATCHED THEN UPDATE
                SET PER.ARQ_ID = RA.ARQ_ID,
                    USUARIOMODIFICAR = '${usuario.crear}',
                    FECHAMODIFICAR = SYSDATE;
        end;
        ]]>
    </entry>-->
    <!-- Subpaso 3.5.1 - Creamos los nuevos expedientes en la tabla EXP_EXPEDIENTES
        ES POSIBLE QUE NECESITEMOS ALGÚN OTRO PASO PARA GENERAR EL REGISTRO ESPECÍFICO DEL EXPEDIENTE DE RECOBRO EN LA TABLA EXP_EXPEDIENTE_RECOBRO
    -->
    <entry key="recobro.insert.exp_expedientes_nuevos.Oracle10gDialect">
        <![CDATA[
        /*
         * CREACIÓN DE EXPEDIENTES NUEVOS
         */
        declare
          /*
           * CONSTANTES
           */
           cUSUARIO_BATCH VARCHAR2(10 CHAR);
           cARQ_GENERICO NUMBER;
           cEEX_ID NUMBER;
           cMASTER_SCHEMA VARCHAR2(10 CHAR);

           /*
            * CURSORES
            */
          CURSOR curEXP_NUEVOS IS SELECT DISTINCT EXP_ID, EXP_DESCRIPCION, OFI_ID, EXP_MANUAL FROM BATCH_DATOS_SALIDA
          WHERE CEX_PASE = 1 AND EXP_ID NOT IN (SELECT EXP_ID FROM EXR_EXPEDIENTE_RECOBRO);
          rEXP curEXP_NUEVOS%ROWTYPE;

          CURSOR curDATOS_CEX (pEXP_ID NUMBER) IS SELECT DISTINCT EXP_ID, CNT_ID, DD_AEX_CODIGO, CEX_PASE FROM BATCH_DATOS_SALIDA WHERE EXP_ID = pEXP_ID;
          rDATOS_CEX curDATOS_CEX%ROWTYPE;

          CURSOR curDATOS_PEX (pEXP_ID NUMBER) IS SELECT DISTINCT EXP_ID, PER_ID, PEX_PASE FROM BATCH_DATOS_SALIDA WHERE EXP_ID = pEXP_ID;
          rDATOS_PEX curDATOS_PEX%ROWTYPE;
          /*
           * VARIABLES
           */
          vCEX_ID NUMBER(16);
          vAEX_ID NUMBER(16);
          vPEX_ID NUMBER(16);
          vDD_TPX_ID NUMBER(16);
          vDD_EST_ID NUMBER(16);
          nCount NUMBER;
        begin

              /*
               * CONSTANTES
               */
              cUSUARIO_BATCH := '${usuario.crear}';
              cARQ_GENERICO := ${id.arquetipo.generico};
              cMASTER_SCHEMA := '${master.schema}';
              cEEX_ID := ${ddEstadoExpedientes.Activo.id};

              /* INICIO BUCLE NUEVOS EXPEDIENTES */
              IF NOT curEXP_NUEVOS%ISOPEN THEN
                  OPEN curEXP_NUEVOS;
              END IF;
              LOOP
                FETCH curEXP_NUEVOS INTO rEXP;
                EXIT WHEN curEXP_NUEVOS%NOTFOUND;

                /* INICIO INSERTAR EXP_EXPEDIENTES */
                SELECT COUNT(*) INTO NCOUNT FROM EXP_EXPEDIENTES WHERE EXP_ID = rEXP.EXP_ID;

                SELECT DD_EST_ID INTO vDD_EST_ID FROM ${master.schema}.DD_EST_ESTADOS_ITINERARIOS WHERE DD_EST_CODIGO = 'VMV';

                IF ncount <= 0 THEN
                  SELECT DD_TPX_ID INTO vDD_TPX_ID FROM DD_TPX_TIPO_EXPEDIENTE WHERE DD_TPX_CODIGO = 'REC';

                  EXECUTE IMMEDIATE 'INSERT INTO EXP_EXPEDIENTES (EXP_ID, EXP_DESCRIPCION, DD_EST_ID, EXP_FECHA_EST_ID, OFI_ID, ARQ_ID, DD_EEX_ID, EXP_MANUAL, DD_TPX_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
                                  VALUES(
                                  :EXP_ID, :EXP_DESCRIPCION, :DD_EST_ID, SYSDATE, :OFI_ID, :ARQ_ID, :EEX_ID , :EXP_MANUAL, :TPX, 0, :USUARIOCREAR, SYSDATE, 0
                                )'
                  USING rEXP.EXP_ID, rEXP.EXP_DESCRIPCION, vDD_EST_ID, rEXP.OFI_ID, cARQ_GENERICO, cEEX_ID, rEXP.EXP_MANUAL, vDD_TPX_ID, cUSUARIO_BATCH;

                  /* INICIO INSERTAR EXR_EXPEDIENTE_RECOBRO */
                  EXECUTE IMMEDIATE 'INSERT INTO EXR_EXPEDIENTE_RECOBRO (EXP_ID) VALUES(:EXP_ID)'
                  USING rEXP.EXP_ID;
                  /* FIN INSERTAR EXR_EXPEDIENTE_RECOBRO */

                END IF;
                /* FIN INSERTAR EXP_EXPEDIENTES */



                /* INICIO BUCLE BATCH_DATOS_SALIDA CEX*/
                IF NOT curDATOS_CEX%ISOPEN THEN
                    OPEN curDATOS_CEX(rEXP.EXP_ID);
                END IF;
                LOOP
                  FETCH curDATOS_CEX INTO rDATOS_CEX;
                  EXIT WHEN curDATOS_CEX%NOTFOUND;

                  /* INICIO INSERTAR CEX */
                  SELECT S_CEX_CONTRATOS_EXPEDIENTE.NEXTVAL INTO vCEX_ID FROM DUAL;

                  EXECUTE IMMEDIATE 'SELECT DD_AEX_ID FROM '||cMASTER_SCHEMA||'.DD_AEX_AMBITOS_EXPEDIENTE WHERE DD_AEX_CODIGO=:AEX_CODIGO'
                  INTO vAEX_ID
                  USING rDATOS_CEX.DD_AEX_CODIGO;

                  EXECUTE IMMEDIATE 'INSERT INTO CEX_CONTRATOS_EXPEDIENTE (CEX_ID, CNT_ID, EXP_ID, DD_AEX_ID, CEX_PASE, VERSION, USUARIOCREAR,FECHACREAR, BORRADO)
                                      VALUES (:CEX_ID, :CNT_ID, :EXP_ID, :AEX_ID, :CEX_PASE, 0, :USUARIOCREAR, SYSDATE, 0)'
                  USING vCEX_ID, rDATOS_CEX.CNT_ID, rDATOS_CEX.EXP_ID, vAEX_ID, rDATOS_CEX.CEX_PASE, cUSUARIO_BATCH;
                  /* FIN INSERTAR CEX */

                END LOOP;
                /* FIN BUCLE BATCH_DATOS_SALIDA CEX*/
                CLOSE curDATOS_CEX;


                /* INICIO BUCLE BATCH_DATOS_SALIDA PEX*/
                IF NOT curDATOS_PEX%ISOPEN THEN
                    OPEN curDATOS_PEX(rEXP.EXP_ID);
                END IF;
                LOOP
                  FETCH curDATOS_PEX INTO rDATOS_PEX;
                  EXIT WHEN curDATOS_PEX%NOTFOUND;

                  /* INICIO INSERTAR PEX */
                  SELECT S_PEX_PERSONAS_EXPEDIENTE.NEXTVAL INTO vPEX_ID FROM DUAL;

                  EXECUTE IMMEDIATE 'INSERT INTO PEX_PERSONAS_EXPEDIENTE (PEX_ID, EXP_ID, PER_ID, DD_AEX_ID, PEX_PASE, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
                                      VALUES
                                      (:PEX_ID, :EXP_ID, :PER_ID, :AEX_ID, :PEX_PASE, 0, :USUARIOCREAR, SYSDATE, 0)'
                  USING vPEX_ID, rDATOS_PEX.EXP_ID, rDATOS_PEX.PER_ID, vAEX_ID, rDATOS_PEX.PEX_PASE, cUSUARIO_BATCH;
                  /* INICIO INSERTAR PEX */

                END LOOP;
                /* FIN BUCLE BATCH_DATOS_SALIDA */
                CLOSE curDATOS_PEX;

              END LOOP;
              /* FIN BUCLE NUEVOS EXPEDIENTES */
              CLOSE curEXP_NUEVOS;

              COMMIT;

              OPERACION_DDL.DDL_TABLE('STATS','EXP_EXPEDIENTES');
              OPERACION_DDL.DDL_TABLE('STATS','EXR_EXPEDIENTE_RECOBRO');
              OPERACION_DDL.DDL_TABLE('STATS','CEX_CONTRATOS_EXPEDIENTE');
              OPERACION_DDL.DDL_TABLE('STATS','PEX_PERSONAS_EXPEDIENTE');
        end;
        ]]>
    </entry>

    <entry key="recobro.insert.ciclos_recobro.Oracle10gDialect">
        <![CDATA[
        /*
         * ABRIR NUEVOS CICLOS DE RECOBRO SI HACE FALTA
         */
        declare

          vDD_TGC_ID NUMBER(16);
          V_TABLE    NUMBER;

        begin

          select DD_TGC_ID into vDD_TGC_ID from RCF_DD_TGC_TIPO_GESTION_CART where DD_TGC_CODIGO = 'GI';

          DELETE FROM TMP_CNT_PER_EXCEPTUADOS;
          COMMIT;

          --** Cogemos, para descartar de la búsqueda:
          --     a.Personas exceptuadas.
          --     b.Contratos exceptuados.
          --     c.Personas con contratos exceptuados que no tengan también contratos no exceptuados.
          --     d.Contratos de personas exceptuadas que no sean también de personas no exceptuadas.
          --
          INSERT INTO TMP_CNT_PER_EXCEPTUADOS
          SELECT /*+ FIRST_ROWS */ exc1.exc_id
               , exc1.per_id as per_id
               , nvl(dcp2.cnt_id,0) as cnt_id
            FROM -- Personas exceptuadas
                 BATCH_DATOS_EXCEPTUADOS  exc1
                 -- Contratos de personas exceptuadas
               , (Select dcp1.per_id, dcp1.cnt_id
                  From BATCH_DATOS_CNT_PER dcp1
                       -- Contratos de personas no exceptuadas
                     , (Select a.cnt_id
                        From BATCH_DATOS_CNT_PER a, BATCH_DATOS_EXCEPTUADOS b
                        Where a.per_id = b.per_id(+) and b.exc_id is null) exc2
                  Where dcp1.cnt_id = exc2.cnt_id(+) and exc2.cnt_id is null ) dcp2
           WHERE exc1.per_id = dcp2.per_id(+)
             AND exc1.per_id is not null
          UNION
          SELECT exc1.exc_id
               , nvl(dcp2.per_id,0) as per_id
               , exc1.cnt_id as cnt_id
            FROM -- Contratos exceptuados
                 BATCH_DATOS_EXCEPTUADOS  exc1
                 -- Personas con contratos exceptuados
               , (Select dcp1.cnt_id, dcp1.per_id
                  From BATCH_DATOS_CNT_PER dcp1
                       -- Personas sin contratos exceptuados
                     , (Select a.per_id
                        From BATCH_DATOS_CNT_PER a, BATCH_DATOS_EXCEPTUADOS b
                        Where a.cnt_id = b.cnt_id(+) and b.exc_id is null) exc2
                  Where dcp1.per_id = exc2.per_id(+) and exc2.per_id is null ) dcp2
           WHERE exc1.cnt_id = dcp2.cnt_id(+)
             AND exc1.cnt_id is not null;

          OPERACION_DDL.DDL_TABLE('STATS','TMP_CNT_PER_EXCEPTUADOS',50);


          INSERT INTO TMP_CICLOS_RECOBRO_PTES
          SELECT EXP_ID, RCF_SCA_ID, RCF_AGE_ID, NCRE, NCRC, NCRP
            FROM (SELECT DISTINCT REP.EXP_ID, REP.RCF_SCA_ID, REP.RCF_AGE_ID
                         -- contamos los ciclos de deuda del expediente creados
                       , COUNT(DISTINCT CRE.CRE_ID) NCRE
                         -- contamos la diferecia entre los contratos y los cilcos de recobro de contratos abiertas
                       , (COUNT(DISTINCT CEX.CNT_ID) - COUNT(DISTINCT CRC.CNT_ID)) NCRC
                         -- contamos la diferencia entre las personas y los ciclos de recobro de personas abiertos
                       , (COUNT(DISTINCT PEX.PER_ID) - COUNT(DISTINCT CRP.PER_ID)) NCRP
                    FROM (-- Repartidas
                          SELECT EXP_ID, RCF_SCA_ID, RCF_AGE_ID FROM TMP_REC_EXP_REPARTO_AGENCIAS
                          UNION
                          SELECT EXP_ID, RCF_SCA_ID, RCF_AGE_ID FROM TMP_REC_EXP_AGE_CNT_EXC TMP
                          GROUP BY EXP_ID, RCF_SCA_ID, RCF_AGE_ID
                         ) REP
                      JOIN EXR_EXPEDIENTE_RECOBRO EXP ON REP.EXP_ID = EXP.EXP_ID
                           -- nos aseguramos que los deben gestionarse
                      JOIN (SELECT DISTINCT EXP_ID
                            FROM (SELECT EXP_ID FROM BATCH_DATOS_EXP
                                  UNION
                                  SELECT EXP_ID FROM BATCH_DATOS_SALIDA
                                 )
                           ) REX ON EXP.EXP_ID = REX.EXP_ID
                      JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON EXP.EXP_ID = CEX.EXP_ID AND CEX.BORRADO = 0
                      -- Controlamos que el contrato no esté exceptuado
                      LEFT JOIN TMP_CNT_PER_EXCEPTUADOS EXCC ON CEX.CNT_ID = EXCC.CNT_ID
                      -- Controlamos que el contrato esté activo y aprovisionado
                      JOIN BATCH_DATOS_CNT CNT ON CEX.CNT_ID = CNT.CNT_ID
                      JOIN PEX_PERSONAS_EXPEDIENTE PEX ON EXP.EXP_ID = PEX.EXP_ID AND PEX.BORRADO = 0
                      -- Controlamos que la persona no esté exceptuada
                      LEFT JOIN TMP_CNT_PER_EXCEPTUADOS EXCP ON PEX.PER_ID = EXCP.PER_ID
                      -- Controlamos que la persona esté activa y aprovisionada
                      JOIN BATCH_DATOS_PER PER ON PEX.PER_ID = PER.PER_ID
                      LEFT JOIN CRE_CICLO_RECOBRO_EXP CRE ON EXP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
                      LEFT JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRE.CRE_ID = CRC.CRE_ID AND CRC.CRC_FECHA_BAJA IS NULL AND CRC.BORRADO = 0
                      LEFT JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND CRP.CRP_FECHA_BAJA IS NULL AND CRP.BORRADO = 0
                   WHERE EXCC.EXC_ID IS NULL
                     AND EXCP.EXC_ID IS NULL
                   GROUP BY REP.EXP_ID, REP.RCF_SCA_ID, REP.RCF_AGE_ID
          ) WHERE
          -- le falte el ciclo del expediente
          NCRE = 0
          -- haya algún contrato sin ciclo
          OR NCRC > 0
          -- haya alguna persona sin ciclo
          OR NCRP > 0;

          EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM ALL_INDEXES WHERE INDEX_NAME=''IDX_TMP_CICLOS_RECOBRO_PTES_1''' INTO V_TABLE;
          IF V_TABLE = 0 THEN
          OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_CICLOS_RECOBRO_PTES_1','TMP_CICLOS_RECOBRO_PTES(EXP_ID)','N');
          END IF;
          EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM ALL_INDEXES WHERE INDEX_NAME=''IDX_TMP_CICLOS_RECOBRO_PTES_2''' INTO V_TABLE;
          IF V_TABLE = 0 THEN
          OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_CICLOS_RECOBRO_PTES_2','TMP_CICLOS_RECOBRO_PTES(NCRE)','N');
          END IF;
          EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM ALL_INDEXES WHERE INDEX_NAME=''IDX_TMP_CICLOS_RECOBRO_PTES_3''' INTO V_TABLE;
          IF V_TABLE = 0 THEN
          OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_CICLOS_RECOBRO_PTES_3','TMP_CICLOS_RECOBRO_PTES(NCRC)','N');
          END IF;
          EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM ALL_INDEXES WHERE INDEX_NAME=''IDX_TMP_CICLOS_RECOBRO_PTES_4''' INTO V_TABLE;
          IF V_TABLE = 0 THEN
          OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_CICLOS_RECOBRO_PTES_4','TMP_CICLOS_RECOBRO_PTES(NCRP)','N');
          END IF;

          OPERACION_DDL.DDL_TABLE('STATS','TMP_CICLOS_RECOBRO_PTES');

          INSERT INTO TMP_CRE_NUEVOS
          SELECT TMP.EXP_ID
               , ESC.RCF_ESQ_ID
               , ESC.RCF_ESC_ID
               , SCA.RCF_SCA_ID
               , SUA.RCF_SUA_ID
               , SUA.RCF_AGE_ID
               , SUM(NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0)) AS CRE_POS_VIVA_NO_VENCIDA
               , SUM(NVL(MOV.MOV_POS_VIVA_VENCIDA,0)) AS CRE_POS_VIVA_VENCIDA
               , SUM(NVL(MOV.MOV_INT_REMUNERATORIOS,0)) AS CRE_INT_ORDIN_DEVEN
               , SUM(NVL(MOV.MOV_INT_MORATORIOS,0)) AS CRE_INT_MORAT_DEVEN
               , SUM(NVL(MOV.MOV_COMISIONES,0)) AS CRE_COMISIONES
               , SUM(NVL(MOV.MOV_GASTOS,0)) AS CRE_GASTOS
               , SUM(NVL(MOV.MOV_IMPUESTOS,0)) AS CRE_IMPUESTOS
            FROM TMP_CICLOS_RECOBRO_PTES TMP
              JOIN RCF_SCA_SUBCARTERA SCA ON TMP.RCF_SCA_ID = SCA.RCF_SCA_ID AND SCA.BORRADO = 0
              JOIN RCF_ESC_ESQUEMA_CARTERAS ESC ON SCA.RCF_ESC_ID = ESC.RCF_ESC_ID AND ESC.BORRADO = 0
              JOIN RCF_SUA_SUBCARTERA_AGENCIAS SUA ON TMP.RCF_AGE_ID = SUA.RCF_AGE_ID AND SCA.RCF_SCA_ID = SUA.RCF_SCA_ID AND SUA.BORRADO = 0
              JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON TMP.EXP_ID = CEX.EXP_ID AND CEX.BORRADO = 0
              JOIN CNT_CONTRATOS CNT ON CEX.CNT_ID = CNT.CNT_ID AND CNT.BORRADO = 0
              JOIN MOV_MOVIMIENTOS MOV ON CNT.CNT_ID = MOV.CNT_ID AND CNT.CNT_FECHA_EXTRACCION = MOV.MOV_FECHA_EXTRACCION
             WHERE TMP.NCRE = 0
             GROUP BY TMP.EXP_ID
                    , ESC.RCF_ESQ_ID
                    , ESC.RCF_ESC_ID
                    , SCA.RCF_SCA_ID
                    , SUA.RCF_SUA_ID
                    , SUA.RCF_AGE_ID;


          INSERT INTO CRE_CICLO_RECOBRO_EXP (CRE_ID, EXP_ID, CRE_FECHA_ALTA, RCF_ESQ_ID, RCF_ESC_ID, RCF_SCA_ID, RCF_SUA_ID, RCF_AGE_ID
                                           , CRE_POS_VIVA_NO_VENCIDA, CRE_POS_VIVA_VENCIDA, CRE_INT_ORDIN_DEVEN, CRE_INT_MORAT_DEVEN
                                           , CRE_COMISIONES, CRE_GASTOS, CRE_IMPUESTOS, DD_TGC_ID, RCF_MFA_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
          SELECT S_CRE_CICLO_RECOBRO_EXP.NEXTVAL
               , TMP.EXP_ID
               , TRUNC(SYSDATE)
               , TMP.RCF_ESQ_ID
               , TMP.RCF_ESC_ID
               , TMP.RCF_SCA_ID
               , TMP.RCF_SUA_ID
               , TMP.RCF_AGE_ID
               , TMP.CRE_POS_VIVA_NO_VENCIDA
               , TMP.CRE_POS_VIVA_VENCIDA
               , TMP.CRE_INT_ORDIN_DEVEN
               , TMP.CRE_INT_MORAT_DEVEN
               , TMP.CRE_COMISIONES
               , TMP.CRE_GASTOS
               , TMP.CRE_IMPUESTOS
               , vDD_TGC_ID
               , SCA.RCF_MFA_ID
               , 0, '${usuario.crear}', SYSDATE,0
            FROM TMP_CRE_NUEVOS TMP
              JOIN RCF_SCA_SUBCARTERA SCA ON TMP.RCF_SCA_ID = SCA.RCF_SCA_ID;

          OPERACION_DDL.DDL_TABLE('STATS','CRE_CICLO_RECOBRO_EXP');

          INSERT INTO TMP_CRC_NUEVOS
          SELECT DISTINCT CEX.CNT_ID
               , CRE.CRE_ID
               , to_number(to_char(TRUNC(sysdate), 'yyyyMMdd') || CEX.CNT_ID) AS CRC_ID_ENVIO
               , TRUNC(SYSDATE) AS CRC_FECHA_ALTA
               , NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0) AS CRC_POS_VIVA_NO_VENCIDA
               , NVL(MOV.MOV_POS_VIVA_VENCIDA,0) AS CRC_POS_VIVA_VENCIDA
               , NVL(MOV.MOV_INT_REMUNERATORIOS,0) AS CRC_INT_ORDIN_DEVEN
               , NVL(MOV.MOV_INT_MORATORIOS,0) AS CRC_INT_MORAT_DEVEN
               , NVL(MOV.MOV_COMISIONES,0) AS CRC_COMISIONES
               , NVL(MOV.MOV_GASTOS,0) AS CRC_GASTOS
               , NVL(MOV.MOV_IMPUESTOS,0) AS CRC_IMPUESTOS
            FROM TMP_CICLOS_RECOBRO_PTES TMP
              JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON TMP.EXP_ID = CEX.EXP_ID AND CEX.BORRADO = 0
              JOIN BATCH_DATOS_CNT CNTB ON CEX.CNT_ID = CNTB.CNT_ID
              -- no estén exceptuados
              LEFT JOIN TMP_CNT_PER_EXCEPTUADOS EXC ON CNTB.CNT_ID = EXC.CNT_ID
                JOIN CRE_CICLO_RECOBRO_EXP CRE ON CEX.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL
                JOIN RCF_ESC_ESQUEMA_CARTERAS ESC ON CRE.RCF_ESC_ID = ESC.RCF_ESC_ID
                JOIN RCF_DD_TGC_TIPO_GESTION_CART TGC ON ESC.DD_TGC_ID = TGC.DD_TGC_ID
                JOIN CNT_CONTRATOS CNT ON CEX.CNT_ID = CNT.CNT_ID
                JOIN MOV_MOVIMIENTOS MOV ON CNT.CNT_ID = MOV.CNT_ID AND CNT.CNT_FECHA_EXTRACCION = MOV.MOV_FECHA_EXTRACCION
                -- cruzamos con los ciclos de contrato para no volver a abirlos
                LEFT JOIN  CRC_CICLO_RECOBRO_CNT OTR ON OTR.BORRADO = 0 AND CRE.CRE_ID = OTR.CRE_ID AND OTR.CNT_ID = CEX.CNT_ID AND OTR.CRC_FECHA_BAJA IS NULL
            WHERE TMP.NCRC > 0
            AND (TGC.DD_TGC_CODIGO = 'GC' OR CNTB.CNT_RIESGO > 0)
            -- comprobamos que no haya ciclos de contrato abiertos
            AND OTR.CRC_ID IS NULL
            -- ni sea contrato exceptuado
            AND EXC.EXC_ID IS NULL;

          INSERT INTO CRC_CICLO_RECOBRO_CNT (CRC_ID, CNT_ID, CRE_ID, CRC_ID_ENVIO, CRC_FECHA_ALTA
                                           , CRC_POS_VIVA_NO_VENCIDA, CRC_POS_VIVA_VENCIDA, CRC_INT_ORDIN_DEVEN, CRC_INT_MORAT_DEVEN, CRC_COMISIONES, CRC_GASTOS, CRC_IMPUESTOS
                                           , VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
          SELECT S_CRC_CICLO_RECOBRO_CNT.NEXTVAL
               , CNT_ID
               , CRE_ID
               , CRC_ID_ENVIO
               , TRUNC(SYSDATE) AS CRC_FECHA_ALTA
               , CRC_POS_VIVA_NO_VENCIDA
               , CRC_POS_VIVA_VENCIDA
               , CRC_INT_ORDIN_DEVEN
               , CRC_INT_MORAT_DEVEN
               , CRC_COMISIONES
               , CRC_GASTOS
               , CRC_IMPUESTOS
               , 0 VERSION, '${usuario.crear}' USUARIOCREAR, SYSDATE FECHACREAR,0 BORRADO
            FROM TMP_CRC_NUEVOS;

          OPERACION_DDL.DDL_TABLE('STATS','CRC_CICLO_RECOBRO_CNT');

          INSERT INTO TMP_CRP_NUEVOS
          SELECT DISTINCT PEX.PER_ID
               , CRE.CRE_ID
               , TRUNC(SYSDATE) AS CRP_FECHA_ALTA
               , PERB.PER_RIESGO_DIRECTO CRP_RIESGO_DIRECTO
               , PERB.PER_RIESGO_INDIRECTO CRP_RIESGO_INDIRECTO
            FROM TMP_CICLOS_RECOBRO_PTES TMP
              JOIN PEX_PERSONAS_EXPEDIENTE PEX ON TMP.EXP_ID = PEX.EXP_ID AND PEX.BORRADO = 0
              JOIN BATCH_DATOS_PER PERB ON PEX.PER_ID = PERB.PER_ID
              LEFT JOIN TMP_CNT_PER_EXCEPTUADOS EXCP ON PEX.PER_ID = EXCP.PER_ID
              JOIN CRE_CICLO_RECOBRO_EXP CRE ON PEX.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL
              JOIN RCF_ESC_ESQUEMA_CARTERAS ESC ON CRE.RCF_ESC_ID = ESC.RCF_ESC_ID
              JOIN RCF_DD_TGC_TIPO_GESTION_CART TGC ON ESC.DD_TGC_ID = TGC.DD_TGC_ID
              JOIN CPE_CONTRATOS_PERSONAS CPE ON PEX.PER_ID = CPE.PER_ID AND CPE.BORRADO = 0
              JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON CPE.CNT_ID = CEX.CNT_ID AND CEX.EXP_ID = PEX.EXP_ID AND CEX.BORRADO = 0
              JOIN BATCH_DATOS_CNT CNTB ON CEX.CNT_ID = CNTB.CNT_ID
              LEFT JOIN TMP_CNT_PER_EXCEPTUADOS EXCC ON CNTB.CNT_ID = EXCC.CNT_ID
              -- cruzamos con los ciclos de la persona para no volver a abrirlos
              LEFT JOIN  CRP_CICLO_RECOBRO_PER OTR ON OTR.BORRADO = 0 AND CRE.CRE_ID = OTR.CRE_ID AND OTR.PER_ID = PEX.PER_ID AND OTR.CRP_FECHA_BAJA IS NULL
           WHERE TMP.NCRP > 0
             AND (TGC.DD_TGC_CODIGO = 'GC' OR CNTB.CNT_RIESGO > 0)
             -- comprobamos exceptuados
             AND EXCC.EXC_ID IS NULL
             AND EXCP.EXC_ID IS NULL
             -- comprobamos que ho haya ciclos de persona abiertos
             AND OTR.PER_ID IS NULL;

          INSERT INTO CRP_CICLO_RECOBRO_PER (CRP_ID, PER_ID, CRE_ID, CRP_FECHA_ALTA, CRP_RIESGO_DIRECTO, CRP_RIESGO_INDIRECTO
                                           , VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
          SELECT S_CRP_CICLO_RECOBRO_PER.NEXTVAL
               , PER_ID
               , CRE_ID
               , CRP_FECHA_ALTA
               , CRP_RIESGO_DIRECTO
               , CRP_RIESGO_INDIRECTO
               , 0 VERSION, '${usuario.crear}' USUARIOCREAR, SYSDATE FECHACREAR,0 BORRADO
            FROM TMP_CRP_NUEVOS;

          OPERACION_DDL.DDL_TABLE('STATS','CRP_CICLO_RECOBRO_PER');

          COMMIT;

        end;
        ]]>
    </entry>

    <entry key="recobro.insert.tmp_gae_gager.Oracle10gDialect">
        <![CDATA[
        BEGIN
            EXECUTE IMMEDIATE '
                INSERT INTO TMP_GAE_GAGER
                (SELECT GAE.EXP_ID FROM GAE_GESTOR_ADD_EXPEDIENTE GAE
                   INNER JOIN GEE_GESTOR_ENTIDAD GEE ON GEE.BORRADO = ${borrado.no.id} AND GAE.GEE_ID = GEE.GEE_ID
                    INNER JOIN ${master.schema}.DD_TGE_TIPO_GESTOR TGE ON TGE.BORRADO = ${borrado.no.id} AND GEE.DD_TGE_ID = TGE.DD_TGE_ID AND TGE.DD_TGE_CODIGO = '${ddTipoGestor.Recobro.codigo}')
            ';
            /*EXECUTE IMMEDIATE 'CREATE INDEX IDX_TMP_GAE_GEE_ID ON TMP_GAE_GAGER(GEE_ID)';*/
            OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_GAE_GEE_ID'); --rebuild
            OPERACION_DDL.DDL_TABLE('STATS','TMP_GAE_GAGER');

        END;

        ]]>
    </entry>

    <entry key="recobro.actualizacion.gestores.Oracle10gDialect">
        <![CDATA[
        declare
            -- Cursor de expedientes sin gestor de recobro en ciclo de recobro
                CURSOR C_EXP_SIN_GESTOR_RECOBRO IS
              SELECT EXP.EXP_ID, AGE.USU_ID, S_GEE_GESTOR_ENTIDAD.NEXTVAL NUEVO_GEE_ID, S_GEH_GESTOR_ENTIDAD_HIST.NEXTVAL  NUEVO_GEH_ID
              FROM EXP_EXPEDIENTES EXP
                INNER JOIN CRE_CICLO_RECOBRO_EXP CRE
                  ON CRE.BORRADO = 0 AND  EXP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL
                INNER JOIN ${master.schema}.DD_EEX_ESTADO_EXPEDIENTE DD
                  ON DD.BORRADO = 0 AND EXP.DD_EEX_ID = DD.DD_EEX_ID AND DD.DD_EEX_CODIGO = '1'
          INNER JOIN RCF_AGE_AGENCIAS AGE ON CRE.RCF_AGE_ID = AGE.RCF_AGE_ID AND AGE.BORRADO = 0
              WHERE EXP.BORRADO = 0 AND EXP.EXP_MANUAL = 0
              -- QUE NO TENGAN UN GAE DE TIPO RECOBRO
              AND EXP.EXP_ID NOT IN (SELECT GEE_ID FROM TMP_GAE_GAGER);

        TYPE T_EXP_SIN_G IS TABLE OF C_EXP_SIN_GESTOR_RECOBRO%ROWTYPE INDEX BY BINARY_INTEGER;
        L_EXP_SIN_G T_EXP_SIN_G;


              -- CURSOR DE EXPEDIENTES QUE TENGAN UN GESTOR DE RECOBRO DISTINTO AL DE LA AGENCIA REPARTIDA
              CURSOR C_EXP_CAMBIAR_USU IS
              SELECT EXP.EXP_ID, GEE.USU_ID, AGE.USU_ID USU_AGE, S_GEE_GESTOR_ENTIDAD.NEXTVAL NUEVO_GEE_ID, S_GEH_GESTOR_ENTIDAD_HIST.NEXTVAL  NUEVO_GEH_ID
              FROM EXP_EXPEDIENTES EXP
                INNER JOIN CRE_CICLO_RECOBRO_EXP CRE
                  ON CRE.BORRADO = 0 AND EXP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL
                INNER JOIN ${master.schema}.DD_EEX_ESTADO_EXPEDIENTE DD
                  ON DD.BORRADO = 0 AND EXP.DD_EEX_ID = DD.DD_EEX_ID AND DD.DD_EEX_CODIGO = '1'
                INNER JOIN GAE_GESTOR_ADD_EXPEDIENTE GAE ON EXP.EXP_ID = GAE.EXP_ID
                  INNER JOIN GEE_GESTOR_ENTIDAD GEE ON GEE.BORRADO = 0 AND GAE.GEE_ID = GEE.GEE_ID
                    INNER JOIN ${master.schema}.DD_TGE_TIPO_GESTOR TGE ON TGE.BORRADO = 0 AND GEE.DD_TGE_ID = TGE.DD_TGE_ID AND TGE.DD_TGE_CODIGO = 'GAGER'
                INNER JOIN RCF_AGE_AGENCIAS AGE ON AGE.BORRADO = 0 AND CRE.RCF_AGE_ID = AGE.RCF_AGE_ID
              WHERE EXP.BORRADO = 0 AND EXP.EXP_MANUAL = 0
              AND GEE.USU_ID <> AGE.USU_ID;

        TYPE T_EXP_CAMB_G IS TABLE OF C_EXP_CAMBIAR_USU%ROWTYPE INDEX BY BINARY_INTEGER;
        L_EXP_CAMB_G T_EXP_CAMB_G;

              V_DD_TGE_ID       NUMBER(16,0);

            BEGIN
              OPEN C_EXP_SIN_GESTOR_RECOBRO;

              -- OBTENEMOS EL ID DE TIPO GERECOBRO
              SELECT TGE.DD_TGE_ID INTO V_DD_TGE_ID FROM ${master.schema}.DD_TGE_TIPO_GESTOR TGE WHERE TGE.BORRADO = 0 AND TGE.DD_TGE_CODIGO = 'GAGER';

              LOOP -- EXPEDIENTES SIN GESTOR
                FETCH C_EXP_SIN_GESTOR_RECOBRO BULK COLLECT INTO L_EXP_SIN_G LIMIT 1000;

                -- INSERTAMOS UN REGISTRO EN GEE_GESTOR_ENTIDAD
                FORALL I IN 1..L_EXP_SIN_G.COUNT
            INSERT INTO GEE_GESTOR_ENTIDAD (GEE_ID, USU_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            VALUES(L_EXP_SIN_G(I).NUEVO_GEE_ID, L_EXP_SIN_G(I).USU_ID, V_DD_TGE_ID, 0, '${usuario.crear}', SYSDATE, 0);

                -- INSERTAMOS UN REGISTRO EN GAE_GESTOR_ADD_EXPEDIENTE
          FORALL I IN 1..L_EXP_SIN_G.COUNT
            INSERT INTO GAE_GESTOR_ADD_EXPEDIENTE (GEE_ID, EXP_ID)
            VALUES (L_EXP_SIN_G(I).NUEVO_GEE_ID, L_EXP_SIN_G(I).EXP_ID);

                -- AHORA INSERTAMOS SUS CORRESPONDIENTES REGISTROS DE HISTORICO
                FORALL I IN 1..L_EXP_SIN_G.COUNT
            INSERT INTO GEH_GESTOR_ENTIDAD_HIST (GEH_ID, USU_ID, DD_TGE_ID, GEH_FECHA_DESDE, GEH_FECHA_HASTA,
                  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            VALUES (L_EXP_SIN_G(I).NUEVO_GEH_ID, L_EXP_SIN_G(I).USU_ID, V_DD_TGE_ID, TRUNC(SYSDATE), NULL,
                  0, '${usuario.crear}', SYSDATE, 0);

          FORALL I IN 1..L_EXP_SIN_G.COUNT
            INSERT INTO GEH_GESTOR_EXPEDIENTE_HIST
              (GEH_ID, EXP_ID) VALUES (L_EXP_SIN_G(I).NUEVO_GEH_ID, L_EXP_SIN_G(I).EXP_ID);

          EXIT WHEN C_EXP_SIN_GESTOR_RECOBRO%NOTFOUND;
              END LOOP; -- LOOP EXP_SIN_GESTOR_RECOBRO
              CLOSE C_EXP_SIN_GESTOR_RECOBRO;

              OPEN C_EXP_CAMBIAR_USU;
              LOOP -- EXPEDIENTES QUE HAY QUE CAMBIAR EL GESTOR DE RECOBRO
                FETCH C_EXP_CAMBIAR_USU BULK COLLECT INTO L_EXP_CAMB_G LIMIT 1000;

                -- CANCELAMOS EL HISTORICO DE GEH_GESTORI_ENTIDAD_HIST
          FORALL I IN 1..L_EXP_CAMB_G.COUNT
            UPDATE GEH_GESTOR_ENTIDAD_HIST
                  SET GEH_FECHA_HASTA = TRUNC(SYSDATE),
              USUARIOMODIFICAR = '${usuario.crear}',
              FECHAMODIFICAR   = SYSDATE
            WHERE
                  GEH_ID IN (SELECT GEH_ID FROM GEH_GESTOR_EXPEDIENTE_HIST WHERE EXP_ID = L_EXP_CAMB_G(I).EXP_ID)
              --AND USU_ID = V_GEE_USU_ID
              AND DD_TGE_ID = V_DD_TGE_ID
              AND GEH_FECHA_HASTA IS NULL
              AND BORRADO = 0;

                -- MARCAMOS COMO BORRADO EL ANTIGUO REGISTRO DE GEE_GESTOR_ENTIDAD
          FORALL I IN 1..L_EXP_CAMB_G.COUNT
            UPDATE GEE_GESTOR_ENTIDAD
              SET BORRADO = 1,
              USUARIOBORRAR = '${usuario.crear}',
              FECHABORRAR = SYSDATE
            WHERE GEE_ID IN (SELECT GEE_ID FROM GAE_GESTOR_ADD_EXPEDIENTE GAE WHERE GAE.EXP_ID = L_EXP_CAMB_G(I).EXP_ID)
                  --AND USU_ID = V_GEE_USU_ID
              AND DD_TGE_ID = V_DD_TGE_ID
              AND BORRADO = 0;

                -- INSERTAMOS UN REGISTRO EN GEE_GESTOR_ENTIDAD
                FORALL I IN 1..L_EXP_CAMB_G.COUNT
            INSERT INTO GEE_GESTOR_ENTIDAD (GEE_ID, USU_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            VALUES(L_EXP_CAMB_G(I).NUEVO_GEE_ID, L_EXP_CAMB_G(I).USU_AGE, V_DD_TGE_ID, 0, '${usuario.crear}', SYSDATE, 0);

                -- INSERTAMOS UN REGISTRO EN GAE_GESTOR_ADD_EXPEDIENTE
          FORALL I IN 1..L_EXP_CAMB_G.COUNT
            INSERT INTO GAE_GESTOR_ADD_EXPEDIENTE (GEE_ID, EXP_ID)
            VALUES (L_EXP_CAMB_G(I).NUEVO_GEE_ID, L_EXP_CAMB_G(I).EXP_ID);

                -- AHORA INSERTAMOS SUS CORRESPONDIENTES REGISTROS DE HISTORICO
                FORALL I IN 1..L_EXP_CAMB_G.COUNT
            INSERT INTO GEH_GESTOR_ENTIDAD_HIST (GEH_ID, USU_ID, DD_TGE_ID, GEH_FECHA_DESDE, GEH_FECHA_HASTA,
                  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
            VALUES (L_EXP_CAMB_G(I).NUEVO_GEH_ID, L_EXP_CAMB_G(I).USU_AGE, V_DD_TGE_ID, TRUNC(SYSDATE), NULL,
                  0, '${usuario.crear}', SYSDATE, 0);

          FORALL I IN 1..L_EXP_CAMB_G.COUNT
            INSERT INTO GEH_GESTOR_EXPEDIENTE_HIST (GEH_ID, EXP_ID)
            VALUES (L_EXP_CAMB_G(I).NUEVO_GEH_ID, L_EXP_CAMB_G(I).EXP_ID);

                -- MARCAMOS COMO BORRADO SU HISTORICO PARA QUE NO APAREZCA EN EL MENU DE FAVORITOS
          FORALL I IN 1..L_EXP_CAMB_G.COUNT
            UPDATE HAC_HISTORICO_ACCESOS SET BORRADO =1, USUARIOBORRAR = 'REC-BATCH', FECHABORRAR = sysdate
                    WHERE EXP_ID = L_EXP_CAMB_G(I).EXP_ID AND USU_ID = L_EXP_CAMB_G(I).USU_ID;

          EXIT WHEN C_EXP_CAMBIAR_USU%NOTFOUND;
              END LOOP; -- LOOP EXP_CAMBIAR_USU

              CLOSE C_EXP_CAMBIAR_USU;
            END;
        ]]>
    </entry>

    <!-- Paso 4: CARGAR DE LAS TABLAS DE EXTRACCIÓN DE FICHEROS -->
    <!-- BORRAMOS LA TABLA REC_FICHERO_CONTRATOS -->
    <entry key="recobro.borrado.rec_fichero_contratos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_CONTRATOS');
            end;

        ]]>
    </entry>

    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_CONTRATO -->
    <entry key="recobro.insert.tmp_sager_info.Oracle10gDialect">
        <![CDATA[
            INSERT INTO TMP_SAGER_INFO
            WITH GAGER AS (
                SELECT DISTINCT GAE.EXP_ID, GEE.USU_ID
                FROM GAE_GESTOR_ADD_EXPEDIENTE GAE
                JOIN GEE_GESTOR_ENTIDAD GEE ON GEE.GEE_ID = GAE.GEE_ID AND GEE.BORRADO = 0
                JOIN ${master.schema}.DD_TGE_TIPO_GESTOR TGE ON TGE.BORRADO = 0 AND TGE.DD_TGE_ID = GEE.DD_TGE_ID AND TGE.DD_TGE_CODIGO = 'GAGER'
            )
            SELECT DISTINCT TMP.EXP_ID
                , SUBSTR(TRIM(REPLACE(USU.USU_NOMBRE||' '||USU.USU_APELLIDO1||' '||USU.USU_APELLIDO2,'  ',' ')),1,255)
                , USU.USU_TELEFONO
                ,USU.USU_MAIL
            FROM TMP_REC_EXP_AGE_CNT_EXC TMP
                LEFT JOIN GAGER ON TMP.EXP_ID = GAGER.EXP_ID
            LEFT JOIN ${master.schema}.USU_USUARIOS USU ON USU.BORRADO = 0 AND USU.USU_ID = GAGER.USU_ID
        ]]>
    </entry>

    <entry key="recobro.idxcreate.tmp_sager_info.Oracle10gDialect">
        <![CDATA[
            BEGIN
                OPERACION_DDL.DDL_INDEX('CREATE','IDX_TMP_SAGER_INFO_1'); --rebuild
                OPERACION_DDL.DDL_TABLE('STATS','TMP_SAGER_INFO');
            END;
        ]]>
    </entry>

    <entry key="recobro.insert.rec_fichero_contratos.Oracle10gDialect">

        <![CDATA[
        declare
        begin
        COMMIT;
        INSERT /*+ APPEND PARALLEL(REC_FICHERO_CONTRATOS, 16) PQ_DISTRIBUTE(REC_FICHERO_CONTRATOS, NONE) */ INTO REC_FICHERO_CONTRATOS
        WITH IFC AS (
            SELECT /*+ MATERIALIZE */ DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'char_extra4' -- BCFI-301
        ),  TMP AS (
            SELECT /*+ MATERIALIZE */ CNT1.CNT_ID, CNT1.BORRADO, CNT1.CNT_FECHA_EXTRACCION, CNT1.OFI_ID_ADMIN, CNT1.DD_EFC_ID,
            CNT1.DD_TPE_ID, CNT1.CNT_SISTEMA_AMORTIZACION, CNT1.DD_GC1_ID, CNT1.DD_GC2_ID, CNT1.DD_FNO_ID, CNT1.DD_CT1_ID,
            CNT1.DD_CT2_ID, CNT1.DD_CT3_ID, CNT1.DD_CT4_ID, CNT1.DD_CT5_ID, CNT1.DD_CT6_ID, CNT1.CNT_COD_ENTIDAD, CNT1.CNT_IBAN,
            CNT1.CNT_CCC_DOMICILIACION, CNT1.CNT_LIMITE_INI, CNT1.CNT_LIMITE_FIN, CNT1.CNT_CUOTA_IMPORTE, CNT1.CNT_CUOTA_PERIODICIDAD,
            CNT1.CNT_FECHA_VENC, CNT1.CNT_TIPO_INTERES, CNT1.CNT_FECHA_CREACION,
            CNT_PRE.TMP_CNT_NUM_EXTRA1, CNT_PRE.TMP_CNT_NUM_EXTRA2, CNT_PRE.TMP_CNT_NUM_EXTRA3,
            CNT_PRE.TMP_CNT_CHAR_EXTRA1, CNT_PRE.TMP_CNT_CHAR_EXTRA2, CNT_PRE.TMP_CNT_CHAR_EXTRA3, CNT_PRE.TMP_CNT_FLAG_EXTRA1, CNT_PRE.TMP_CNT_DATE_EXTRA1,
            TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.GES_ID, CNT1.DD_APO_ID, IAC.IAC_BFA
            FROM (SELECT /*+ MATERIALIZE */ DISTINCT RCF_AGE_ID, RCF_SCA_ID, EXP_ID, CNT_ID, GES_ID FROM TMP_REC_EXP_AGE_CNT_EXC) TMP
            JOIN CNT_CONTRATOS CNT1 ON TMP.CNT_ID = CNT1.CNT_ID AND CNT1.BORRADO = 0
            LEFT JOIN (
              SELECT /*+ MATERIALIZE */ TMP_CNT_NUM_EXTRA1, TMP_CNT_NUM_EXTRA2, TMP_CNT_NUM_EXTRA3,
              TMP_CNT_CHAR_EXTRA1, TMP_CNT_CHAR_EXTRA2, TMP_CNT_CHAR_EXTRA3, TMP_CNT_FLAG_EXTRA1,
              TMP_CNT_DATE_EXTRA1, CNT_CONTRATO FROM CNT_PRECALCULO_PERSISTENCIA CNT_PRE ) CNT_PRE ON CNT1.CNT_CONTRATO = CNT_PRE.CNT_CONTRATO
            LEFT JOIN ( SELECT /*+ MATERIALIZE */ CNT_ID, IAC_VALUE IAC_BFA
                        FROM EXT_IAC_INFO_ADD_CONTRATO
                        WHERE DD_IFC_ID = (SELECT DD_IFC_ID FROM IFC)) IAC ON CNT1.CNT_ID = IAC.CNT_ID -- BCFI-301
        ), CBP AS (
          SELECT /*+ MATERIALIZE */ * FROM RCF_MVL_META_VOLANTE WHERE RCF_DD_MET_ID IN (SELECT RCF_DD_MET_ID FROM RCF_DD_MET_META_VOLANTE WHERE RCF_DD_MET_CODIGO = 'CBP')
        ), CBT AS (
          SELECT /*+ MATERIALIZE */ * FROM RCF_MVL_META_VOLANTE WHERE RCF_DD_MET_ID IN (SELECT RCF_DD_MET_ID FROM RCF_DD_MET_META_VOLANTE WHERE RCF_DD_MET_CODIGO = 'CBT')
        )
        SELECT DISTINCT
            TMP.RCF_AGE_ID
          , TMP.RCF_SCA_ID
          , CRC.CRC_ID_ENVIO AS ID_ENVIO
          , TMP.EXP_ID AS ID_EXPEDIENTE
          , CAR.RCF_CAR_ID AS ID_CARTERA
          , CAR.RCF_CAR_NOMBRE AS CARTERA_EXPEDIENTE
          , TMP.CNT_COD_ENTIDAD AS CODIGO_ENTIDAD
          , LPAD(OFI_AD.OFI_CODIGO_ENTIDAD_OFICINA, 5, '0') COD_ENTIDAD_OFI_ADMIN
          , LPAD(OFI_AD.OFI_CODIGO_OFICINA,4,'0') COD_OFI_ADMIN
          , NVL(TRIM(REPLACE(TVD.DD_TVD_DESCRIPCION||' '||OFI_AD.OFI_DOMICILIO||' '||OFI_AD.OFI_NUM_DOMICILIO||' '||OFI_AD.OFI_CODIGO_POSTAL,'  ',' ')),'DESCONOCIDO') DIR_OFI_ADMIN
          , INFO.CODIGO_PROPIETARIO CODIGO_PROPIETARIO
          , TPE.DD_TPE_CODIGO TIPO_PRODUCTO
          , SUBSTR(INFO.NUMERO_CONTRATO, -32, 17) NUMERO_CONTRATO
          , SUBSTR(INFO.NUMERO_CONTRATO, -15) NUM_ESPEC
          , TMP.CNT_IBAN IBAN_CONTRATO
          , TMP.CNT_CCC_DOMICILIACION CNT_DOMICILIACION
          , TMP.CNT_CCC_DOMICILIACION IBAN_CNT_DOMICILIACION
          , EFC.DD_EFC_CODIGO CD_SITUACION_CONTABLE
          , EFC.DD_EFC_DESCRIPCION SITUACION_CONTABLE
          , NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0) POS_VIVA_NO_VENCIDA
          , NVL(MOV.MOV_POS_VIVA_VENCIDA,0) POS_VIVA_VENCIDA
          , NVL(MOV.MOV_INT_REMUNERATORIOS,0) INT_ORDIN_DEVEN
          , NVL(MOV.MOV_INT_MORATORIOS,0) INT_MORAT_DEVEN
          , NVL(MOV.MOV_COMISIONES,0) COMISIONES
          , NVL(MOV.MOV_GASTOS,0) GASTOS
          , NVL(MOV.MOV_IMPUESTOS,0) IMPUESTOS
          , NVL(MOV.MOV_ENTREGAS_A_CUENTA,0) ENTREGAS
          , NVL(MOV.MOV_INTERESES_ENTREGAS,0) INT_ENTREGAS
          , NVL(MOV.MOV_DEUDA_IRREGULAR,0) DEUDA_IRREGULAR
          , NVL(TMP.CNT_LIMITE_INI,0) LIMITE_INICIAL
          , NVL(TMP.CNT_LIMITE_FIN,0) LIMITE_ACTUAL
          , TRUNC(TMP.CNT_FECHA_CREACION)  FECHA_CREACION
          , TRUNC(MOV.MOV_CNT_FECHA_INI_EPI_IRREG) FECHA_INI_IRREGU
          , CASE WHEN MOV.MOV_FECHA_POS_VENCIDA IS NULL then nvl(TRUNC(MOV.MOV_CNT_FECHA_INI_EPI_IRREG), CRC.CRC_FECHA_ALTA) ELSE TRUNC(MOV.MOV_FECHA_POS_VENCIDA) END FECHA_POS_VENCIDA
          , CT1.DD_CT1_CODIGO CD_PRODUCTO_COMERCIAL
          , CT1.DD_CT1_DESCRIPCION CATALOGO1
          , TPE.DD_TPE_DESCRIPCION CATALOGO2
          , GC1.DD_GCN_CODIGO CD_GARANTIA1
          , GC1.DD_GCN_DESCRIPCION GARANTIA1
          , GC2.DD_GCN_CODIGO CD_GARANTIA2
          , GC2.DD_GCN_DESCRIPCION GARANTIA2
          , SAGER.SAGER_NOM_APE CONTACTO_ENTIDAD_NOMBRE
          , SAGER.SAGER_TELEFONO CONTACTO_ENTIDAD_TEL
          , SAGER.SAGER_EMAIL CONTACTO_ENTIDAD_EMAIL
          , ${ddSituacionGestion.GestVencidos.codigo} SITUACION_GESTION
          , TMP.CNT_CUOTA_IMPORTE CUOTA_IMPORTE
          , TMP.CNT_CUOTA_PERIODICIDAD CUOTA_PERIODICIDAD
          , FNO.DD_FNO_CODIGO CD_FINALIDAD
          , FNO.DD_FNO_DESCRIPCION DESC_OFICIAL_FINALIDAD
          , TRUNC(TMP.CNT_FECHA_VENC) FECHA_VENCIMIENTO
          , SAM.DD_SAM_CODIGO CD_SISTEMA_AMORTIZACION
          , SAM.DD_SAM_DESCRIPCION_LARGA SISTEMA_AMORTIZACION
          , NVL(TMP.CNT_TIPO_INTERES,0) TIPO_INTERES
          , CASE WHEN ITV.RCF_ITV_NO_GEST IS NOT NULL THEN TRUNC(CRE.CRE_FECHA_ALTA + ITV.RCF_ITV_NO_GEST) ELSE NULL END FECHA_PLAZO_MINIMO_GESTION
          , CASE WHEN CBP.RCF_MVL_DIAS_ENT IS NOT NULL THEN TRUNC(CRE.CRE_FECHA_ALTA + CBP.RCF_MVL_DIAS_ENT) ELSE NULL END FECHA_MAX_COBRO_PARCIAL
          , CASE WHEN CBT.RCF_MVL_DIAS_ENT IS NOT NULL THEN TRUNC(CRE.CRE_FECHA_ALTA + CBT.RCF_MVL_DIAS_ENT) ELSE TRUNC(SYSDATE + 60) END FECHA_MAX_REGULARIZACION
          , CASE WHEN TMP.TMP_CNT_DATE_EXTRA1 IS NOT NULL THEN TO_DATE(TMP.TMP_CNT_DATE_EXTRA1 ,'dd/MM/rrrr') ELSE NULL END FECHA_EXTRA1 -- FECHA_TITULIZACION
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra2')),'dd/MM/rrrr') FECHA_EXTRA2
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra3')),'dd/MM/rrrr') FECHA_EXTRA3
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra4')),'dd/MM/rrrr') FECHA_EXTRA4
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra5')),'dd/MM/rrrr') FECHA_EXTRA5
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra6')),'dd/MM/rrrr') FECHA_EXTRA6
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra7')),'dd/MM/rrrr') FECHA_EXTRA7
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra8')),'dd/MM/rrrr') FECHA_EXTRA8
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra9')),'dd/MM/rrrr') FECHA_EXTRA9
          , null -- , TO_DATE((SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'date_extra10')),'dd/MM/rrrr') FECHA_EXTRA10
          , CASE WHEN TMP.TMP_CNT_NUM_EXTRA1 IS NOT NULL THEN TO_NUMBER( REPLACE(TMP.TMP_CNT_NUM_EXTRA1,',','.'),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''') ELSE NULL END NUMERO_EXTRA1 -- NATURALEZA DEL AVAL
          , CASE WHEN TMP.TMP_CNT_NUM_EXTRA2 IS NOT NULL THEN TO_NUMBER( REPLACE(TMP.TMP_CNT_NUM_EXTRA2,',','.'),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''') ELSE NULL END NUMERO_EXTRA2 -- SEGMENTO CARTERA
          , CASE WHEN TMP.TMP_CNT_NUM_EXTRA3 IS NOT NULL THEN TO_NUMBER( REPLACE(TMP.TMP_CNT_NUM_EXTRA3,',','.'),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''') ELSE NULL END NUMERO_EXTRA3 -- IDENTIFICACION DEL ACUERDO DE TITULIZACION
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra4')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA4
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra5')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA5
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra6')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA6
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra7')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA7
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra8')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA8
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra9')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA9
          , null -- , TO_NUMBER((SELECT REPLACE(IAC_VALUE,',','.') FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'num_extra10')),'99999999D999999','NLS_NUMERIC_CHARACTERS = ''.,''')NUMERO_EXTRA10
          , TMP.TMP_CNT_CHAR_EXTRA1 LCHAR_EXTRA1 -- ENTIDAD PROPIETARIA
          , TMP.TMP_CNT_CHAR_EXTRA2 LCHAR_EXTRA2 -- TIPO DE AVAL
          , TMP.TMP_CNT_CHAR_EXTRA3 LCHAR_EXTRA3 -- IDENTIFICACION DEL ACUERDO DE TITULACION
          , APO.DD_APO_DESCRIPCION LCHAR_EXTRA4 -- TIPO DE CONTRATO - APLICATIVO ORIGEN - BCFI-294
          , TMP.IAC_BFA LCHAR_EXTRA5 -- INDICADOR BFA - BCFI-301
          , null -- , (SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'lchar_extra6')) LCHAR_EXTRA6
          , null -- , (SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'lchar_extra7')) LCHAR_EXTRA7
          , null -- , (SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'lchar_extra8')) LCHAR_EXTRA8
          , null -- , (SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'lchar_extra9')) LCHAR_EXTRA9
          , null -- , (SELECT IAC_VALUE FROM EXT_IAC_INFO_ADD_CONTRATO WHERE CNT_ID = TMP.CNT_ID AND DD_IFC_ID = (SELECT DD_IFC_ID FROM EXT_DD_IFC_INFO_CONTRATO WHERE DD_IFC_CODIGO = 'lchar_extra10')) LCHAR_EXTRA10
        FROM TMP
            JOIN CRE_CICLO_RECOBRO_EXP CRE ON TMP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = ${borrado.no.id}
            JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRE.CRE_ID = CRC.CRE_ID AND TMP.CNT_ID = CRC.CNT_ID AND CRC.CRC_FECHA_BAJA IS NULL AND CRC.BORRADO = ${borrado.no.id}
            JOIN RCF_ESC_ESQUEMA_CARTERAS ESC ON CRE.RCF_ESC_ID = ESC.RCF_ESC_ID AND ESC.BORRADO = ${borrado.no.id}
            JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID AND CAR.BORRADO = ${borrado.no.id}
            JOIN RCF_SCA_SUBCARTERA SCA ON CRE.RCF_SCA_ID = SCA.RCF_SCA_ID AND SCA.BORRADO = ${borrado.no.id}
            JOIN RCF_ITV_ITI_METAS_VOLANTES ITV ON SCA.RCF_ITV_ID = ITV.RCF_ITV_ID
            JOIN BATCH_DATOS_CNT_INFO INFO ON TMP.CNT_ID = INFO.CNT_ID
            JOIN MOV_MOVIMIENTOS MOV ON TMP.CNT_ID = MOV.CNT_ID AND TMP.CNT_FECHA_EXTRACCION = MOV.MOV_FECHA_EXTRACCION
            JOIN OFI_OFICINAS OFI_AD ON TMP.OFI_ID_ADMIN = OFI_AD.OFI_ID
            JOIN DD_EFC_ESTADO_FINAN_CNT EFC ON TMP.DD_EFC_ID = EFC.DD_EFC_ID
            JOIN DD_TPE_TIPO_PROD_ENTIDAD TPE ON TMP.DD_TPE_ID = TPE.DD_TPE_ID
            LEFT JOIN DD_SAM_SIST_AMORT_CONTRATO SAM ON SAM.BORRADO = ${borrado.no.id} AND SAM.DD_SAM_ID = TMP.CNT_SISTEMA_AMORTIZACION
            LEFT JOIN DD_TVD_TIPO_VIA_DIRECCION TVD ON TVD.BORRADO = ${borrado.no.id} AND OFI_AD.DD_TIPO_VIA = TVD.DD_TVD_ID
            LEFT JOIN CBP ON ITV.RCF_ITV_ID = CBP.RCF_ITV_ID
            LEFT JOIN CBT ON ITV.RCF_ITV_ID = CBT.RCF_ITV_ID
            LEFT JOIN DD_GCN_GARANTIA_CONTRATO GC1 ON TMP.DD_GC1_ID = GC1.DD_GCN_ID
            LEFT JOIN DD_GCN_GARANTIA_CONTRATO GC2 ON TMP.DD_GC2_ID = GC2.DD_GCN_ID
            LEFT JOIN DD_FNO_FINALIDAD_OFICIAL FNO ON TMP.DD_FNO_ID = FNO.DD_FNO_ID
            LEFT JOIN DD_CT1_CATALOGO_1 CT1 ON TMP.DD_CT1_ID = CT1.DD_CT1_ID
            LEFT JOIN DD_CT2_CATALOGO_2 CT2 ON TMP.DD_CT2_ID = CT2.DD_CT2_ID
            LEFT JOIN DD_CT3_CATALOGO_3 CT3 ON TMP.DD_CT3_ID = CT3.DD_CT3_ID
            LEFT JOIN DD_CT4_CATALOGO_4 CT4 ON TMP.DD_CT4_ID = CT4.DD_CT4_ID
            LEFT JOIN DD_CT5_CATALOGO_5 CT5 ON TMP.DD_CT5_ID = CT5.DD_CT5_ID
            LEFT JOIN DD_CT6_CATALOGO_6 CT6 ON TMP.DD_CT6_ID = CT6.DD_CT6_ID
            LEFT JOIN TMP_SAGER_INFO SAGER ON TMP.EXP_ID = SAGER.EXP_ID
            LEFT JOIN DD_APO_APLICATIVO_ORIGEN APO ON TMP.DD_APO_ID = APO.DD_APO_ID; -- BCFI-294
            COMMIT;
        end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA REC_FICHERO_PERSONAS -->
    <entry key="recobro.borrado.rec_fichero_personas.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_PERSONAS');
            end;
        ]]>
    </entry>

    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_PERSONAS -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_PERSONAS -->
    <entry key="recobro.insert.rec_fichero_personas.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_PERSONAS, 16) PQ_DISTRIBUTE(REC_FICHERO_PERSONAS, NONE) */ INTO REC_FICHERO_PERSONAS
            WITH datos AS
            (SELECT /*+ MATERIALIZE */ tmp.RCF_AGE_ID, DD_PRO_CODIGO, PER.PER_COD_CLIENTE_ENTIDAD, PER.PER_DOC_ID, PER.PER_NOMBRE,
                    PER.PER_APELLIDO1, PER.PER_APELLIDO2, PER.PER_FECHA_CONSTITUCION, PER.PER_FECHA_NACIMIENTO, CIC.DD_CIC_CODIGO, CIC.DD_CIC_DESCRIPCION,
                    PER.PER_SEXO , PER.PER_EMAIL, NVL(PER.PER_PASIVO_VISTA,0) SALDO_PASIVO ,
                    NVL(PER.PER_RIESGO_DISPUESTO,0) RIESGO_DIRECTO_CLIENTE,
                    NVL(PER.PER_RIESGO_IND,0) RIESGO_INDIRECTO_CLIENTE ,
                    NVL(PER.PER_EXTRA_2,0) RIESGO_DIRECTO_IRREGULAR_CLI,
                    0 RIESGO_INDIRECTO_IRREGULAR_CLI,
                    TO_CHAR(NVL(PER.PER_FECHA_DATO,PER.PER_FECHA_EXTRACCION),'ddMMyyyy') ULTIMA_ACTUACION, TMP.GES_ID GESTION_COMPARTIDA ,
                    PER.PER_ID, PER.DD_TPE_ID,  PER.DD_TDI_ID, PER.DD_SCE_ID, PER_PRE.TMP_NUM_EXTRA1, PER_PRE.TMP_NUM_EXTRA2
             FROM TMP_REC_EXP_AGE_MAR_GES TMP
                    JOIN PER_PERSONAS PER
                       ON TMP.PER_ID = PER.PER_ID
                  LEFT JOIN (SELECT /*+ MATERIALIZE */ PER_COD_CLIENTE_ENTIDAD, TMP_NUM_EXTRA1, TMP_NUM_EXTRA2
                    FROM PER_PRECALCULO_PERSISTENCIA )PER_PRE
                    ON PER.PER_COD_CLIENTE_ENTIDAD = PER_PRE.PER_COD_CLIENTE_ENTIDAD
                    LEFT JOIN ${master.schema}.DD_CIC_CODIGO_ISO_CIRBE CIC
                      ON  CIC.BORRADO = 0
                      AND PER.PER_NACIONALIDAD = CIC.DD_CIC_ID
                    JOIN DD_PRO_PROPIETARIOS PRO
                      ON  PER.DD_PRO_ID = PRO.DD_PRO_ID
                    JOIN CRE_CICLO_RECOBRO_EXP CRE
                      ON  TMP.EXP_ID = CRE.EXP_ID
                      AND CRE.CRE_FECHA_BAJA IS NULL
                      AND CRE.BORRADO = 0
                    JOIN CRP_CICLO_RECOBRO_PER CRP
                      ON  CRE.CRE_ID = CRP.CRE_ID
                      AND TMP.PER_ID = CRP.PER_ID
                      AND CRP.CRP_FECHA_BAJA IS NULL
                      AND CRP.BORRADO = 0
            ), selectlist AS
            (SELECT /*+ MATERIALIZE */  SUM(GCL.GCL_RIESGO_DIR_VENCIDO) RIESG_DIRECT_IRREG_GRUPO, SUM(GCL.GCL_RIESGO_INDIR) RIESG_INDIRECT_IRREG_GRUPO
             FROM datos,
                  PER_GCL PERGCL,
                  GCL_GRUPOS_CLIENTES GCL
             where GCL.BORRADO = 0
               AND GCL.GCL_ID = PERGCL.GCL_ID
               AND PERGCL.PER_ID = datos.PER_ID
            )
            SELECT DISTINCT datos.RCF_AGE_ID , datos.DD_PRO_CODIGO CODIGO_PROPIETARIO , datos.PER_COD_CLIENTE_ENTIDAD CODIGO_PERSONA ,
                   TO_NUMBER(TPE.DD_TPE_CODIGO) TIPO_PERSONA , TDI.DD_TDI_CODIGO TIPO_DOCUMENTO , TDI.DD_TDI_DESCRIPCION DS_TIPO_DOCUMENTO ,
                   datos.PER_DOC_ID NIF_CIF_PASAP_NIE , datos.PER_NOMBRE NOMBRE , datos.PER_APELLIDO1 APELLIDO1 , datos.PER_APELLIDO2 APELLIDO2 ,
                   SCE.DD_SCE_CODIGO CD_SEGMENTO_CLIENTE_1 , SCE.DD_SCE_DESCRIPCION SEGMENTO_CLIENTE_1 , datos.PER_FECHA_CONSTITUCION FECHA_CONSTITUCION,
                   datos.PER_FECHA_NACIMIENTO FECHA_NACIMIENTO , datos.DD_CIC_CODIGO CD_NACIONALIDAD , datos.DD_CIC_DESCRIPCION NACIONALIDAD ,
                   datos.PER_SEXO SEXO ,
                   NULL CORREO_ELECTRONICO , -- datos.PER_EMAIL CORREO_ELECTRONICO ,
                   datos.SALDO_PASIVO , datos.RIESGO_DIRECTO_CLIENTE,
                   datos.RIESGO_INDIRECTO_CLIENTE , datos.RIESGO_DIRECTO_IRREGULAR_CLI,
                   datos.RIESGO_INDIRECTO_IRREGULAR_CLI ,
                   NULL RIESG_DIRECT_IRREG_GRUPO,
                   NULL RIESG_INDIRECT_IRREG_GRUPO,
                   datos.ULTIMA_ACTUACION,
                   CASE WHEN datos.GESTION_COMPARTIDA = 0 THEN 'NO' ELSE 'SI' END AS GESTION_COMPARTIDA , -- datos.GESTION_COMPARTIDA,
                   null FECHA_EXTRA1 ,
                   null FECHA_EXTRA2 ,
                   null FECHA_EXTRA3 ,
                   null FECHA_EXTRA4 ,
                   null FECHA_EXTRA5 ,
                   datos.TMP_NUM_EXTRA1 NUMERO_EXTRA1, -- DISPUESTO NO VENCIDO
                   datos.TMP_NUM_EXTRA2 NUMERO_EXTRA2, -- DISPUESTO NO VENCIDO
                   null NUMERO_EXTRA3 ,
                   null NUMERO_EXTRA4 ,
                   null NUMERO_EXTRA5 ,
                   null LCHAR_EXTRA1 ,
                   null LCHAR_EXTRA2 ,
                   null LCHAR_EXTRA3 ,
                   null LCHAR_EXTRA4 ,
                   null LCHAR_EXTRA5
            FROM
              datos,
              selectlist sl2,
              ${master.schema}.DD_TPE_TIPO_PERSONA TPE,
              DD_TDI_TIPO_DOCUMENTO_ID TDI,
              DD_SCE_SEGTO_CLI_ENTIDAD SCE
            where datos.DD_TPE_ID = TPE.DD_TPE_ID
              and datos.DD_TDI_ID = TDI.DD_TDI_ID
              and datos.DD_SCE_ID = SCE.DD_SCE_ID;
            COMMIT;
        end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA REC_FICHERO_CONTRATOS_PERSONAS -->
    <entry key="recobro.borrado.rec_fichero_contratos_personas.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_CONTRATOS_PERSONAS');
            end;
        ]]>
    </entry>
    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_CONTRATOS_PERSONAS -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_CONTRATOS_PERSONAS -->
    <entry key="recobro.insert.rec_fichero_contratos_personas.Oracle10gDialect">
        <![CDATA[
        declare
        begin
         OPERACION_DDL.DDL_INDEX('CREATE','IDX_REC_FIC_CNT_1'); --rebuild
         OPERACION_DDL.DDL_INDEX('CREATE','IDX_REC_FIC_PER_1'); --rebuild
         OPERACION_DDL.DDL_TABLE('STATS','REC_FICHERO_CONTRATOS',1);
         OPERACION_DDL.DDL_TABLE('STATS','REC_FICHERO_PERSONAS',5);
        COMMIT;

        INSERT /*+ APPEND PARALLEL(REC_FICHERO_CONTRATOS_PERSONAS, 16) PQ_DISTRIBUTE(REC_FICHERO_CONTRATOS_PERSONAS, NONE) */ INTO REC_FICHERO_CONTRATOS_PERSONAS
        WITH TMP AS
        (SELECT /*+ MATERIALIZE */ TMP.RCF_AGE_ID, TMP.RCF_SCA_ID, TMP.EXP_ID, TMP.CNT_ID, CRE.CRE_ID, CPE.DD_TIN_ID,
          CRC.CRC_ID_ENVIO, CPE.CPE_ORDEN, PER.PER_COD_CLIENTE_ENTIDAD, REC_CNT.CODIGO_PROPIETARIO, CPE.PER_ID
          FROM TMP_REC_EXP_AGE_CNT_EXC TMP
          JOIN CRE_CICLO_RECOBRO_EXP CRE ON TMP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
          JOIN CRC_CICLO_RECOBRO_CNT CRC ON CRE.CRE_ID = CRC.CRE_ID AND TMP.CNT_ID = CRC.CNT_ID AND CRC.CRC_FECHA_BAJA IS NULL AND CRC.BORRADO = 0
          JOIN REC_FICHERO_CONTRATOS REC_CNT ON CRC.CRC_ID_ENVIO = REC_CNT.ID_ENVIO AND TMP.RCF_AGE_ID = REC_CNT.RCF_AGE_ID
          JOIN CPE_CONTRATOS_PERSONAS CPE ON TMP.CNT_ID = CPE.CNT_ID AND CPE.BORRADO = 0
          -- Descartamos las relaciones con tipos de intervencion no-obligados
          JOIN DD_TIN_TIPO_INTERVENCION TIN ON CPE.DD_TIN_ID = TIN.DD_TIN_ID AND (TIN.DD_TIN_TITULAR = 1 OR TIN.DD_TIN_AVALISTA = 1)
          JOIN PER_PERSONAS PER ON CPE.PER_ID = PER.PER_ID
          JOIN REC_FICHERO_PERSONAS REC_PER ON PER.PER_COD_CLIENTE_ENTIDAD = REC_PER.CODIGO_PERSONA AND TMP.RCF_AGE_ID = REC_PER.RCF_AGE_ID
          -- cex es para validar que el contrto esté en el expediente
          JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON TMP.CNT_ID = CEX.CNT_ID AND TMP.EXP_ID = CEX.EXP_ID AND CEX.BORRADO = 0
          -- pex es para validar que la persona también está asociada al expediente
          JOIN PEX_PERSONAS_EXPEDIENTE PEX ON TMP.PER_ID = PEX.PER_ID AND TMP.EXP_ID = PEX.EXP_ID AND PEX.BORRADO = 0
          JOIN CRP_CICLO_RECOBRO_PER CRP ON PEX.PER_ID = CRP.PER_ID AND CRP.CRE_ID = CRE.CRE_ID AND CRP.CRP_FECHA_BAJA IS NULL AND CRP.BORRADO = 0
        )
        SELECT DISTINCT
              TMP.RCF_AGE_ID
            , TMP.CRC_ID_ENVIO ID_ENVIO
            , TMP.CODIGO_PROPIETARIO
            , TMP.PER_COD_CLIENTE_ENTIDAD CODIGO_PERSONA
            , TIN.DD_TIN_CODIGO CD_TIPO_INTERVENCION
            , TIN.DD_TIN_DESCRIPCION TIPO_INTERVENCION
            , TMP.CPE_ORDEN ORDEN
              , NULL FECHA_EXTRA1
              , NULL FECHA_EXTRA2
              , NULL FECHA_EXTRA3
              , NULL FECHA_EXTRA4
              , NULL FECHA_EXTRA5
              , NULL NUMERO_EXTRA1
              , NULL NUMERO_EXTRA2
            , NULL NUMERO_EXTRA3
            , NULL NUMERO_EXTRA4
            , NULL NUMERO_EXTRA5
              , NULL LCHAR_EXTRA1
              , NULL LCHAR_EXTRA2
              , NULL LCHAR_EXTRA3
              , NULL LCHAR_EXTRA4
              , NULL LCHAR_EXTRA5
        FROM TMP
            LEFT JOIN DD_TIN_TIPO_INTERVENCION TIN ON TMP.DD_TIN_ID = TIN.DD_TIN_ID;
        COMMIT;
        OPERACION_DDL.DDL_TABLE('STATS','REC_FICHERO_CONTRATOS_PERSONAS',5);
        end;
        ]]>
    </entry>

    <entry key="recobro.rec_fichero_contratos_limpiar_sin_relaciones.Oracle10gDialect">
        <![CDATA[
        DECLARE
            /*
          * CONSTANTES
          */
          C_MASTER_SCHEMA VARCHAR2(50 CHAR);

          /* CURSOSRS */
          /*
           * Este cursor sirve para detectar los contratos en REC_FICHERO que no tienen relaciones
           */
         CURSOR C_SIN_REL IS
          SELECT DISTINCT REC.RCF_AGE_ID,REC.ID_ENVIO,CRC.CNT_ID
          FROM REC_FICHERO_CONTRATOS REC
            JOIN CRC_CICLO_RECOBRO_CNT CRC ON REC.ID_ENVIO = CRC.CRC_ID_ENVIO
          WHERE NOT EXISTS
            (SELECT 1
            FROM REC_FICHERO_CONTRATOS_PERSONAS
            WHERE RCF_AGE_ID = REC.RCF_AGE_ID
            AND ID_ENVIO     = REC.ID_ENVIO
            );

          TYPE T_CNT IS TABLE OF C_SIN_REL%ROWTYPE INDEX BY BINARY_INTEGER;
          L_CNT T_CNT;

          /* VARIABLES */
          V_MOB_ID NUMBER(16);
          V_MRE_ID NUMBER(16);
        BEGIN
          /*
          * CONSTANTES
          */
          C_MASTER_SCHEMA := '${master.schema}';

          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_MOB_ID) FROM '||C_MASTER_SCHEMA||'.DD_MOB_MOTIVOS_BAJA WHERE DD_MOB_CODIGO=''OTR'''
            INTO V_MOB_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTVO DE BAJA  CODIGO=OTR');
          END;

          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_MRE_ID) FROM DD_MRE_MOB_RECHAZO_REC_FIC WHERE DD_MRE_CODIGO=''REL'''
            INTO V_MRE_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTVO DE RECHAZO  CODIGO=REL');
          END;

          /* INICIO BUCLE PRINCIPAL */
          OPEN C_SIN_REL;
            FETCH C_SIN_REL BULK COLLECT INTO L_CNT;

            FORALL I IN 1..L_CNT.COUNT
            INSERT INTO REC_FIC_RECHAZOS_CONTRATOS
            SELECT TRUNC(SYSDATE), V_MRE_ID, REC.*
            FROM REC_FICHERO_CONTRATOS REC
            WHERE RCF_AGE_ID = L_CNT(I).RCF_AGE_ID AND ID_ENVIO = L_CNT(I).ID_ENVIO;

            FORALL I IN 1..L_CNT.COUNT
            DELETE FROM REC_FICHERO_CONTRATOS WHERE RCF_AGE_ID = L_CNT(I).RCF_AGE_ID AND ID_ENVIO = L_CNT(I).ID_ENVIO;

            FORALL I IN 1..L_CNT.COUNT
            INSERT INTO TMP_REC_CONTRATOS_BAJA_MOT (RCF_AGE_ID, CNT_ID, DD_MOB_ID)
            VALUES(L_CNT(I).RCF_AGE_ID, L_CNT(I).CNT_ID, V_MOB_ID);

          CLOSE C_SIN_REL;
          /* FIN BUCLE PRINCIPAL */
          COMMIT;
        END;
        ]]>
    </entry>

    <entry key="recobro.rec_fichero_personas_limpiar_sin_relaciones.Oracle10gDialect">
        <![CDATA[
        DECLARE
        /*
          * CONSTANTES
          */
          C_MASTER_SCHEMA VARCHAR2(50 CHAR);

          /* CURSOSRS */
          /*
           * Este cursor sirve para detectar las personas en REC_FICHERO que no tienen relaciones
           */
         CURSOR C_SIN_REL IS
          SELECT DISTINCT REC.RCF_AGE_ID,REC.CODIGO_PERSONA
          FROM REC_FICHERO_PERSONAS REC
          WHERE NOT EXISTS
            (SELECT 1
            FROM REC_FICHERO_CONTRATOS_PERSONAS
            WHERE RCF_AGE_ID = REC.RCF_AGE_ID
            AND CODIGO_PERSONA     = REC.CODIGO_PERSONA
            );

          TYPE T_PER IS TABLE OF C_SIN_REL%ROWTYPE INDEX BY BINARY_INTEGER;
          L_PER T_PER;

          /* VARIABLES */
          V_MRE_ID NUMBER(16);
        BEGIN
          /*
          * CONSTANTES
          */
          C_MASTER_SCHEMA := '${master.schema}';

          BEGIN
            EXECUTE IMMEDIATE 'SELECT MIN(DD_MRE_ID) FROM DD_MRE_MOB_RECHAZO_REC_FIC WHERE DD_MRE_CODIGO=''REL'''
            INTO V_MRE_ID;

            EXCEPTION WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20000,'NO EXISTE EL MOTVO DE RECHAZO  CODIGO=REL');
          END;

          /* INICIO BUCLE PRINCIPAL */
          OPEN C_SIN_REL;
            FETCH C_SIN_REL BULK COLLECT INTO L_PER;

            FORALL I IN 1..L_PER.COUNT
            INSERT INTO REC_FIC_RECHAZOS_PERSONAS
            SELECT TRUNC(SYSDATE), V_MRE_ID, REC.*
            FROM REC_FICHERO_PERSONAS REC
            WHERE RCF_AGE_ID = L_PER(I).RCF_AGE_ID AND CODIGO_PERSONA = L_PER(I).CODIGO_PERSONA;

            FORALL I IN 1..L_PER.COUNT
            DELETE FROM REC_FICHERO_PERSONAS WHERE RCF_AGE_ID = L_PER(I).RCF_AGE_ID AND CODIGO_PERSONA = L_PER(I).CODIGO_PERSONA;

          CLOSE C_SIN_REL;
          /* FIN BUCLE PRINCIPAL */
          COMMIT;
        END;
        ]]>
    </entry>

    <!-- BORRAMOS LA TABLA REC_FICHERO_CONTRATOS_BAJAS -->
    <entry key="recobro.borrado.rec_fichero_contratos_bajas.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_CONTRATOS_BAJAS');
            end;
        ]]>
    </entry>
    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_CONTRATOS_BAJAS -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_CONTRATOS_BAJAS -->
    <entry key="recobro.insert.rec_fichero_contratos_bajas.Oracle10gDialect">
        <![CDATA[
        declare
        begin
        COMMIT;
        INSERT /*+ APPEND PARALLEL(REC_FICHERO_CONTRATOS_BAJAS, 16) PQ_DISTRIBUTE(REC_FICHERO_CONTRATOS_BAJAS, NONE) */ INTO REC_FICHERO_CONTRATOS_BAJAS
        WITH CRC AS (
          SELECT CNT_ID, RCF_AGE_ID, CRC_ID_ENVIO FROM (
            SELECT /*+ PARALLEL */ CRC.CRC_ID_ENVIO, CRC.CNT_ID, CRE.RCF_AGE_ID, ROW_NUMBER() OVER (PARTITION BY CRC.CNT_ID, CRE.RCF_AGE_ID ORDER BY CRC_FECHA_ALTA DESC) N
            FROM CRC_CICLO_RECOBRO_CNT CRC
                JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID
            WHERE EXISTS (SELECT 1 FROM TMP_REC_CONTRATOS_BAJA_MOT B WHERE B.CNT_ID = CRC.CNT_ID AND B.RCF_AGE_ID = CRE.RCF_AGE_ID)
                AND CRC.CRC_ID_ENVIO IS NOT NULL
            ) WHERE N = 1
        )
        SELECT DISTINCT
          TMP.RCF_AGE_ID
            , CRC.CRC_ID_ENVIO ID_ENVIO
            , TRUNC(SYSDATE) FECHA_BAJA
            , MOB.DD_MOB_CODIGO MOTIVO_BAJA
          , NULL FECHA_EXTRA1
          , NULL FECHA_EXTRA2
            , NULL FECHA_EXTRA3
            , NULL FECHA_EXTRA4
            , NULL FECHA_EXTRA5
            , NULL NUMERO_EXTRA1
            , NULL NUMERO_EXTRA2
          , NULL NUMERO_EXTRA3
          , NULL NUMERO_EXTRA4
          , NULL NUMERO_EXTRA5
            , NULL LCHAR_EXTRA1
            , NULL LCHAR_EXTRA2
            , NULL LCHAR_EXTRA3
            , NULL LCHAR_EXTRA4
            , NULL LCHAR_EXTRA5
        FROM TMP_REC_CONTRATOS_BAJA_MOT TMP
          JOIN ${master.schema}.DD_MOB_MOTIVOS_BAJA MOB ON TMP.DD_MOB_ID = MOB.DD_MOB_ID
        JOIN CRC ON TMP.CNT_ID = CRC.CNT_ID AND TMP.RCF_AGE_ID = CRC.RCF_AGE_ID;
        COMMIT;
        end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA REC_FICHERO_PERSONAS_PALANCAS -->
    <entry key="recobro.borrado.rec_fichero_palancas.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_PALANCAS');
            end;
        ]]>
    </entry>
    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_PERSONAS_PALANCAS -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_PERSONAS_PALANCAS -->
    <entry key="recobro.insert.rec_fichero_palancas.Oracle10gDialect">
        <![CDATA[
        declare
        begin
        COMMIT;
        INSERT /*+ APPEND PARALLEL(REC_FICHERO_PALANCAS, 16) PQ_DISTRIBUTE(REC_FICHERO_PALANCAS, NONE) */ INTO REC_FICHERO_PALANCAS
        WITH DATOS AS (
        SELECT /*+ MATERIALIZE */ DISTINCT AGC.RCF_AGE_ID
          , AGP.CODIGO_PROPIETARIO
          , AGP.CODIGO_PERSONA
          , CRE.EXP_ID
          , CRE.RCF_SCA_ID
        FROM REC_FICHERO_CONTRATOS AGC
          JOIN REC_FICHERO_CONTRATOS_PERSONAS AGCP on AGC.ID_ENVIO = AGCP.ID_ENVIO
          JOIN REC_FICHERO_PERSONAS AGP ON AGCP.CODIGO_PERSONA = AGP.CODIGO_PERSONA
          JOIN PER_PERSONAS PER ON AGP.CODIGO_PERSONA = PER.PER_COD_CLIENTE_ENTIDAD
          JOIN CRC_CICLO_RECOBRO_CNT CRC ON AGC.ID_ENVIO = CRC.CRC_ID_ENVIO AND CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
          JOIN CRE_CICLO_RECOBRO_EXP CRE ON CRC.CRE_ID = CRE.CRE_ID AND CRE.BORRADO = 0
          JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND PER.PER_ID = CRP.PER_ID AND CRP.CRP_FECHA_BAJA IS NULL AND CRP.BORRADO = 0
        )
        SELECT DISTINCT DATOS.RCF_AGE_ID
          , DATOS.CODIGO_PROPIETARIO CD_PROPIETARIO
          , DATOS.CODIGO_PERSONA CD_PERSONA
          , DATOS.EXP_ID ID_EXPEDIENTE
          , PAA.RCF_PAA_ID ID_PALANCA_PERMITIDA
          , TPP.RCF_TPP_CODIGO CD_TIPO_PALANCA
          , TPP.RCF_TPP_DESCRIPCION TIPO_PALANCA
          , STP.RCF_STP_CODIGO CD_SUBTIPO_PALANCA
          , STP.RCF_STP_DESCRIPCION SUBTIPO_PALANCA
          , CASE SIN.DD_SIN_CODIGO WHEN '01' THEN 1 ELSE 0 END PALANCA_DELEGADA
          , PAA.RCF_PAA_PRIORIDAD PRIORIDAD_PALANCA
          , NULL DATE_EXTRA1
          , NULL DATE_EXTRA2
          , NULL DATE_EXTRA3
          , NULL DATE_EXTRA4
          , NULL DATE_EXTRA5
          , NULL NUM_EXTRA1
          , NULL NUM_EXTRA2
          , NULL NUM_EXTRA3
          , NULL NUM_EXTRA4
          , NULL NUM_EXTRA5
          , NULL LCHAR_EXTRA1
          , NULL LCHAR_EXTRA2
          , NULL LCHAR_EXTRA3
          , NULL LCHAR_EXTRA4
          , NULL LCHAR_EXTRA5
        FROM DATOS
          --TODO Join con subcartera para obtener la política de acuerdos
          JOIN RCF_SCA_SUBCARTERA SCA ON DATOS.RCF_SCA_ID = SCA.RCF_SCA_ID
          JOIN RCF_POA_POLITICA_ACUERDOS POA ON SCA.RCF_POA_ID = POA.RCF_POA_ID
          JOIN RCF_PAA_POL_ACUERDOS_PALANCAS PAA ON POA.RCF_POA_ID = PAA.RCF_POA_ID
          JOIN RCF_STP_SUBTIPO_PALANCA STP ON PAA.RCF_STP_ID = STP.RCF_STP_ID
          JOIN RCF_TPP_TIPO_PALANCA TPP ON STP.RCF_TPP_ID = TPP.RCF_TPP_ID
          LEFT JOIN ${master.schema}.DD_SIN_SINO SIN ON PAA.DD_SIN_ID = SIN.DD_SIN_ID;
        COMMIT;
        end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA REC_FICHERO_DIRECCIONES -->
    <entry key="recobro.borrado.rec_fichero_direcciones.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_DIRECCIONES');
            end;
        ]]>
    </entry>
    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_DIRECCIONES -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_DIRECCIONES -->
    <entry key="recobro.insert.rec_fichero_direcciones.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_DIRECCIONES, 16) PQ_DISTRIBUTE(REC_FICHERO_DIRECCIONES, NONE) */ INTO REC_FICHERO_DIRECCIONES
            WITH DATOS AS (
            SELECT /*+ MATERIALIZE */ DISTINCT
                TMP.RCF_AGE_ID
                , REC_PER.CODIGO_PROPIETARIO
                , REC_PER.CODIGO_PERSONA
              , PER.PER_ID
            FROM TMP_REC_EXP_AGE_MAR_GES TMP
              JOIN PER_PERSONAS PER ON TMP.PER_ID = PER.PER_ID
              JOIN CRE_CICLO_RECOBRO_EXP CRE ON TMP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = ${borrado.no.id}
              JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND TMP.PER_ID = CRP.PER_ID AND CRP.CRP_FECHA_BAJA IS NULL  AND CRP.BORRADO = ${borrado.no.id}
              JOIN REC_FICHERO_PERSONAS REC_PER ON PER.PER_COD_CLIENTE_ENTIDAD = REC_PER.CODIGO_PERSONA
            ), DATOS_DIR AS (
            SELECT /*+ MATERIALIZE */ DISTINCT
                DATOS.RCF_AGE_ID
                , DATOS.CODIGO_PROPIETARIO
                , DATOS.CODIGO_PERSONA
                , DATOS.PER_ID
                , DIR.DIR_COD_DIRECCION
                , DIR.DIR_DOMICILIO
                , DIR.DIR_DOM_N
                , DIR.DIR_DOM_PORTAL
                , DIR.DIR_DOM_PISO
                , DIR.DIR_DOM_ESC
                , DIR.DIR_DOM_PUERTA
                , DIR.TPD_ID
                , DIR.DD_LOC_ID
                , DIR.DD_TVI_ID
                , DIR.DIR_COD_POST_INTL
            FROM DATOS
              JOIN DIR_PER ON DATOS.PER_ID = DIR_PER.PER_ID AND DIR_PER.BORRADO = ${borrado.no.id}
              JOIN DIR_DIRECCIONES DIR ON DIR_PER.DIR_ID = DIR.DIR_ID AND DIR.BORRADO = ${borrado.no.id}
            )
            SELECT DISTINCT
                DATOS_DIR.RCF_AGE_ID
                , DATOS_DIR.CODIGO_PROPIETARIO
                , DATOS_DIR.CODIGO_PERSONA
                , DATOS_DIR.DIR_COD_DIRECCION CODIGO_DIRECCION
                , CASE WHEN TVI.DD_TVI_CODIGO IS NULL THEN '00' ELSE TVI.DD_TVI_CODIGO END CD_TIPO_VIA
                , CASE WHEN TVI.DD_TVI_DESCRIPCION IS NULL THEN 'UNKNOWN' ELSE TVI.DD_TVI_DESCRIPCION END TIPO_VIA
                , DATOS_DIR.DIR_DOMICILIO NOMBRE_VIA
                , DATOS_DIR.DIR_DOM_N NUM_DOMICILIO
                , DATOS_DIR.DIR_DOM_PORTAL PORTAL
                , DATOS_DIR.DIR_DOM_PISO PISO
                , DATOS_DIR.DIR_DOM_ESC ESCALERA
                , DATOS_DIR.DIR_DOM_PUERTA PUERTA
                , CASE WHEN DATOS_DIR.DIR_COD_POST_INTL IS NULL THEN 'UNKNOWN' ELSE substr(DATOS_DIR.DIR_COD_POST_INTL,greatest(-10, -length(DATOS_DIR.DIR_COD_POST_INTL)), 10) END CODIGO_POSTAL
                , CASE WHEN UPPER(PRV.DD_PRV_CODIGO) IS NULL THEN 'UNKNOWN' ELSE UPPER(PRV.DD_PRV_CODIGO) END CD_PROVINCIA
                , CASE WHEN UPPER(PRV.DD_PRV_DESCRIPCION) IS NULL THEN 'UNKNOWN' ELSE UPPER(PRV.DD_PRV_DESCRIPCION) END PROVINCIA
                , CASE WHEN UPPER(LOC.DD_LOC_CODIGO) IS NULL THEN 'UNKNOWN' ELSE UPPER(LOC.DD_LOC_CODIGO) END CD_POBLACION
                , CASE WHEN UPPER(LOC.DD_LOC_DESCRIPCION) IS NULL THEN 'UNKNOWN' ELSE UPPER(LOC.DD_LOC_DESCRIPCION) END POBLACION
                , CASE WHEN UPPER(LOC.DD_LOC_CODIGO) IS NULL THEN 'UNKNOWN' ELSE UPPER(LOC.DD_LOC_CODIGO) END CD_MUNICIPIO
                , CASE WHEN UPPER(LOC.DD_LOC_DESCRIPCION) IS NULL THEN 'UNKNOWN' ELSE UPPER(LOC.DD_LOC_DESCRIPCION) END MUNICIPIO
                , NULL DIRECCION_PRINCIPAL
                , NULL CD_ESTADO_DIRECCION
                , NULL ESTADO_DIRECCION
                , TPD.TPD_CODIGO CD_TIPO_DIRECCION
                , TPD.TPD_DESCRIPCION TIPO_DIRECCION
                , NULL DIRECCION_BLOQUEADA
                , NULL FECHA_EXTRA1
                , NULL FECHA_EXTRA2
                , NULL FECHA_EXTRA3
                , NULL FECHA_EXTRA4
                , NULL FECHA_EXTRA5
                , NULL NUMERO_EXTRA1
                , NULL NUMERO_EXTRA2
                , NULL NUMERO_EXTRA3
                , NULL NUMERO_EXTRA4
                , NULL NUMERO_EXTRA5
                , NULL LCHAR_EXTRA1
                , NULL LCHAR_EXTRA2
                , NULL LCHAR_EXTRA3
                , NULL LCHAR_EXTRA4
                , NULL LCHAR_EXTRA5
            FROM DATOS_DIR
              LEFT JOIN TPD_TIPO_DIRECCIONES TPD ON TPD.BORRADO = ${borrado.no.id} AND TPD.TPD_ID = DATOS_DIR.TPD_ID
              LEFT JOIN ${master.schema}.DD_LOC_LOCALIDAD LOC ON LOC.DD_LOC_ID = DATOS_DIR.DD_LOC_ID
              LEFT JOIN ${master.schema}.DD_PRV_PROVINCIA PRV ON LOC.DD_PRV_ID = PRV.DD_PRV_ID
              LEFT JOIN ${master.schema}.DD_TVI_TIPO_VIA TVI ON DATOS_DIR.DD_TVI_ID = TVI.DD_TVI_ID;
            COMMIT;
        end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA REC_FICHERO_RECIBOS -->
    <entry key="recobro.borrado.rec_fichero_recibos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_RECIBOS');
            end;
        ]]>
    </entry>
    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_RECIBOS -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_RECIBOS -->
    <entry key="recobro.insert.rec_fichero_recibos.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_RECIBOS, 16) PQ_DISTRIBUTE(REC_FICHERO_RECIBOS, NONE) */ INTO REC_FICHERO_RECIBOS
            WITH DATOS AS (
              SELECT /*+ MATERIALIZE */ DISTINCT
                AG.RCF_AGE_ID
              , REC.REC_ID
              , CRC.CRC_ID_ENVIO
              , REC.REC_CODIGO_RECIBO
              , REC.REC_FECHA_VENCIMIENTO
              , REC.REC_FECHA_FACTURACION
              , REC.REC_TIPO_INTERES
              , REC.REC_IMPORTE_RECIBO
              , REC.REC_IMPORTE_IMPAGADO
              , REC.REC_CAPITAL
              , REC.REC_INTERESES_ORDINAR
              , REC.REC_INTERESES_MORATOR
              , REC.REC_COMISIONES
              , REC.REC_GASTOS_NO_COBRADOS
              , REC.REC_IMPUESTOS
              , REC.REC_DATE_EXTRA1
              , REC.REC_DATE_EXTRA2
              , REC.REC_NUM_EXTRA1
              , REC.REC_NUM_EXTRA2
              , REC.REC_CHAR_EXTRA1
              , REC.REC_CHAR_EXTRA2
              , REC.DD_TRE_ID
              , REC.DD_SIR_ID
              FROM REC_FICHERO_CONTRATOS AG
              JOIN CRC_CICLO_RECOBRO_CNT CRC ON AG.ID_ENVIO = CRC.CRC_ID_ENVIO AND CRC.BORRADO = 0 AND CRC.CRC_FECHA_BAJA IS NULL
              JOIN REC_RECIBOS REC ON CRC.CNT_ID = REC.CNT_ID
              WHERE  REC.BORRADO = 0
            )
            SELECT DISTINCT DATOS.RCF_AGE_ID
              , DATOS.REC_ID ID_RECIBO
              , DATOS.CRC_ID_ENVIO ID_ENVIO
              , DATOS.REC_CODIGO_RECIBO CODIGO_RECIBO
              , DATOS.REC_FECHA_VENCIMIENTO FECHA_VENCIMIENTO
              , DATOS.REC_FECHA_FACTURACION FECHA_FACTURACION
              , TRE.DD_TRE_CODIGO CD_TIPO_DE_RECIBO
              , TRE.DD_TRE_DESCRIPCION TIPO_DE_RECIBO
              , DATOS.REC_TIPO_INTERES TIPO_INTERES
              , SIR.DD_SIR_CODIGO CD_SITUACION_RECIBO
              , SIR.DD_SIR_DESCRIPCION SITUACION_RECIBO
              , DATOS.REC_IMPORTE_RECIBO IMPORTE_RECIBO
              , DATOS.REC_IMPORTE_IMPAGADO IMPORTE_IMPAGADO
              , DATOS.REC_CAPITAL CAPITAL
              , DATOS.REC_INTERESES_ORDINAR INT_ORDIN_DEVEN
              , DATOS.REC_INTERESES_MORATOR INT_MORAT_DEVEN
              , DATOS.REC_COMISIONES COMISIONES
              , DATOS.REC_GASTOS_NO_COBRADOS GASTOS_NO_COBRADOS
              , DATOS.REC_IMPUESTOS
              , DATOS.REC_DATE_EXTRA1 FECHA_EXTRA1
              , DATOS.REC_DATE_EXTRA2 FECHA_EXTRA2
              , NULL FECHA_EXTRA3
              , NULL FECHA_EXTRA4
              , NULL FECHA_EXTRA5
              , DATOS.REC_NUM_EXTRA1 NUM_EXTRA1
              , DATOS.REC_NUM_EXTRA2 NUM_EXTRA2
              , NULL NUM_EXTRA3
              , NULL NUM_EXTRA4
              , NULL NUM_EXTRA5
              , DATOS.REC_CHAR_EXTRA1 LCHAR_EXTRA1
              , DATOS.REC_CHAR_EXTRA2 LCHAR_EXTRA2
              , NULL LCHAR_EXTRA3
              , NULL LCHAR_EXTRA4
              , NULL LCHAR_EXTRA5
            FROM DATOS
              LEFT JOIN DD_TRE_TIPO_RECIBO TRE ON DATOS.DD_TRE_ID = TRE.DD_TRE_ID
              LEFT JOIN DD_SIR_SITUACION_RECIBO SIR ON DATOS.DD_SIR_ID = SIR.DD_SIR_ID;
            COMMIT;
        end;
        ]]>
    </entry>
    <!-- BORRAMOS LA TABLA REC_FICHERO_TELEFONOS -->
    <entry key="recobro.borrado.rec_fichero_telefonos.Oracle10gDialect">
        <![CDATA[
            begin
              OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_TELEFONOS');
            end;
        ]]>
    </entry>
    <!-- CARGAMOS EL REPARTO DE HOY EN LA TABLA REC_FICHERO_TELEFONOS -->
    <!-- OJO!! FALTA RELLENAR EL RESTO DE CAMPOS DE LA TABLA REC_FICHERO_TELEFONOS -->
    <entry key="recobro.insert.rec_fichero_telefonos.Oracle10gDialect">
        <![CDATA[
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_TELEFONOS, 16) PQ_DISTRIBUTE(REC_FICHERO_TELEFONOS, NONE) */ INTO REC_FICHERO_TELEFONOS
            WITH DATOS AS (
              SELECT /*+ MATERIALIZE */
                  TMP.RCF_AGE_ID
                , REC_PER.CODIGO_PROPIETARIO
                , REC_PER.CODIGO_PERSONA
                , TEL.TEL_TELEFONO
                , TEL.TEL_CONSENTIMIENTO
                , TEL.DD_TTE_ID
                , TEL.DD_OTE_ID
              FROM TMP_REC_EXP_AGE_MAR_GES TMP
                JOIN PER_PERSONAS PER ON TMP.PER_ID = PER.PER_ID
                JOIN REC_FICHERO_PERSONAS REC_PER ON PER.PER_COD_CLIENTE_ENTIDAD = REC_PER.CODIGO_PERSONA
                JOIN CRE_CICLO_RECOBRO_EXP CRE ON TMP.EXP_ID = CRE.EXP_ID AND CRE.CRE_FECHA_BAJA IS NULL AND CRE.BORRADO = 0
                JOIN CRP_CICLO_RECOBRO_PER CRP ON CRE.CRE_ID = CRP.CRE_ID AND TMP.PER_ID = CRP.PER_ID AND CRP.CRP_FECHA_BAJA IS NULL  AND CRP.BORRADO = 0
                --JOIN DIR_PER ON PER.PER_ID = DIR_PER.PER_ID AND DIR_PER.BORRADO = 0
                JOIN TEL_PER ON PER.PER_ID = TEL_PER.PER_ID AND TEL_PER.BORRADO = 0
                JOIN TEL_TELEFONOS TEL ON TEL_PER.TEL_ID = TEL.TEL_ID AND TEL.BORRADO = 0
            )
            SELECT DISTINCT
                DATOS.RCF_AGE_ID
                , DATOS.CODIGO_PROPIETARIO
                , DATOS.CODIGO_PERSONA CODIGO_PERSONA
                , DATOS.TEL_TELEFONO TELEFONO
                , TTE.DD_TTE_CODIGO CD_TIPO_TELEFONO
              , TTE.DD_TTE_DESCRIPCION TIPO_TELEFONO
                , CASE DATOS.TEL_CONSENTIMIENTO WHEN 0 THEN 1 ELSE 0 END TELEFONO_BLOQUEADO
                , 0 ULTIMO_CONTACTO
                , OTE.DD_OTE_CODIGO ORIGEN_TELEFONO
                , NULL BBDD_ORIGEN_TELEFONO
                , NULL FECHA_EXP_VIGENCIA_TEL4
                , NULL FECHA_EXTRA1
              , NULL FECHA_EXTRA2
                , NULL FECHA_EXTRA3
                , NULL FECHA_EXTRA4
                , NULL FECHA_EXTRA5
                , NULL NUMERO_EXTRA1
                , NULL NUMERO_EXTRA2
              , NULL NUMERO_EXTRA3
              , NULL NUMERO_EXTRA4
              , NULL NUMERO_EXTRA5
                , NULL LCHAR_EXTRA1
                , NULL LCHAR_EXTRA2
                , NULL LCHAR_EXTRA3
                , NULL LCHAR_EXTRA4
                , NULL LCHAR_EXTRA5
            FROM DATOS
                LEFT JOIN DD_TTE_TIPO_TELEFONO TTE ON DATOS.DD_TTE_ID = TTE.DD_TTE_ID
                LEFT JOIN DD_OTE_ORIGEN_TELEFONO OTE ON DATOS.DD_OTE_ID = OTE.DD_OTE_ID;
            COMMIT;
        end;
        ]]>
    </entry>

    <entry key="recobro.borrado.rec_fichero_efectos.Oracle10gDialect">
        begin
         OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_EFECTOS');
        end;
    </entry>

    <entry key="recobro.insert.rec_fichero_efectos.Oracle10gDialect">
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_EFECTOS, 16) PQ_DISTRIBUTE(REC_FICHERO_EFECTOS, NONE) */ INTO REC_FICHERO_EFECTOS
            WITH CRC AS (SELECT /*+ MATERIALIZE */ CRC_ID_ENVIO, CNT_ID FROM CRC_CICLO_RECOBRO_CNT WHERE BORRADO = 0 AND CRC_FECHA_BAJA IS NULL),
            EFC AS (SELECT /*+ MATERIALIZE */ CNT_ID, EFC_ID,EFC_CODIGO_EFECTO, EFC_CODIGO_LINEA, EFC_CODIGO_ACUERDO, EFC_IMPORTE_EFECTO, EFC_CAPITAL, EFC_INT_ORDIN_DEVEN, EFC_INT_ORDIN_MORAT,
                      EFC_COMISIONES, EFC_GASTOS_NO_COBRADOS, EFC_IMPUESTOS, EFC_FECHA_DESCUENTO, EFC_FECHA_VENCIMIENTO, EFC_CHAR_EXTRA1, EFC_CHAR_EXTRA2, EFC_FLAG_EXTRA1,
                      EFC_FLAG_EXTRA2, EFC_DATE_EXTRA1, EFC_DATE_EXTRA2, EFC_NUM_EXTRA1, EFC_NUM_EXTRA2, DD_TEF_ID, DD_MON_ID, DD_SEF_ID, DD_TFV_ID
                    FROM EFC_EFECTOS_CNT WHERE BORRADO = 0),
            TEF AS (SELECT /*+ MATERIALIZE */ DD_TEF_ID, DD_TEF_CODIGO, DD_TEF_DESCRIPCION FROM DD_TEF_TIPO_EFECTO),
            MON AS (SELECT /*+ MATERIALIZE */ DD_MON_ID, DD_MON_CODIGO, DD_MON_DESCRIPCION FROM DD_MON_MONEDAS),
            SEF AS (SELECT /*+ MATERIALIZE */ DD_SEF_ID, DD_SEF_CODIGO, DD_SEF_DESCRIPCION FROM DD_SEF_SITUACION_EFECTO),
            TFV AS (SELECT /*+ MATERIALIZE */ DD_TFV_ID, DD_TFV_CODIGO, DD_TFV_DESCRIPCION FROM DD_TFV_TIPO_FECHA_VENC)
            SELECT /*+ MATERIALIZE */ DISTINCT AG.RCF_AGE_ID
              , CRC.CRC_ID_ENVIO ID_ENVIO
              , EFC.EFC_CODIGO_EFECTO ID_EFECTO
              , EFC.EFC_CODIGO_LINEA CODIGO_LINEA
              , EFC.EFC_CODIGO_ACUERDO CODIGO_ACUERDO
              , TEF.DD_TEF_CODIGO CD_TIPO_EFECTO
              , TEF.DD_TEF_DESCRIPCION TIPO_EFECTO
              , SEF.DD_SEF_CODIGO CD_SITUACION_EFECTO
              , SEF.DD_SEF_DESCRIPCION SITUACION_EFECTO
              , MON.DD_MON_CODIGO CD_MONEDA_EFECTO
              , MON.DD_MON_DESCRIPCION MONEDA_EFECTO
              , EFC.EFC_IMPORTE_EFECTO IMPORTE_EFECTO
              , EFC.EFC_CAPITAL CAPITAL
              , EFC.EFC_INT_ORDIN_DEVEN INT_ORDIN_DEVEN_HASTA_DIA
              , EFC.EFC_INT_ORDIN_MORAT INT_MORAT_DEVEN_HASTA_DIA
              , EFC.EFC_COMISIONES COMISIONES
              , EFC.EFC_GASTOS_NO_COBRADOS GASTOS_INCURRIDOS_NO_COBRADOS
              , EFC.EFC_IMPUESTOS IMPUESTOS
              , EFC.EFC_FECHA_DESCUENTO FECHA_DESCUENTO_EFECTO
              , TFV.DD_TFV_CODIGO CD_TIPO_FECHA_VENCIMIENTO
              , TFV.DD_TFV_DESCRIPCION TIPO_FECHA_VENCIMIENTO
              , EFC.EFC_FECHA_VENCIMIENTO FECHA_VENCIMIENTO_EFECTO
              , EFC.EFC_CHAR_EXTRA1 CHAR_EXTRA1
              , EFC.EFC_CHAR_EXTRA2 CHAR_EXTRA2
              , EFC.EFC_FLAG_EXTRA1 FLAG_EXTRA1
              , EFC.EFC_FLAG_EXTRA2 FLAG_EXTRA2
              , EFC.EFC_DATE_EXTRA1 DATE_EXTRA1
              , EFC.EFC_DATE_EXTRA2 DATE_EXTRA2
              , EFC.EFC_NUM_EXTRA1 NUM_EXTRA1
              , EFC.EFC_NUM_EXTRA2 NUM_EXTRA2
            FROM REC_FICHERO_CONTRATOS AG
              JOIN CRC ON AG.ID_ENVIO = CRC.CRC_ID_ENVIO
              JOIN EFC ON CRC.CNT_ID = EFC.CNT_ID
              JOIN TEF ON EFC.DD_TEF_ID = TEF.DD_TEF_ID
              JOIN MON ON EFC.DD_MON_ID = MON.DD_MON_ID
              LEFT JOIN SEF ON EFC.DD_SEF_ID = SEF.DD_SEF_ID
              LEFT JOIN TFV ON EFC.DD_TFV_ID = TFV.DD_TFV_ID;
            COMMIT;
            OPERACION_DDL.DDL_TABLE('STATS','REC_FICHERO_EFECTOS');
        END;
    </entry>

    <entry key="recobro.borrado.rec_fichero_efectos_personas.Oracle10gDialect">
        begin
         OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_EFECTOS_PERSONAS');
        end;
    </entry>

    <entry key="recobro.insert.rec_fichero_efectos_personas.Oracle10gDialect">
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_EFECTOS_PERSONAS, 16) PQ_DISTRIBUTE(REC_FICHERO_EFECTOS_PERSONAS, NONE) */ INTO REC_FICHERO_EFECTOS_PERSONAS
            WITH EFP AS (SELECT /*+ MATERIALIZE */ EFC_ID, DD_TPE_ID, DD_TDI_ID, DD_TIE_ID, EFP_NIF_CIF, EFP_NOMBRE, EFP_APELLIDO1, EFP_APELLIDO2,
                    EFP_CHAR_EXTRA1, EFP_CHAR_EXTRA2, EFP_FLAG_EXTRA1, EFP_FLAG_EXTRA2, EFP_DATE_EXTRA1, EFP_DATE_EXTRA2,
                    EFP_NUM_EXTRA1, EFP_NUM_EXTRA2 FROM EFP_EFECTOS_PER WHERE BORRADO = 0),
                TPE AS (SELECT /*+ MATERIALIZE */ DD_TPE_ID, DD_TPE_CODIGO FROM ${master.schema}.DD_TPE_TIPO_PERSONA),
                TDI AS (SELECT /*+ MATERIALIZE */ DD_TDI_ID, DD_TDI_CODIGO, DD_TDI_DESCRIPCION FROM DD_TDI_TIPO_DOCUMENTO_ID),
                TIE AS (SELECT /*+ MATERIALIZE */ DD_TIE_ID, DD_TIE_CODIGO, DD_TIE_DESCRIPCION FROM DD_TIE_TIPO_INTERV_EFECTO),
                EFC AS (SELECT /*+ MATERIALIZE */ EFC_ID, EFC_CODIGO_EFECTO FROM EFC_EFECTOS_CNT)
            SELECT /*+ MATERIALIZE */ DISTINCT AG.RCF_AGE_ID
              , AG.ID_EFECTO ID_EFECTO
              , TO_NUMBER(TPE.DD_TPE_CODIGO) TIPO_PERSONA
              , TDI.DD_TDI_CODIGO TIPO_DOCUMENTO
              , TDI.DD_TDI_DESCRIPCION DS_TIPO_DOCUMENTO
              , CASE WHEN EFP.EFP_NIF_CIF IS NULL THEN 'UNKNOWN' ELSE EFP.EFP_NIF_CIF END NIF_CIF_PASAP_NIE
              , EFP.EFP_NOMBRE NOMBRE
              , EFP.EFP_APELLIDO1 APELLIDO1
              , EFP.EFP_APELLIDO2 APELLIDO2
              , TIE.DD_TIE_CODIGO CD_TIPO_DE_RELACION
              , TIE.DD_TIE_DESCRIPCION TIPO_DE_RELACION
              , EFP.EFP_CHAR_EXTRA1 CHAR_EXTRA1
              , EFP.EFP_CHAR_EXTRA2 CHAR_EXTRA2
              , EFP.EFP_FLAG_EXTRA1 FLAG_EXTRA1
              , EFP.EFP_FLAG_EXTRA2 FLAG_EXTRA2
              , EFP.EFP_DATE_EXTRA1 DATE_EXTRA1
              , EFP.EFP_DATE_EXTRA2 DATE_EXTRA2
              , EFP.EFP_NUM_EXTRA1 NUM_EXTRA1
              , EFP.EFP_NUM_EXTRA2 NUM_EXTRA2
            FROM REC_FICHERO_EFECTOS AG
              JOIN EFC ON AG.ID_EFECTO = EFC.EFC_CODIGO_EFECTO
              JOIN EFP ON EFC.EFC_ID = EFP.EFC_ID
              JOIN TPE ON EFP.DD_TPE_ID = TPE.DD_TPE_ID
              JOIN TDI ON EFP.DD_TDI_ID = TDI.DD_TDI_ID
              JOIN TIE ON EFP.DD_TIE_ID = TIE.DD_TIE_ID;
            COMMIT;
        END;
    </entry>

    <entry key="recobro.borrado.rec_fichero_disposiciones.Oracle10gDialect">
        begin
         OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_DISPOSICIONES');
        end;
    </entry>

    <entry key="recobro.insert.rec_fichero_disposiciones.Oracle10gDialect">
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_DISPOSICIONES, 16) PQ_DISTRIBUTE(REC_FICHERO_DISPOSICIONES, NONE) */ INTO REC_FICHERO_DISPOSICIONES
            WITH CRC AS (SELECT /*+ MATERIALIZE */ CRC_ID_ENVIO, CNT_ID FROM CRC_CICLO_RECOBRO_CNT WHERE BORRADO = 0 AND CRC_FECHA_BAJA IS NULL),
            DSP AS (SELECT /*+ MATERIALIZE */ CNT_ID, DD_DTI_ID, DD_DSI_ID, DD_DST_ID, DD_MON_ID, DSP_CODIGO_DISPOSICION, DSP_IMPORTE_DISPOSICION, DSP_CAPITAL, DSP_INT_ORDIN_DEVEN, DSP_INT_ORDIN_MORAT,
                      DSP_COMISIONES, DSP_GASTOS_NO_COBRADOS, DSP_IMPUESTOS, DSP_FECHA_VENCIMIENTO, DSP_CHAR_EXTRA1, DSP_CHAR_EXTRA2, DSP_FLAG_EXTRA1, DSP_FLAG_EXTRA2,
                      DSP_DATE_EXTRA1, DSP_DATE_EXTRA2, DSP_NUM_EXTRA1, DSP_NUM_EXTRA2 FROM DSP_DISPOSICIONES WHERE BORRADO=0),
            DTI AS (SELECT /*+ MATERIALIZE */ DD_DTI_ID, DD_DTI_CODIGO, DD_DTI_DESCRIPCION FROM DD_DTI_TIPO_DISPOSICION),
            DSI AS (SELECT /*+ MATERIALIZE */ DD_DSI_ID, DD_DSI_CODIGO, DD_DSI_DESCRIPCION FROM DD_DSI_SITUACION_DISPOSICION),
            MON AS (SELECT /*+ MATERIALIZE */ DD_MON_ID, DD_MON_CODIGO, DD_MON_DESCRIPCION FROM DD_MON_MONEDAS),
            DST AS (SELECT /*+ MATERIALIZE */ DD_DST_ID, DD_DST_CODIGO, DD_DST_DESCRIPCION FROM DD_DST_SUBTIPO_DISPOSICION)
            SELECT /*+ MATERIALIZE */ DISTINCT AG.RCF_AGE_ID
              , CRC.CRC_ID_ENVIO ID_ENVIO
              , DSP.DSP_CODIGO_DISPOSICION CODIGO_DISPOSICION
              , DTI.DD_DTI_CODIGO CD_TIPO_DISPOSICION
              , DTI.DD_DTI_DESCRIPCION TIPO_DISPOISICION
              , DST.DD_DST_CODIGO CD_SUBTIPO_DISPOSICION
              , DST.DD_DST_DESCRIPCION SUBTIPO_DISPOSICION
              , DSI.DD_DSI_CODIGO CD_SITUACION_DISPOSICION
              , DSI.DD_DSI_DESCRIPCION SITUACION_DISPOSICION
              , MON.DD_MON_CODIGO CD_MONEDA_DISPOSICION
              , MON.DD_MON_DESCRIPCION MONEDA_DISPOSICION
              , DSP.DSP_IMPORTE_DISPOSICION IMPORTE_DISPOSICION
              , DSP.DSP_CAPITAL CAPITAL
              , DSP.DSP_INT_ORDIN_DEVEN INT_ORDIN_EVEN
              , DSP.DSP_INT_ORDIN_MORAT INT_MORAT_DEVN
              , DSP.DSP_COMISIONES COMISIONES
              , DSP.DSP_GASTOS_NO_COBRADOS GASTOS_INCURRIDOS_NO_COBRADOS
              , DSP.DSP_IMPUESTOS IMPUESTOS
              , DSP.DSP_FECHA_VENCIMIENTO FECHA_VENCIMIENTO_DISPOSICION
              , DSP.DSP_CHAR_EXTRA1 CHAR_EXTRA1
              , DSP.DSP_CHAR_EXTRA2 CHAR_EXTRA2
              , DSP.DSP_FLAG_EXTRA1 FLAG_EXTRA1
              , DSP.DSP_FLAG_EXTRA2 FLAG_EXTRA2
              , DSP.DSP_DATE_EXTRA1 DATE_EXTRA1
              , DSP.DSP_DATE_EXTRA2 DATE_EXTRA2
              , DSP.DSP_NUM_EXTRA1 NUM_EXTRA1
              , DSP.DSP_NUM_EXTRA2 NUM_EXTRA2
            FROM REC_FICHERO_CONTRATOS AG
              JOIN CRC ON AG.ID_ENVIO = CRC.CRC_ID_ENVIO
              JOIN DSP ON CRC.CNT_ID = DSP.CNT_ID
              JOIN DTI ON DSP.DD_DTI_ID = DTI.DD_DTI_ID
              JOIN DSI ON DSP.DD_DSI_ID = DSI.DD_DSI_ID
              JOIN MON ON DSP.DD_MON_ID = MON.DD_MON_ID
              LEFT JOIN DST ON DSP.DD_DST_ID = DST.DD_DST_ID;
            COMMIT;
        END;
    </entry>

    <entry key="recobro.borrado.rec_fichero_adecuaciones.Oracle10gDialect">
        begin
         OPERACION_DDL.DDL_TABLE('TRUNCATE','REC_FICHERO_ADECUACIONES');
        end;
    </entry>

    <entry key="recobro.insert.rec_fichero_adecuaciones.Oracle10gDialect">
        declare
        begin
            COMMIT;
            INSERT /*+ APPEND PARALLEL(REC_FICHERO_ADECUACIONES, 16) PQ_DISTRIBUTE(REC_FICHERO_ADECUACIONES, NONE) */ INTO REC_FICHERO_ADECUACIONES
            WITH CRC AS (SELECT /*+ MATERIALIZE */ CRC_ID_ENVIO, CNT_ID FROM CRC_CICLO_RECOBRO_CNT WHERE BORRADO = 0 AND CRC_FECHA_BAJA IS NULL),
            ADC AS (SELECT /*+ MATERIALIZE */ CNT_ID, DD_CODIGO_RECOMENDACION, ADC_IMPORTE_FINANCIAR, ADC_GASTOS_INCLUIDOS, ADC_TIPO,
                      ADC_DIFERENCIAL, ADC_PLAZO, ADC_CUOTA, ADC_CUOTA_TRAS_CARENCIA, ADC_SISTEMA_AMORTIZACION, ADC_RAZON_PROGRESION,
                      ADC_PERIODICIDAD_RECIBOS, ADC_PERIODICIDAD_TIPO, ADC_PROXIMA_REVISION, ADC_REVISION_CUOTA, ADC_LCHAR_EXTRA,
                      ADC_CHAR_EXTRA1, ADC_CHAR_EXTRA2, ADC_CHAR_EXTRA3, ADC_CHAR_EXTRA4, ADC_CHAR_EXTRA5,
                      ADC_FLAG_EXTRA1, ADC_FLAG_EXTRA2, ADC_FLAG_EXTRA3, ADC_FLAG_EXTRA4, ADC_FLAG_EXTRA5, ADC_FLAG_EXTRA6, ADC_FLAG_EXTRA7,
                      ADC_FLAG_EXTRA8, ADC_FLAG_EXTRA9, ADC_FLAG_EXTRA10, ADC_DATE_EXTRA1, ADC_DATE_EXTRA2, ADC_DATE_EXTRA3, ADC_DATE_EXTRA4,
                      ADC_DATE_EXTRA5, ADC_DATE_EXTRA6, ADC_DATE_EXTRA7, ADC_DATE_EXTRA8, ADC_DATE_EXTRA9, ADC_DATE_EXTRA10,
                      ADC_NUM_EXTRA1, ADC_NUM_EXTRA2, ADC_NUM_EXTRA3, ADC_NUM_EXTRA4, ADC_NUM_EXTRA5, ADC_NUM_EXTRA6, ADC_NUM_EXTRA7,
                      ADC_NUM_EXTRA8, ADC_NUM_EXTRA9, ADC_NUM_EXTRA10
                    FROM ADC_ADECUACIONES_CNT WHERE BORRADO=0)
            SELECT /*+ MATERIALIZE */ DISTINCT AGC.RCF_AGE_ID
              , CRC.CRC_ID_ENVIO ID_ENVIO
              , ADC.DD_CODIGO_RECOMENDACION COD_RECOMENDACION
              , ADC.ADC_IMPORTE_FINANCIAR ADE_IMPORTE_FINANCIAR
              , ADC.ADC_GASTOS_INCLUIDOS ADE_GASTOS_INCLUIDOS
              , ADC.ADC_TIPO ADE_TIPO
              , ADC.ADC_DIFERENCIAL ADE_DIFERENCIAL
              , ADC.ADC_PLAZO ADE_PLAZO
              , ADC.ADC_CUOTA ADE_CUOTA
              , ADC.ADC_CUOTA_TRAS_CARENCIA ADE_CUOTA_TRAS_CARENCIA
              , ADC.ADC_SISTEMA_AMORTIZACION ADE_SISTEMA_AMORTIZACION
              , ADC.ADC_RAZON_PROGRESION ADE_RAZON_PROGRESION
              , ADC.ADC_PERIODICIDAD_RECIBOS ADE_PERIODICIDAD_RECIBOS
              , ADC.ADC_PERIODICIDAD_TIPO ADE_PERIODICIDAD_REVISION_TIPO
              , ADC.ADC_PROXIMA_REVISION ADE_PROXIMA_REVISION_TIPO
              , ADC.ADC_REVISION_CUOTA ADE_REVISION_CUOTA
              , ADC.ADC_LCHAR_EXTRA LCHAR_EXTRA1
              , NULL LCHAR_EXTRA2
              , NULL LCHAR_EXTRA3
              , NULL LCHAR_EXTRA4
              , NULL LCHAR_EXTRA5
              , NULL LCHAR_EXTRA6
              , NULL LCHAR_EXTRA7
              , NULL LCHAR_EXTRA8
              , NULL LCHAR_EXTRA9
              , NULL LCHAR_EXTRA10
              , ADC.ADC_CHAR_EXTRA1
              , ADC.ADC_CHAR_EXTRA2
              , ADC.ADC_CHAR_EXTRA3
              , ADC.ADC_CHAR_EXTRA4
              , ADC.ADC_CHAR_EXTRA5
              , NULL CHAR_EXTRA6
              , NULL CHAR_EXTRA7
              , NULL CHAR_EXTRA8
              , NULL CHAR_EXTRA9
              , NULL CHAR_EXTRA10
              , ADC.ADC_FLAG_EXTRA1
              , ADC.ADC_FLAG_EXTRA2
              , ADC.ADC_FLAG_EXTRA3
              , ADC.ADC_FLAG_EXTRA4
              , ADC.ADC_FLAG_EXTRA5
              , ADC.ADC_FLAG_EXTRA6
              , ADC.ADC_FLAG_EXTRA7
              , ADC.ADC_FLAG_EXTRA8
              , ADC.ADC_FLAG_EXTRA9
              , ADC.ADC_FLAG_EXTRA10
              , ADC.ADC_DATE_EXTRA1
              , ADC.ADC_DATE_EXTRA2
              , ADC.ADC_DATE_EXTRA3
              , ADC.ADC_DATE_EXTRA4
              , ADC.ADC_DATE_EXTRA5
              , ADC.ADC_DATE_EXTRA6
              , ADC.ADC_DATE_EXTRA7
              , ADC.ADC_DATE_EXTRA8
              , ADC.ADC_DATE_EXTRA9
              , ADC.ADC_DATE_EXTRA10
              , ADC.ADC_NUM_EXTRA1
              , ADC.ADC_NUM_EXTRA2
              , ADC.ADC_NUM_EXTRA3
              , ADC.ADC_NUM_EXTRA4
              , ADC.ADC_NUM_EXTRA5
              , ADC.ADC_NUM_EXTRA6
              , ADC.ADC_NUM_EXTRA7
              , ADC.ADC_NUM_EXTRA8
              , ADC.ADC_NUM_EXTRA9
              , ADC.ADC_NUM_EXTRA10
              , NULL NUM_EXTRA11
              , NULL NUM_EXTRA12
              , NULL NUM_EXTRA13
              , NULL NUM_EXTRA14
              , NULL NUM_EXTRA15
            FROM REC_FICHERO_CONTRATOS AGC
              JOIN CRC ON AGC.ID_ENVIO = CRC.CRC_ID_ENVIO
              JOIN ADC ON CRC.CNT_ID = ADC.CNT_ID;
            COMMIT;
        END;
    </entry>

</properties>
