<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">

    <display-name>pfs</display-name>
    <description>Servidor de Recuperaciones</description>


	<session-config >
		<session-timeout>15</session-timeout>
<!-- 
		<cookie-config>
			<secure>true</secure>
			<http-only>true</http-only>
		</cookie-config>
 -->
	</session-config>

    <!--
        - Key of the system property that should specify the root directory of this
        - web app. Applied by WebAppRootListener or Log4jConfigListener.
    -->
<!--    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>web.root</param-value>
    </context-param>
-->
    <!--
        - Location of the Log4J config file, for initialization and refresh checks.
        - Applied by Log4jConfigListener.
    -->
<!--    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/classes/log4j.xml</param-value>
    </context-param>
-->
    <!--
        - Location of the XML file that defines the root application context
        - Applied by ContextLoaderListener.
    -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/classes/ac-application-config.xml</param-value>
	</context-param>

<!-- MODIFICACIONES NECESARIAS PARA FUNCIONAMIENTO DE SEGURIDAD DE BANKIA -->
<!-- FILTRO 1: DESCOMENTAR EN BANKIA: corregir el valor de PathPrepend con el valor incluido en weblogic -->
	<!--Servlet Filter that handles site authentication.-->
<!-- 	
	<filter>
		<display-name>SecurityFilter</display-name>
     		<filter-name>SecurityFilter</filter-name>
	     	<filter-class>es.cm.krb.filter.SecurityFilter</filter-class>   
     		<init-param>
        		<param-name>error_page</param-name>
	        	<param-value>inicioBankia.jsp</param-value>        	  	
     		</init-param>
	     	<init-param>
     			<param-name>ini_page</param-name>
        		<param-value>/main/main.htm</param-value>
	     	</init-param>
		<init-param>
     			<param-name>end_page</param-name>
        		<param-value>inicioBankia.jsp</param-value>      
	     	</init-param>
 -->	     	
	<!--
		<init-param>
            		<param-name>PathPrepend</param-name>
	     		<param-value>/RAM</param-value>      
	    	</init-param>
	-->
<!-- 
     		<init-param>
			<param-name>protocol</param-name>
			<param-value>https</param-value>      
     		</init-param>
		<init-param>
			<param-name>auth_basic</param-name>
			<param-value>true</param-value>      
     		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SecurityFilter</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>
 -->
 
<!-- FILTRO 2: REESCRITURA DE URLs PARA BANKIA-->
    <!--
        - Enables URL Rewriting
    -->

    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
        <init-param>
            <param-name>logLevel</param-name>
            <param-value>ERROR</param-value>
        </init-param>
        <init-param>
            <param-name>confPath</param-name>
            <param-value>/WEB-INF/config/bankia.htaccess</param-value>
        </init-param>
    </filter>
    <filter-mapping>
       <filter-name>UrlRewriteFilter</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>


<!-- FILTRO 3: ADAPTACIONES DE AUTORIZACION PARA BANKIA -->

    <!--
        - Enables Spring Security
    -->
     <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>



<!-- FILTRO 4: FILTRO DE HIBERNATE OPEN SESSION IN VIEW -->

    <!--
        - Hibernate Open Session In View
    -->
    <filter>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
        <init-param>
            <param-name>sessionFactoryBeanName</param-name>
            <param-value>entitySessionFactory</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!-- FILTRO 5: FILTRO DE RECOVERY SECURITY -->

    <filter>
        <filter-name>RecoverySecurityFilter</filter-name>
        <filter-class>es.pfs.security.RecoverySecurityFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>RecoverySecurityFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
        - UnzipListener class used to unzip framework files.
    -->

    <listener>
        <listener-class>es.capgemini.devon.web.UnzipListener</listener-class>        
     </listener>


    <!-- Descomprime los procesos XML (procesos de BPM) de pfsgroup en la ruta / -->
    <!--context-param>
        <param-name>zipFileName1</param-name>
        <param-value>/WEB-INF/lib/pfsgroup.jar</param-value>
    </context-param-->
    <context-param>
        <param-name>pathToExtract1</param-name>
        <param-value>/WEB-INF/classes</param-value>
    </context-param>
    <context-param>
        <param-name>filesToExtract1</param-name>
        <param-value>^(process/.*)$</param-value>
    </context-param>

    <!-- Descomprime la configuración de los procesos XML los mete en optionalConfiguration / -->
    <context-param>
        <param-name>zipFileName2</param-name>
        <param-value>/WEB-INF/lib/pfsgroup.jar</param-value>
    </context-param>
    <context-param>
        <param-name>pathToExtract2</param-name>
        <param-value>/WEB-INF/classes/optionalConfiguration</param-value>
    </context-param>
    <context-param>
        <param-name>filesToExtract2</param-name>
        <param-value>^(ac-rec-bpm-pfsgroup.xml)$</param-value>
    </context-param>


    <!-- Descomprime los JSP de pfsgroup en la ruta / -->
    <context-param>
        <param-name>zipFileName3</param-name>
        <param-value>/WEB-INF/lib/pfsgroup.jar</param-value>
    </context-param>
    <context-param>
        <param-name>pathToExtract3</param-name>
        <param-value>/</param-value>
    </context-param>
    <context-param>
        <param-name>filesToExtract3</param-name>
        <param-value>^(WEB-INF/.*)$</param-value>
    </context-param>

<!--
	<context-param>
        <param-name>zipFileName4</param-name>
        <param-value>/WEB-INF/lib/pfs-rec-common.jar</param-value>
    </context-param>
    <context-param>
        <param-name>pathToExtract4</param-name>
        <param-value>/WEB-INF/classes</param-value>
    </context-param>
    <context-param>
        <param-name>filesToExtract4</param-name>
        <param-value>^(.*\.xml)|(.*\.properties)$</param-value>
    </context-param>
    
-->
    <!--
        - UserCounterListener class used to count the current number
        - of active users for the applications.  Does this by counting
        - how many user objects are stuffed into the session.  It also grabs
        - these users and exposes them in the servlet context.
    -->
    <listener>
        <listener-class>es.capgemini.devon.console.web.UserCounterListener</listener-class>
    </listener>
 
 
    <!--
        - Configures Log4J for this web app.
        - As this context specifies a context-param "log4jConfigLocation", its file path
        - is used to load the Log4J configuration, including periodic refresh checks.
        -
        - Would fall back to default Log4J initialization (non-refreshing) if no special
        - context-params are given.
        -
        - Exports a "web app root key", i.e. a system property that specifies the root
        - directory of this web app, for usage in log file paths.
        - This web app specifies "petclinic.root" (see log4j.properties file).
    -->
<!--    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
-->
    <!--
      - Loads the root application context of this web app at startup,
      - by default from "/WEB-INF/applicationContext.xml".
        - Note that you need to fall back to Spring's ContextLoaderServlet for
        - J2EE servers that do not follow the Servlet 2.4 initialization order.
        -
      - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
      - to access it anywhere in the web application, outside of the framework.
      -
      - The root context is the parent of all servlet-specific contexts.
      - This means that its beans are automatically available in these child contexts,
      - both for getBean(name) calls and (external) bean references.
      -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

	<!-- Listener para controlar el número de sesiones registradas por usuario -->
	<listener>
		<listener-class>org.springframework.security.ui.session.HttpSessionEventPublisher</listener-class>
	</listener>

    <!-- Serves static resource content from .jar files such as spring-faces.jar -->
    <servlet>
        <servlet-name>Resources Servlet</servlet-name>
        <servlet-class>org.springframework.js.resource.ResourceServlet</servlet-class>
        <load-on-startup>0</load-on-startup>
    </servlet>

    <!--
      - Spring web MVC servlet that dispatches requests to registered handlers.
      - Has its own application context, by default defined in "{servlet-name}-servlet.xml",
      - i.e. "pfs-servlet.xml" in this case.
      -
      - A web app can contain any number of such servlets.
      - Note that this web app has a shared root application context, serving as parent
      - of all DispatcherServlet contexts.
      -->
    <servlet>
        <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
	        <param-value>/WEB-INF/fwk/config/ac-dispatcher-servlet-config.xml</param-value>
		</init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- /WEB-INF/classes/ -->

    <!-- Map all /resources requests to the Resource Servlet for handling -->
    <servlet-mapping>
        <servlet-name>Resources Servlet</servlet-name>
        <url-pattern>/resources/*</url-pattern>
    </servlet-mapping>

    <!--
        - Dispatcher servlet mapping for the main web user interface.
        - Either refering to "petstore" for the Spring web MVC dispatcher,
        - or to "action" for the Struts dispatcher.
        -->
    <servlet-mapping>
        <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
        <url-pattern>*.htm</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>index.htm</welcome-file>
    </welcome-file-list>

    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <!-- Displays a stack trace -->
        <location>/WEB-INF/fwk/jsp/fwkUncaughtException.jsp</location>
    </error-page>


   <error-page>
      <error-code>404</error-code>
      <location>/404.html</location>
   </error-page>

   <error-page>
      <error-code>403</error-code>
      <location>/403.html</location>
   </error-page>

   <error-page>
      <error-code>500</error-code>
      <location>/500.html</location>
   </error-page>

   <error-page>
      <error-code>501</error-code>
      <location>/500.html</location>
   </error-page>

</web-app>
