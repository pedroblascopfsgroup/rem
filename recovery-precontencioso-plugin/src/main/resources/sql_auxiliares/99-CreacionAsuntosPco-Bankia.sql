DEFINE tipo_procedimiento = P420

/*
--##########################################
--## AUTOR=PEDROBLASCO
--## FECHA_CREACION=20151027
--## ARTEFACTO=producto
--## VERSION_ARTEFACTO=9.1
--## INCIDENCIA_LINK=PRODUCTO-xxx
--## PRODUCTO=NO
--##
--## Finalidad: InserciÃ³n de asuntos de Precontencioso
--##########################################
--*/
WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON
set timing ON
set linesize 2000
SET VERIFY OFF
set timing on
set feedback on

DECLARE

    V_SQL VARCHAR2(32000 CHAR); -- Sentencia a ejecutar     
    V_ESQUEMA VARCHAR2(25 CHAR):= 'BANK01'; -- Configuracion Esquemas
    V_ESQUEMA_MASTER VARCHAR2(25 CHAR):= 'BANKMASTER'; -- Configuracion Esquemas
    V_NUM_TABLAS NUMBER(16); -- Vble. para validar la existencia de una tabla.   
    ERR_NUM NUMBER(25);  -- Vble. auxiliar para registrar errores en el script.
    ERR_MSG VARCHAR2(1024 CHAR); -- Vble. auxiliar para registrar errores en el script.

  CURSOR CUR_PROCEDIMIENTOS IS
    WITH BPM_DEFINITIONS AS (
      SELECT NAME_, MAX(ID_) ID_
      FROM BANKMASTER.JBPM_PROCESSDEFINITION
      GROUP BY NAME_
    )
    , TAREAS AS (
      SELECT PRC_ID, TAR_ID, USUARIOCREAR FROM TAR_TAREAS_NOTIFICACIONES
      WHERE (TAR_TAREA_FINALIZADA IS NULL OR TAR_TAREA_FINALIZADA = 0) AND BORRADO = 0
        AND PRC_ID IS NOT NULL
        AND TAR_CODIGO = 1
        AND TAR_ID NOT IN (
          SELECT TAR_ID FROM TEX_TAREA_EXTERNA WHERE BORRADO = 0 GROUP BY TAR_ID HAVING COUNT(DISTINCT TAP_ID) > 1
        )
    )
    , PROCEDIMIENTOS AS (
      SELECT PRC.PRC_ID, PRC.DD_TPO_ID
      FROM PRC_PROCEDIMIENTOS PRC
        JOIN TAREAS TAR ON PRC.PRC_ID = TAR.PRC_ID AND PRC.USUARIOCREAR = TAR.USUARIOCREAR
      WHERE PRC.PRC_PROCESS_BPM IS NULL AND PRC.BORRADO = 0
      GROUP BY PRC.PRC_ID, PRC.DD_TPO_ID
      HAVING COUNT(TAR.TAR_ID) = 1
    )
    SELECT PRC.PRC_ID, DEF.ID_ DEFINITION_ID, NODE.ID_ NODE_ID, TAP.TAP_CODIGO, TEX.TEX_ID
    FROM PROCEDIMIENTOS PRC
      JOIN DD_TPO_TIPO_PROCEDIMIENTO TPO ON PRC.DD_TPO_ID = TPO.DD_TPO_ID
      JOIN BPM_DEFINITIONS DEF ON TPO.DD_TPO_XML_JBPM = DEF.NAME_
      JOIN TAREAS TAR ON PRC.PRC_ID = TAR.PRC_ID
      JOIN TEX_TAREA_EXTERNA TEX ON TAR.TAR_ID = TEX.TAR_ID AND TEX.BORRADO = 0
      JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TEX.TAP_ID = TAP.TAP_ID
      JOIN BANKMASTER.JBPM_NODE NODE ON DEF.ID_ = NODE.PROCESSDEFINITION_ AND TAP.TAP_CODIGO = NODE.NAME_;

    TYPE T_PRC IS TABLE OF CUR_PROCEDIMIENTOS%ROWTYPE INDEX BY BINARY_INTEGER;
    L_PRC T_PRC;

    --/* Variables */
    V_DBID NUMBER(16);

BEGIN 

  DBMS_OUTPUT.PUT_LINE('***************************');
  DBMS_OUTPUT.PUT_LINE('BLOQUE 1');
  DBMS_OUTPUT.PUT_LINE('***************************');

  V_SQL := q'[TRUNCATE TABLE CNV_TMP_PER_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO CNV_TMP_PER_ID (CODIGO_PERSONA, PER_ID) SELECT DISTINCT PRD.CODIGO_PERSONA, PER.PER_ID FROM CNV_AUX_ALTA_PRC_PER PRD LEFT JOIN PER_PERSONAS PER ON (PRD.CODIGO_PERSONA = PER.PER_COD_CLIENTE_ENTIDAD)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[TRUNCATE TABLE CNV_TMP_CNT_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO CNV_TMP_CNT_ID (TIPO_PRODUCTO, NUMERO_CONTRATO, NUMERO_ESPEC, CNT_ID)
SELECT DISTINCT PRO.TIPO_PRODUCTO, PRO.NUMERO_CONTRATO, PRO.NUMERO_ESPEC, CNT.CNT_ID  
    FROM CNV_AUX_ALTA_PRC_CNT PRO left join  CNT_CONTRATOS CNT 
    ON PRO.NUMERO_CONTRATO = SUBSTR(CNT.CNT_CONTRATO,11,17)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO CLI_CLIENTES (CLI_ID, PER_ID, ARQ_ID, DD_EST_ID, CLI_FECHA_EST_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, CLI_FECHA_CREACION, DD_ECL_ID, CLI_TELECOBRO, OFI_ID) 
SELECT S_CLI_CLIENTES.NEXTVAL, TMP.PER_ID, (select min(arq_id) from arq_arquetipos), iti.DD_EST_ID, PER.PER_FECHA_EXTRACCION, '0', 
    'CARGA_PCO', SYSDATE, '0', SYSDATE, cli.DD_ECL_CODIGO, '0', OFI_ID 
  FROM CNV_TMP_PER_ID TMP 
    LEFT JOIN BANKMASTER.DD_ECL_ESTADO_CLIENTE cli ON cli.DD_ECL_CODIGO = '1' 
    LEFT JOIN BANKMASTER.DD_EST_ESTADOS_ITINERARIOS iti on iti.DD_EST_CODIGO = 'AS' 
    LEFT JOIN PER_PERSONAS PER ON TMP.PER_ID=PER.PER_ID 
  WHERE TMP.PER_ID NOT IN 
  (SELECT CLIENTES.PER_ID FROM CLI_CLIENTES CLIENTES) 
    AND TMP.PER_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO CCL_CONTRATOS_CLIENTE (CCL_ID, CNT_ID, CLI_ID, CCL_PASE, VERSION, USUARIOCREAR, FECHACREAR, BORRADO) 
SELECT S_CCL_CONTRATOS_CLIENTE.NEXTVAL, CNT_ID, CLI_ID, '1', '0', 'CARGA_PCO', SYSDATE, '0' 
  FROM CNV_AUX_ALTA_PRC_PER P 
    INNER JOIN CNV_TMP_PER_ID PER ON P.CODIGO_PERSONA=PER.CODIGO_PERSONA 
    INNER JOIN CLI_CLIENTES CLI ON PER.PER_ID=CLI.PER_ID, 
  CNV_AUX_ALTA_PRC_CNT C 
    LEFT JOIN CNV_TMP_CNT_ID CNT ON C.NUMERO_CONTRATO=CNT.NUMERO_CONTRATO AND C.NUMERO_ESPEC=CNT.NUMERO_ESPEC AND C.TIPO_PRODUCTO=CNT.TIPO_PRODUCTO
  WHERE PER.PER_ID NOT IN (SELECT CLIENTE.CLI_ID FROM CCL_CONTRATOS_CLIENTE CLIENTE) 
    AND PER.PER_ID IS NOT NULL AND P.CODIGO_PROCEDIMIENTO=C.CODIGO_PROCEDIMIENTO 
    AND CNT.CNT_ID NOT IN (SELECT CLIENTE.CNT_ID FROM CCL_CONTRATOS_CLIENTE CLIENTE) 
    AND CNT.CNT_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO EXP_EXPEDIENTES (EXP_ID, DD_EST_ID, EXP_FECHA_EST_ID, OFI_ID, ARQ_ID, EXP_PROCESS_BPM, EXP_MANUAL, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, 
    DD_EEX_ID, DD_TPX_ID, CD_EXPEDIENTE_NUSE, NUMERO_EXP_NUSE, CD_PROCEDIMIENTO) 
SELECT S_EXP_EXPEDIENTES.NEXTVAL, iti.DD_EST_ID, CNV_AUX_ALTA_PRC.FECHA_PROCESO, zon.OFI_ID, (select min(arq_id) from arq_arquetipos), 
  '0', '0', '0', 'CARGA_PCO', SYSDATE, '0', 
  est.DD_EEX_ID, exp.DD_TPX_ID, CNV_AUX_ALTA_PRC.CODIGO_EXPEDIENTE_NUSE, CNV_AUX_ALTA_PRC.NUMERO_EXP_NUSE, CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE 
FROM CNV_AUX_ALTA_PRC 
  LEFT JOIN BANKMASTER.DD_EEX_ESTADO_EXPEDIENTE est ON est.DD_EEX_CODIGO = '1' 
    LEFT JOIN DD_TPX_TIPO_EXPEDIENTE exp ON exp.DD_TPX_CODIGO = 'INT' 
    LEFT JOIN ZON_ZONIFICACION zon ON zon.zon_num_centro = '00000000100' 
    LEFT JOIN BANKMASTER.DD_EST_ESTADOS_ITINERARIOS iti on iti.DD_EST_CODIGO = 'AS' 
  WHERE NOT EXISTS 
    (SELECT 1 FROM EXP_EXPEDIENTES EXPE 
      WHERE EXPE.CD_PROCEDIMIENTO=CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE AND EXPE.NUMERO_EXP_NUSE = CNV_AUX_ALTA_PRC.NUMERO_EXP_NUSE) 
    AND CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE IS NOT NULL 
    AND CNV_AUX_ALTA_PRC.NUMERO_EXP_NUSE IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PEX_PERSONAS_EXPEDIENTE (PEX_ID, PER_ID, EXP_ID, DD_AEX_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
SELECT S_PEX_PERSONAS_EXPEDIENTE.NEXTVAL, TMP.PER_ID, EXP.EXP_ID, AMB.DD_AEX_ID, '0', 'CARGA_PCO', SYSDATE, '0' 
  FROM CNV_AUX_ALTA_PRC_PER PER 
    LEFT JOIN BANKMASTER.DD_AEX_AMBITOS_EXPEDIENTE AMB ON AMB.DD_AEX_CODIGO = 'AE_AUTO' 
    LEFT JOIN EXP_EXPEDIENTES EXP ON EXP.CD_PROCEDIMIENTO=PER.CODIGO_PROCEDIMIENTO 
    LEFT JOIN CNV_TMP_PER_ID TMP ON TMP.CODIGO_PERSONA=PER.CODIGO_PERSONA 
  WHERE NOT EXISTS (SELECT 1 FROM PEX_PERSONAS_EXPEDIENTE PEX WHERE TMP.PER_ID=PEX.PER_ID AND EXP.EXP_ID=PEX.EXP_ID) 
    AND TMP.PER_ID IS NOT NULL AND EXP.EXP_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO CEX_CONTRATOS_EXPEDIENTE (CEX_ID, CNT_ID, EXP_ID, CEX_SIN_ACTUACION, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, DD_AEX_ID)
SELECT S_CEX_CONTRATOS_EXPEDIENTE.NEXTVAL, TMP.CNT_ID, EXP.EXP_ID, '0', '0', 'CARGA_PCO', SYSDATE, '0', AMB.DD_AEX_ID 
  FROM CNV_AUX_ALTA_PRC_CNT CNT 
    LEFT JOIN BANKMASTER.DD_AEX_AMBITOS_EXPEDIENTE AMB ON AMB.DD_AEX_CODIGO = 'AE_AUTO' 
    LEFT JOIN EXP_EXPEDIENTES EXP ON EXP.CD_PROCEDIMIENTO=CNT.CODIGO_PROCEDIMIENTO 
    LEFT JOIN CNV_TMP_CNT_ID TMP ON TMP.NUMERO_CONTRATO=CNT.NUMERO_CONTRATO AND TMP.NUMERO_ESPEC=CNT.NUMERO_ESPEC AND TMP.TIPO_PRODUCTO=CNT.TIPO_PRODUCTO 
  WHERE NOT EXISTS (SELECT 1 FROM CEX_CONTRATOS_EXPEDIENTE CEX WHERE TMP.CNT_ID = CEX.CNT_ID AND EXP.EXP_ID = CEX.EXP_ID)  AND TMP.CNT_ID IS NOT NULL AND EXP.EXP_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  DBMS_OUTPUT.PUT_LINE('***************************');
  DBMS_OUTPUT.PUT_LINE('BLOQUE 2');
  DBMS_OUTPUT.PUT_LINE('***************************');

  V_SQL := q'[INSERT INTO ASU_ASUNTOS (ASU_ID, DD_EST_ID, ASU_FECHA_EST_ID, EXP_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, DD_EAS_ID, DTYPE, ASU_ID_EXTERNO)
SELECT S_ASU_ASUNTOS.NEXTVAL, iti.DD_EST_ID, SYSDATE, EXPE.EXP_ID, '0', 'CARGA_PCO', SYSDATE, '0', 
    DD_EAS_ID, 'EXTAsunto', CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE 
  FROM CNV_AUX_ALTA_PRC 
    INNER JOIN BANKMASTER.DD_EAS_ESTADO_ASUNTOS asu ON asu.DD_EAS_CODIGO = '03' 
    INNER JOIN BANKMASTER.DD_EST_ESTADOS_ITINERARIOS iti on iti.DD_EST_CODIGO = 'AS' 
    INNER JOIN EXP_EXPEDIENTES EXPE on CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE=EXPE.CD_PROCEDIMIENTO 
  WHERE NOT EXISTS (SELECT 1 FROM ASU_ASUNTOS ASUNTOS WHERE ASUNTOS.ASU_ID_EXTERNO=CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE) 
    AND CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PRC_PROCEDIMIENTOS (PRC_ID, ASU_ID, DD_TAC_ID, DD_TRE_ID, DD_TPO_ID, PRC_PORCENTAJE_RECUPERACION, PRC_PLAZO_RECUPERACION, 
    PRC_SALDO_ORIGINAL_VENCIDO, PRC_SALDO_ORIGINAL_NO_VENCIDO, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, 
    PRC_DECIDIDO, DD_EPR_ID, DTYPE, TIPO_PROC_ORIGINAL, PRC_PARALIZADO)
SELECT S_PRC_PROCEDIMIENTOS.NEXTVAL, ASU.ASU_ID, null, '1', null, '100', '18', 
    '0', '0', '0', 'CARGA_PCO', SYSDATE, '0', '0', 
    EST.DD_EPR_ID, 'MEJProcedimiento', null, '0' 
  FROM ASU_ASUNTOS ASU 
    LEFT JOIN BANKMASTER.DD_EPR_ESTADO_PROCEDIMIENTO EST ON EST.DD_EPR_CODIGO='03' 
  WHERE ASU.ASU_ID NOT IN (SELECT PRC.ASU_ID FROM PRC_PROCEDIMIENTOS PRC) 
    AND ASU.ASU_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PRC_PER (PRC_ID, PER_ID, VERSION) SELECT DISTINCT PRO.PRC_ID, TMP.PER_ID, '0' 
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    LEFT JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID 
    LEFT JOIN CNV_AUX_ALTA_PRC_PER PER ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PER.CODIGO_PROCEDIMIENTO 
    LEFT JOIN CNV_TMP_PER_ID TMP ON TMP.CODIGO_PERSONA=PER.CODIGO_PERSONA 
  WHERE NOT EXISTS (SELECT 1 FROM PRC_PER CEX WHERE PRO.PRC_ID = CEX.PRC_ID AND TMP.PER_ID = CEX.PER_ID) 
    AND TMP.PER_ID IS NOT NULL 
    AND PRO.PRC_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PRC_CEX (PRC_ID, CEX_ID, VERSION) SELECT PRO.PRC_ID, CEX.CEX_ID, '0' 
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    LEFT JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID, EXP_EXPEDIENTES EXP 
    LEFT JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON CEX.EXP_ID=EXP.EXP_ID 
  WHERE PRC.CODIGO_PROCEDIMIENTO_NUSE=EXP.CD_PROCEDIMIENTO 
    AND NOT EXISTS (SELECT 1 FROM PRC_CEX CEX2 WHERE PRO.PRC_ID = CEX2.PRC_ID AND CEX2.CEX_ID = CEX.CEX_ID) 
    AND CEX.CEX_ID IS NOT NULL 
    AND PRO.PRC_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO TAR_TAREAS_NOTIFICACIONES (TAR_ID, EXP_ID, ASU_ID, DD_EST_ID, DD_EIN_ID, DD_STA_ID, TAR_CODIGO, TAR_TAREA, TAR_DESCRIPCION, 
    TAR_FECHA_INI, TAR_EN_ESPERA, TAR_ALERTA, TAR_EMISOR, 
    VERSION, USUARIOCREAR, FECHACREAR, BORRADO, PRC_ID, DTYPE, NFA_TAR_REVISADA)
SELECT S_TAR_TAREAS_NOTIFICACIONES.NEXTVAL, EXP_ID, PRO.ASU_ID, '6', '5', TAP.DD_STA_ID, '1', 
    TAP_CODIGO, TAP_DESCRIPCION, SYSDATE, '0', '0', 'AUTOMATICA', '0', 'CARGA_PCO', SYSDATE, '0', PRC_ID, 'EXTTareaNotificacion', '0' 
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    LEFT JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    LEFT JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID 
    LEFT JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TAP.TAP_CODIGO='PCO_PrepararExpediente'
  WHERE ASU.EXP_ID NOT IN (SELECT TAR.EXP_ID FROM TAR_TAREAS_NOTIFICACIONES TAR WHERE EXP_ID IS NOT NULL) 
    AND EXP_ID IS NOT NULL
    AND PCO.CODIGO_PROCEDIMIENTO_NUSE IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO TEX_TAREA_EXTERNA(TEX_ID, TAR_ID, TAP_ID, TEX_DETENIDA, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, TEX_CANCELADA, TEX_NUM_AUTOP, DTYPE)
SELECT S_TEX_TAREA_EXTERNA.NEXTVAL, TAR_ID, TAP_ID, '0', '0', 'CARGA_PCO', SYSDATE, '0', '0', '0', 'EXTTareaExterna' 
  FROM TAR_TAREAS_NOTIFICACIONES TAR 
    LEFT JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TAR.TAR_TAREA=TAP.TAP_CODIGO 
  WHERE TAR.USUARIOCREAR = 'CARGA_PCO' 
    AND TAR.TAR_ID NOT IN (SELECT TEX.TAR_ID FROM TEX_TAREA_EXTERNA TEX WHERE TAR_ID IS NOT NULL) 
    AND TAR.TAR_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  DBMS_OUTPUT.PUT_LINE('***************************');
  DBMS_OUTPUT.PUT_LINE('BLOQUE 3');
  DBMS_OUTPUT.PUT_LINE('***************************');

  V_SQL := q'[MERGE INTO ASU_ASUNTOS ASU USING (SELECT DISTINCT DD.DD_PAS_ID, ASU2.ASU_ID, ASU2.EXP_ID FROM CNV_AUX_ALTA_PRC CNV 
      INNER JOIN ASU_ASUNTOS ASU2 ON ASU2.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE AND ASU2.DD_PAS_ID IS NULL 
      INNER JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON CEX.EXP_ID=ASU2.EXP_ID 
      INNER JOIN EXT_IAC_INFO_ADD_CONTRATO EXT ON EXT.CNT_ID=CEX.CNT_ID AND EXT.IAC_VALUE='5074'
      INNER JOIN EXT_DD_IFC_INFO_CONTRATO EXT2 ON EXT2.DD_IFC_ID = EXT.DD_IFC_ID AND DD_IFC_CODIGO='char_extra1' 
      INNER JOIN DD_PAS_PROPIEDAD_ASUNTO DD ON DD.DD_PAS_CODIGO='SAREB') ORIGEN 
  ON (ASU.ASU_ID=ORIGEN.ASU_ID AND ASU.EXP_ID=ORIGEN.EXP_ID) 
  WHEN MATCHED THEN 
    UPDATE SET ASU.DD_PAS_ID = ORIGEN.DD_PAS_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[MERGE INTO ASU_ASUNTOS ASU USING (SELECT DISTINCT DD.DD_PAS_ID, ASU2.ASU_ID, ASU2.EXP_ID  FROM CNV_AUX_ALTA_PRC CNV 
      INNER JOIN ASU_ASUNTOS ASU2 ON ASU2.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE AND ASU2.DD_PAS_ID IS NULL 
      INNER JOIN CEX_CONTRATOS_EXPEDIENTE CEX ON CEX.EXP_ID=ASU2.EXP_ID 
      INNER JOIN EXT_IAC_INFO_ADD_CONTRATO EXT ON EXT.CNT_ID=CEX.CNT_ID AND EXT.IAC_VALUE='2038'
      INNER JOIN EXT_DD_IFC_INFO_CONTRATO EXT2 ON EXT2.DD_IFC_ID = EXT.DD_IFC_ID AND DD_IFC_CODIGO='char_extra1' 
      INNER JOIN DD_PAS_PROPIEDAD_ASUNTO DD ON DD.DD_PAS_CODIGO='BANKIA') ORIGEN 
  ON (ASU.ASU_ID=ORIGEN.ASU_ID AND ASU.EXP_ID=ORIGEN.EXP_ID) 
  WHEN MATCHED THEN 
    UPDATE SET ASU.DD_PAS_ID = ORIGEN.DD_PAS_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[MERGE INTO ASU_ASUNTOS ASU USING (SELECT DD.DD_TAS_ID, ASU2.ASU_ID FROM CNV_AUX_ALTA_PRC CNV 
      INNER JOIN ASU_ASUNTOS ASU2 ON ASU2.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE AND CNV.TIPO_PROCEDIMIENTO='CONCURSO' AND ASU2.DD_TAS_ID IS NULL 
      INNER JOIN BANKMASTER.DD_TAS_TIPOS_ASUNTO DD ON DD.DD_TAS_CODIGO='02') ORIGEN 
  ON (ASU.ASU_ID=ORIGEN.ASU_ID) 
  WHEN MATCHED THEN 
    UPDATE SET ASU.DD_TAS_ID = ORIGEN.DD_TAS_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[MERGE INTO ASU_ASUNTOS ASU USING (SELECT DD.DD_TAS_ID, ASU2.ASU_ID FROM CNV_AUX_ALTA_PRC CNV 
      INNER JOIN ASU_ASUNTOS ASU2 ON ASU2.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE AND CNV.TIPO_PROCEDIMIENTO!='CONCURSO' AND ASU2.DD_TAS_ID IS NULL 
      INNER JOIN BANKMASTER.DD_TAS_TIPOS_ASUNTO DD ON DD.DD_TAS_CODIGO='01') ORIGEN 
  ON (ASU.ASU_ID=ORIGEN.ASU_ID) 
  WHEN MATCHED THEN 
    UPDATE SET ASU.DD_TAS_ID = ORIGEN.DD_TAS_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[MERGE INTO ASU_ASUNTOS ASU USING (SELECT DD.DD_GES_ID, ASU2.ASU_ID FROM CNV_AUX_ALTA_PRC CNV 
      INNER JOIN ASU_ASUNTOS ASU2 ON ASU2.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE AND ASU2.DD_GES_ID IS NULL 
      INNER JOIN DD_GES_GESTION_ASUNTO DD ON DD.DD_GES_CODIGO='BANKIA') ORIGEN 
  ON (ASU.ASU_ID=ORIGEN.ASU_ID) 
  WHEN MATCHED THEN 
    UPDATE SET ASU.DD_GES_ID = ORIGEN.DD_GES_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE ASU_ASUNTOS ASU SET DD_GES_ID = (SELECT DD_GES_ID FROM DD_GES_GESTION_ASUNTO WHERE DD_GES_CODIGO = 'HAYA') 
  WHERE DD_PAS_ID = (SELECT DD_PAS_ID FROM DD_PAS_PROPIEDAD_ASUNTO WHERE DD_PAS_CODIGO = 'SAREB') 
    AND DD_GES_ID = (SELECT DD_GES_ID FROM DD_GES_GESTION_ASUNTO WHERE DD_GES_CODIGO = 'BANKIA') 
    AND ASU.USUARIOCREAR = 'CARGA_PCO']';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[MERGE INTO PRC_PROCEDIMIENTOS PRC USING (SELECT DD.DD_TPO_ID, PRO.PRC_ID  FROM CNV_AUX_ALTA_PRC PRC2 
      LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC2.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
      INNER JOIN ASU_ASUNTOS ASU ON PRC2.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
      INNER JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID AND PRO.DD_TPO_ID IS NULL 
      INNER JOIN DD_TPO_TIPO_PROCEDIMIENTO DD ON DD.DD_TPO_CODIGO='PCO' 
    WHERE PCO.CODIGO_PROCEDIMIENTO_NUSE IS NOT NULL) ORIGEN 
  ON (PRC.PRC_ID=ORIGEN.PRC_ID) 
  WHEN MATCHED THEN 
    UPDATE SET PRC.DD_TPO_ID = ORIGEN.DD_TPO_ID, PRC.TIPO_PROC_ORIGINAL=ORIGEN.DD_TPO_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE PEX_PERSONAS_EXPEDIENTE SET PEX_PASE = 1 WHERE PEX_ID IN 
    (SELECT TMP.PEX_ID 
      FROM (SELECT PEX_ID, EXP_ID, RANK() OVER (PARTITION BY EXP_ID ORDER BY PEX_ID) RANGO 
        FROM PEX_PERSONAS_EXPEDIENTE WHERE USUARIOCREAR = 'CARGA_PCO' and PEX_PASE IS NULL ORDER BY EXP_ID) TMP 
      WHERE TMP.RANGO = 1)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE PEX_PERSONAS_EXPEDIENTE SET PEX_PASE = 0 WHERE USUARIOCREAR = 'CARGA_PCO' and PEX_PASE IS NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE CEX_CONTRATOS_EXPEDIENTE SET CEX_PASE = 1 WHERE CEX_ID IN 
    (SELECT TMP.CEX_ID 
      FROM (SELECT CEX_ID, EXP_ID, RANK() OVER (PARTITION BY EXP_ID ORDER BY CEX_ID) RANGO 
        FROM CEX_CONTRATOS_EXPEDIENTE WHERE USUARIOCREAR = 'CARGA_PCO' and CEX_PASE IS NULL ORDER BY EXP_ID) TMP 
      WHERE TMP.RANGO = 1)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE CEX_CONTRATOS_EXPEDIENTE SET cex_pase = 0 WHERE USUARIOCREAR = 'CARGA_PCO' and cex_pase IS NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  DBMS_OUTPUT.PUT_LINE('***************************');
  DBMS_OUTPUT.PUT_LINE('BLOQUE 4: ALTA_BPM_INSTANCES');
  DBMS_OUTPUT.PUT_LINE('***************************');
  
  SELECT ENTIDAD_ID INTO V_DBID
    FROM BANKMASTER.ENTIDADCONFIG
    WHERE DATAKEY = 'schema' AND UPPER(DATAVALUE) = 'BANK01';
  DBMS_OUTPUT.PUT_LINE('V_DBID: ' || V_DBID);

  --/* ----- Reservamos id's objetos de BPM ------- */
  V_SQL := 'TRUNCATE TABLE TMP_ALTA_BPM_INSTANCES';
  EXECUTE IMMEDIATE V_SQL;
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  dbms_output.put('CUR_PROCEDIMIENTOS:');
  OPEN CUR_PROCEDIMIENTOS;
  LOOP
    FETCH CUR_PROCEDIMIENTOS BULK COLLECT INTO L_PRC LIMIT 1000;
    FORALL I IN 1..L_PRC.COUNT
      INSERT INTO TMP_ALTA_BPM_INSTANCES(PRC_ID, DEF_ID, NODE_ID, TAP_CODIGO, TEX_ID, INST_ID, TOKEN_ID, MODULE_ID, VMAP_ID)
        VALUES (L_PRC(I).PRC_ID, L_PRC(I).DEFINITION_ID, L_PRC(I).NODE_ID, L_PRC(I).TAP_CODIGO, L_PRC(I).TEX_ID
        , BANKMASTER.HIBERNATE_SEQUENCE.NEXTVAL, BANKMASTER.HIBERNATE_SEQUENCE.CURRVAL, BANKMASTER.HIBERNATE_SEQUENCE.CURRVAL, BANKMASTER.HIBERNATE_SEQUENCE.CURRVAL);
    EXIT WHEN CUR_PROCEDIMIENTOS%NOTFOUND;
  END LOOP;
  CLOSE CUR_PROCEDIMIENTOS;
  dbms_output.PUT_LINE('----');

    --/* ----- Insertamos instancia de BPM ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_PROCESSINSTANCE        (ID_, VERSION_, START_, END_, ISSUSPENDED_, PROCESSDEFINITION_)
    SELECT TMP.INST_ID -- ID_
            ,1 --VERSION
            , SYSDATE --START_
            ,NULL --END_
            , 0 --ISSUSPENDED_
            , TMP.DEF_ID --PRCESSDEFINITION_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos el token para la instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_TOKEN              (ID_, VERSION_, START_, END_, NODEENTER_, ISSUSPENDED_, NODE_, PROCESSINSTANCE_, NEXTLOGINDEX_,ISABLETOREACTIVATEPARENT_,ISTERMINATIONIMPLICIT_)
        SELECT TMP.TOKEN_ID
              , 1 --VERSION_
              , SYSDATE --START_
              , NULL --END_
              , SYSDATE --NODEENTER_
              , 0 --ISSUSPENDED_
              , TMP.NODE_ID --_ NODE_
              , TMP.INST_ID  --PROCESSINSTANCE_
              ,0
              ,0
              ,0
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Actualizamos el roottoken en cada instancia ------- */
V_SQL := q'[MERGE INTO BANKMASTER.JBPM_PROCESSINSTANCE INS    USING (SELECT * FROM TMP_ALTA_BPM_INSTANCES) TMP
    ON (INS.ID_ = TMP.INST_ID)
    WHEN MATCHED THEN UPDATE SET INS.ROOTTOKEN_ = TMP.TOKEN_ID]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Actualizamos el id de instancia en el procedimiento ------- */
V_SQL := q'[MERGE INTO PRC_PROCEDIMIENTOS PRC    USING (SELECT * FROM TMP_ALTA_BPM_INSTANCES) TMP
    ON (PRC.PRC_ID = TMP.PRC_ID)
    WHEN MATCHED THEN UPDATE SET PRC.PRC_PROCESS_BPM = TMP.INST_ID
      ,USUARIOMODIFICAR = 'AUTO', fechamodificar = sysdate]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Actualizamos el id de instancia en el procedimiento ------- */
V_SQL := q'[MERGE INTO TEX_TAREA_EXTERNA TEX    USING (SELECT * FROM TMP_ALTA_BPM_INSTANCES) TMP
    ON (TEX.TEX_ID = TMP.TEX_ID)
    WHEN MATCHED THEN UPDATE SET TEX.TEX_TOKEN_ID_BPM = TMP.TOKEN_ID
      ,USUARIOMODIFICAR = 'AUTO', fechamodificar = sysdate]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos el moduleinstance para cada instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_MODULEINSTANCE            (ID_, CLASS_, VERSION_, PROCESSINSTANCE_, NAME_)
        SELECT  TMP.MODULE_ID
            , 'C' --CLASS_
            , 0 --VERSION_
            , TMP.INST_ID --PROCESSINSTANCE_
            , 'org.jbpm.context.exe.ContextInstance' --NAME_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos el variablemap para cada instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_TOKENVARIABLEMAP            (ID_, VERSION_, TOKEN_, CONTEXTINSTANCE_)
      SELECT TMP.VMAP_ID
        , 0 --VERSION_
        , TMP.TOKEN_ID --ROOTTOKEN_
        , TMP.MODULE_ID  --CONTEXTINSTANCE_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos la variable DB_ID para cada instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_VARIABLEINSTANCE        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT BANKMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_
      , 'DB_ID' --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , ]' || V_DBID  || q'[--LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos la variable procedimientoTareaExterna para cada instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_VARIABLEINSTANCE        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT BANKMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_
      , 'procedimientoTareaExterna' --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , TMP.PRC_ID --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos la variable bpmParalizado para cada instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_VARIABLEINSTANCE        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT BANKMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_
      , 'bpmParalizado' --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , 0 --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

    --/* ----- Insertamos la variable idCODIGOTAREA para cada instancia ------- */
V_SQL := q'[INSERT INTO BANKMASTER.JBPM_VARIABLEINSTANCE (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT BANKMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_
      , 'id'||TMP.TAP_CODIGO --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , TMP.TEX_ID --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  DBMS_OUTPUT.PUT_LINE('***************************');
  DBMS_OUTPUT.PUT_LINE('BLOQUE 5: Gestores');
  DBMS_OUTPUT.PUT_LINE('***************************');

  V_SQL := q'[MERGE INTO TAR_TAREAS_NOTIFICACIONES TAR USING (SELECT TAR.TAR_ID, TAR.TAR_TAREA, TAR_DESCRIPCION, TAP.TAP_DESCRIPCION 
    FROM TAR_TAREAS_NOTIFICACIONES TAR 
      JOIN TEX_TAREA_EXTERNA TEX ON TAR.TAR_ID = TEX.TAR_ID 
      JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TEX.TAP_ID = TAP.TAP_ID 
    WHERE TAR_TAREA <> TAP_DESCRIPCION) TMP 
  ON (TAR.TAR_ID = TMP.TAR_ID) 
  WHEN MATCHED THEN 
    UPDATE SET TAR.TAR_TAREA = TMP.TAP_DESCRIPCION]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE CLI_CLIENTES SET BORRADO=1]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAA_GESTOR_ADICIONAL_ASUNTO (GAA_ID, ASU_ID, USD_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
SELECT S_GAA_GESTOR_ADICIONAL_ASUNTO.NEXTVAL, asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID, 
    BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,0, 'CARGA_PCO', SYSDATE, 0 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PRC ON asu.ASU_ID_EXTERNO=CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME=CNV_AUX_ALTA_PRC.COD_LETRADO 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID 
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'GEXT']';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAA_GESTOR_ADICIONAL_ASUNTO (GAA_ID, ASU_ID, USD_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
SELECT S_GAA_GESTOR_ADICIONAL_ASUNTO.NEXTVAL, asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID, 
    BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,0, 'CARGA_PCO', SYSDATE, 0 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PRC ON asu.ASU_ID_EXTERNO=CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME=CNV_AUX_ALTA_PRC.COD_PROCURADOR 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID 
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'PROC' 
  WHERE NOT EXISTS (SELECT 1 FROM GAA_GESTOR_ADICIONAL_ASUNTO gaa 
            WHERE gaa.asu_id = asu.asu_id and gaa.dd_tge_id = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'PROC'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAA_GESTOR_ADICIONAL_ASUNTO (GAA_ID, ASU_ID, USD_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
SELECT S_GAA_GESTOR_ADICIONAL_ASUNTO.NEXTVAL, asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID, 
    BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,0, 'CARGA_PCO', SYSDATE, 0 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PCO cnv ON asu.ASU_ID_EXTERNO=cnv.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME=cnv.COD_PREPARADORDOC 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID 
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'PREDOC' 
  WHERE NOT EXISTS (SELECT 1 FROM GAA_GESTOR_ADICIONAL_ASUNTO gaa 
            WHERE gaa.asu_id = asu.asu_id and gaa.dd_tge_id = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'PREDOC'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAA_GESTOR_ADICIONAL_ASUNTO (GAA_ID, ASU_ID, USD_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
SELECT S_GAA_GESTOR_ADICIONAL_ASUNTO.NEXTVAL, asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID, 
    BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,0, 'CARGA_PCO', SYSDATE, 0 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PCO cnv ON asu.ASU_ID_EXTERNO=cnv.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME='SUP_PCO'
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID 
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'SUP_PCO' 
  WHERE NOT EXISTS (SELECT 1 FROM GAA_GESTOR_ADICIONAL_ASUNTO gaa 
            WHERE gaa.asu_id = asu.asu_id and gaa.dd_tge_id = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'SUP_PCO'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAH_GESTOR_ADICIONAL_HISTORICO gah (gah.GAH_ID, gah.GAH_ASU_ID, gah.GAH_GESTOR_ID, gah.GAH_FECHA_DESDE, gah.GAH_TIPO_GESTOR_ID, usuariocrear, fechacrear)
SELECT s_GAH_GESTOR_ADIC_HISTORICO.NEXTVAL ,asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID ,sysdate, BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,'CARGA_PCO', SYSDATE 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PRC ON asu.ASU_ID_EXTERNO=CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME=CNV_AUX_ALTA_PRC.COD_LETRADO 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID 
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'GEXT' 
  WHERE NOT EXISTS (SELECT 1 FROM GAH_GESTOR_ADICIONAL_HISTORICO gaa 
            WHERE gaa.gah_asu_id = asu.asu_id and gaa.GAH_TIPO_GESTOR_ID = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'GEXT'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAH_GESTOR_ADICIONAL_HISTORICO gah (gah.GAH_ID, gah.GAH_ASU_ID, gah.GAH_GESTOR_ID, gah.GAH_FECHA_DESDE, gah.GAH_TIPO_GESTOR_ID, usuariocrear, fechacrear)
SELECT s_GAH_GESTOR_ADIC_HISTORICO.NEXTVAL ,asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID ,sysdate, BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,'CARGA_PCO', SYSDATE 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PRC ON asu.ASU_ID_EXTERNO=CNV_AUX_ALTA_PRC.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME=CNV_AUX_ALTA_PRC.COD_PROCURADOR 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID 
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'PROC' 
  WHERE NOT EXISTS (SELECT 1 FROM GAH_GESTOR_ADICIONAL_HISTORICO gaa 
            WHERE gaa.gah_asu_id = asu.asu_id and gaa.GAH_TIPO_GESTOR_ID = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'PROC'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAH_GESTOR_ADICIONAL_HISTORICO gah (gah.GAH_ID, gah.GAH_ASU_ID, gah.GAH_GESTOR_ID, gah.GAH_FECHA_DESDE, gah.GAH_TIPO_GESTOR_ID, usuariocrear, fechacrear)
SELECT s_GAH_GESTOR_ADIC_HISTORICO.NEXTVAL ,asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID ,sysdate, BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,'CARGA_PCO', SYSDATE 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PRC CNV ON asu.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME=CNV.COD_LETRADO 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID  AND USD_GESTOR_DEFECTO=1
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'PREDOC' 
  WHERE NOT EXISTS (SELECT 1 FROM GAH_GESTOR_ADICIONAL_HISTORICO gaa 
            WHERE gaa.gah_asu_id = asu.asu_id and gaa.GAH_TIPO_GESTOR_ID = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'PREDOC'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO GAH_GESTOR_ADICIONAL_HISTORICO gah (gah.GAH_ID, gah.GAH_ASU_ID, gah.GAH_GESTOR_ID, gah.GAH_FECHA_DESDE, gah.GAH_TIPO_GESTOR_ID, usuariocrear, fechacrear)
SELECT s_GAH_GESTOR_ADIC_HISTORICO.NEXTVAL ,asu.ASU_ID ,USD_USUARIOS_DESPACHOS.USD_ID ,sysdate, BANKMASTER.dd_tge_tipo_gestor.DD_TGE_ID ,'CARGA_PCO', SYSDATE 
  FROM ASU_ASUNTOS asu 
    INNER JOIN CNV_AUX_ALTA_PRC CNV ON asu.ASU_ID_EXTERNO=CNV.CODIGO_PROCEDIMIENTO_NUSE 
    INNER JOIN BANKMASTER.USU_USUARIOS ON USU_USUARIOS.USU_USERNAME='SUP_PCO' 
    INNER JOIN USD_USUARIOS_DESPACHOS ON USU_USUARIOS.USU_ID=USD_USUARIOS_DESPACHOS.USU_ID  AND USD_GESTOR_DEFECTO=1
    INNER JOIN BANKMASTER.dd_tge_tipo_gestor ON dd_tge_codigo = 'SUP_PCO' 
  WHERE NOT EXISTS (SELECT 1 FROM GAH_GESTOR_ADICIONAL_HISTORICO gaa 
            WHERE gaa.gah_asu_id = asu.asu_id and gaa.GAH_TIPO_GESTOR_ID = 
              (SELECT dd_tge_id FROM BANKMASTER.dd_tge_tipo_gestor WHERE dd_tge_codigo = 'SUP_PCO'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[MERGE INTO asu_asuntos asu USING (select tmp_asu.asu_id, tmp_asu.num_contrato || '-' || tmp_asu.nom_persona nuevo_nombre from
  (select distinct asu.asu_id, cnt_contrato num_contrato, tmp_per.nom_persona, TMP_DEUDA.cnt_id, TMP_DEUDA.deuda, 
    ROW_NUMBER () OVER (PARTITION BY asu.asu_id ORDER BY TMP_DEUDA.deuda DESC) num_fila
  from cnt_contratos cnt
  inner join cex_contratos_expediente cex on cex.cnt_id=cnt.cnt_id
  inner join prc_cex pc on pc.cex_id=cex.cex_id
  inner join prc_procedimientos prc on prc.prc_id=pc.prc_id
  inner join asu_asuntos asu on asu.asu_id=prc.asu_id
  inner join ( SELECT CNT_ID, 
                (MOV_POS_VIVA_NO_VENCIDA + MOV_POS_VIVA_VENCIDA + MOV_INT_REMUNERATORIOS + MOV_INT_MORATORIOS + MOV_GASTOS + MOV_COMISIONES + MOV_IMPUESTOS) DEUDA 
                  FROM (SELECT mov.CNT_ID ,ROW_NUMBER () OVER (PARTITION BY mov.cnt_id ORDER BY mov.mov_fecha_extraccion DESC) rn ,
                    MOV.MOV_POS_VIVA_NO_VENCIDA,MOV.MOV_POS_VIVA_VENCIDA ,MOV.MOV_INT_REMUNERATORIOS ,MOV.MOV_INT_MORATORIOS ,
                    MOV.MOV_GASTOS ,MOV.MOV_COMISIONES ,MOV.MOV_IMPUESTOS FROM MOV_MOVIMIENTOS mov) tmp_mov 
                  WHERE rn = 1) TMP_DEUDA on tmp_deuda.cnt_id=cnt.cnt_id
  inner join ( SELECT /*+ MATERIALIZE */ (PER_DOC_ID || ' ' || PER_NOMBRE || ' ' || PER_APELLIDO1 || ' ' || PER_APELLIDO2) NOM_PERSONA, 
                CNT_ID
          FROM 
            ( SELECT PER.PER_DOC_ID, PER.PER_NOMBRE, PER.PER_APELLIDO1, PER.PER_APELLIDO2, 
                ROW_NUMBER() OVER (PARTITION BY CPE.CNT_ID ORDER BY CPE.CPE_ORDEN ASC) RN_MIN_ORDEN, CPE.CNT_ID 
                    FROM CPE_CONTRATOS_PERSONAS CPE 
                    INNER JOIN DD_TIN_TIPO_INTERVENCION TIN ON CPE.DD_TIN_ID = TIN.DD_TIN_ID AND TIN.DD_TIN_TITULAR = 1 
                    INNER JOIN PER_PERSONAS PER ON CPE.PER_ID = PER.PER_ID) 
              WHERE RN_MIN_ORDEN = 1) tmp_per on tmp_per.cnt_id=cnt.cnt_id                
  where asu.usuariocrear='CARGA_PCO'
  ORDER BY asu.asu_id, TMP_DEUDA.cnt_id, TMP_DEUDA.deuda desc) tmp_asu
  where num_fila=1) tmp_asu2
ON (asu.asu_id=tmp_asu2.asu_id)
WHEN MATCHED THEN 
  UPDATE SET asu.asu_nombre = substr(asu.asu_id || '-' || tmp_asu2.nuevo_nombre,1,50)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[UPDATE prc_procedimientos SET dd_tac_id = (SELECT dd_tac_id FROM dd_tac_tipo_actuacion WHERE dd_tac_codigo = 'PCO') 
  WHERE prc_id IN 
    (SELECT prc_id FROM prc_procedimientos 
        WHERE dd_tac_id IS NULL 
        and dd_tpo_id IN (SELECT DD_TPO_ID FROM DD_TPO_TIPO_PROCEDIMIENTO WHERE DD_TPO_CODIGO='PCO'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  DBMS_OUTPUT.PUT_LINE('***************************');
  DBMS_OUTPUT.PUT_LINE('BLOQUE 6: Precontencioso');
  DBMS_OUTPUT.PUT_LINE('***************************');

  V_SQL := q'[INSERT INTO PCO_PRC_PROCEDIMIENTOS (PCO_PRC_ID, PRC_ID, PCO_PRC_TIPO_PRC_PROP, PCO_PRC_TIPO_PRC_INICIADO, PCO_PRC_PRETURNADO, 
    PCO_PRC_NUM_EXP_EXT, PCO_PRC_NOM_EXP_JUD, PCO_PRC_CNT_PRINCIPAL, PCO_PRC_NUM_EXP_INT, DD_PCO_PTP_ID, 
    USUARIOCREAR, FECHACREAR)
SELECT S_PCO_PRC_PROCEDIMIENTOS.NEXTVAL, PRO.PRC_ID, TPO.DD_TPO_ID, null, PCO.PRETURNADO, 
    PRC.CODIGO_PROCEDIMIENTO_NUSE, PRC.NUMERO_EXP_NUSE, null, null, TPR.DD_PCO_PTP_ID,
    'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    LEFT JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    LEFT JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID
    LEFT JOIN DD_TPO_TIPO_PROCEDIMIENTO TPO ON TPO.DD_TPO_CODIGO='&tipo_procedimiento'
    LEFT JOIN DD_PCO_PRC_TIPO_PREPARACION TPR ON PCO.TIPO_PREPARACION=TPR.DD_PCO_PTP_CODIGO
  WHERE NOT EXISTS (SELECT 1 FROM PCO_PRC_PROCEDIMIENTOS P2 WHERE P2.PCO_PRC_NUM_EXP_EXT=PCO.CODIGO_PROCEDIMIENTO_NUSE)
    AND  PCO.CODIGO_PROCEDIMIENTO_NUSE IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PCO_PRC_HEP_HISTOR_EST_PREP (PCO_PRC_HEP_ID, PCO_PRC_ID, DD_PCO_PEP_ID, PCO_PRC_HEP_FECHA_INCIO, PCO_PRC_HEP_FECHA_FIN, USUARIOCREAR, FECHACREAR)
SELECT S_PCO_PRC_HEP_HIST_EST_PREP.NEXTVAL, PRO.PCO_PRC_ID, PEP.DD_PCO_PEP_ID, SYSDATE, SYSDATE, 
    'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    LEFT JOIN PCO_PRC_PROCEDIMIENTOS PRO ON PRO.PCO_PRC_NUM_EXP_EXT=PCO.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN DD_PCO_PRC_ESTADO_PREPARACION PEP ON PEP.DD_PCO_PEP_CODIGO = 'PT'
  WHERE PRO.PCO_PRC_ID NOT IN (SELECT PCO_PRC_ID FROM PCO_PRC_HEP_HISTOR_EST_PREP)
    AND PRO.PCO_PRC_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PCO_PRC_HEP_HISTOR_EST_PREP (PCO_PRC_HEP_ID, PCO_PRC_ID, DD_PCO_PEP_ID, PCO_PRC_HEP_FECHA_INCIO, USUARIOCREAR, FECHACREAR)
SELECT S_PCO_PRC_HEP_HIST_EST_PREP.NEXTVAL, PRO.PCO_PRC_ID, PEP.DD_PCO_PEP_ID, SYSDATE,
    'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    LEFT JOIN PCO_PRC_PROCEDIMIENTOS PRO ON PRO.PCO_PRC_NUM_EXP_EXT=PCO.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN DD_PCO_PRC_ESTADO_PREPARACION PEP ON PEP.DD_PCO_PEP_CODIGO = 'PR'
  WHERE PRO.PCO_PRC_ID NOT IN (SELECT PCO_PRC_ID FROM PCO_PRC_HEP_HISTOR_EST_PREP H INNER JOIN DD_PCO_PRC_ESTADO_PREPARACION E ON e.dd_pco_pep_id=h.dd_pco_pep_id where e.dd_pco_pep_codigo='PR')
    AND PRO.PCO_PRC_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PCO_DOC_DOCUMENTOS (PCO_DOC_PDD_ID, PCO_PRC_ID, DD_PCO_DED_ID, DD_PCO_DTD_ID, DD_TFA_ID, PCO_DOC_PDD_UG_ID, PCO_DOC_PDD_UG_DESC, USUARIOCREAR, FECHACREAR)
SELECT S_PCO_DOC_DOCUMENTOS.NEXTVAL, PPCO.PCO_PRC_ID, DED.DD_PCO_DED_ID, DTD.DD_PCO_DTD_ID, 
    CONF.DD_TFA_ID, CNT.CNT_ID, CNT.CNT_CONTRATO, 
    'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    INNER JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN DD_PCO_DOC_ESTADO DED ON DED.DD_PCO_DED_CODIGO = 'PS'
    INNER JOIN DD_PCO_DOC_UNIDADGESTION DTD ON DTD.DD_PCO_DTD_CODIGO = 'CO'
    INNER JOIN CNV_AUX_ALTA_PRC_CNT C ON C.CODIGO_PROCEDIMIENTO=PRC.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN CNV_TMP_CNT_ID TCNT ON C.NUMERO_CONTRATO=TCNT.NUMERO_CONTRATO
    INNER JOIN CNT_CONTRATOS CNT ON CNT.CNT_ID=TCNT.CNT_ID
    INNER JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    INNER JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID
    INNER JOIN PCO_PRC_PROCEDIMIENTOS PPCO ON PPCO.PRC_ID=PRO.PRC_ID
    INNER JOIN PCO_CDE_CONF_TFA_TIPOENTIDAD CONF ON CONF.DD_PCO_DTD_ID=DTD.DD_PCO_DTD_ID AND CONF.DD_TPO_ID=PPCO.PCO_PRC_TIPO_PRC_PROP
  WHERE PPCO.PCO_PRC_ID NOT IN (SELECT PCO_PRC_ID FROM PCO_DOC_DOCUMENTOS)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

V_SQL := q'[INSERT INTO PCO_DOC_DOCUMENTOS (PCO_DOC_PDD_ID, PCO_PRC_ID, DD_PCO_DED_ID, DD_PCO_DTD_ID, DD_TFA_ID, PCO_DOC_PDD_UG_ID, PCO_DOC_PDD_UG_DESC, USUARIOCREAR, FECHACREAR)
SELECT S_PCO_DOC_DOCUMENTOS.NEXTVAL,PPCO.PCO_PRC_ID, DED.DD_PCO_DED_ID, DTD.DD_PCO_DTD_ID, 
    CONF.DD_TFA_ID, PER.PER_ID,  PER.PER_NOM50,
    'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    INNER JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN CNV_AUX_ALTA_PRC_CNT C ON C.CODIGO_PROCEDIMIENTO=PRC.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN CNV_TMP_CNT_ID TCNT ON C.NUMERO_CONTRATO=TCNT.NUMERO_CONTRATO
    INNER JOIN CPE_CONTRATOS_PERSONAS CPE ON CPE.CNT_ID=TCNT.CNT_ID
    INNER JOIN PER_PERSONAS PER ON PER.PER_ID=CPE.PER_ID
    INNER JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    INNER JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID
    INNER JOIN PCO_PRC_PROCEDIMIENTOS PPCO ON PPCO.PRC_ID=PRO.PRC_ID
    INNER JOIN DD_PCO_DOC_UNIDADGESTION DTD ON DTD.DD_PCO_DTD_CODIGO = 'PE'
    INNER JOIN PCO_CDE_CONF_TFA_TIPOENTIDAD CONF ON CONF.DD_PCO_DTD_ID=DTD.DD_PCO_DTD_ID AND CONF.DD_TPO_ID=PPCO.PCO_PRC_TIPO_PRC_PROP
    INNER JOIN DD_PCO_DOC_ESTADO DED ON DED.DD_PCO_DED_CODIGO = 'PS'
  WHERE not exists (SELECT 1 FROM PCO_DOC_DOCUMENTOS PCO2 WHERE PCO2.PCO_PRC_ID=PPCO.PCO_PRC_ID AND PCO2.dd_pco_ded_id = 
      (SELECT DD_PCO_DED_ID FROM DD_PCO_DOC_UNIDADGESTION WHERE DD_PCO_DED_CODIGO='PE'))]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PCO_LIQ_LIQUIDACIONES (PCO_LIQ_ID, PCO_PRC_ID, DD_PCO_LIQ_ID, CNT_ID, USUARIOCREAR, FECHACREAR)
SELECT S_PCO_LIQ_LIQUIDACIONES.NEXTVAL, PPCO.PCO_PRC_ID, LE.DD_PCO_LIQ_ID, 
    CNT.CNT_ID, 'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    INNER JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN DD_PCO_LIQ_ESTADO LE ON LE.DD_PCO_LIQ_CODIGO = 'PEN'
    INNER JOIN CNV_AUX_ALTA_PRC_CNT C ON C.CODIGO_PROCEDIMIENTO=PRC.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN CNV_TMP_CNT_ID TCNT ON C.NUMERO_CONTRATO=TCNT.NUMERO_CONTRATO
    INNER JOIN CNT_CONTRATOS CNT ON CNT.CNT_ID=TCNT.CNT_ID
    INNER JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    INNER JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID
    INNER JOIN PCO_PRC_PROCEDIMIENTOS PPCO ON PPCO.PRC_ID=PRO.PRC_ID
  WHERE PPCO.PCO_PRC_ID NOT IN (SELECT PCO_PRC_ID FROM PCO_LIQ_LIQUIDACIONES)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO PCO_BUR_BUROFAX (PCO_BUR_BUROFAX_ID, PCO_PRC_ID, PER_ID, DD_PCO_BFE_ID, CNT_ID, DD_TIN_ID, USUARIOCREAR, FECHACREAR)
SELECT S_PCO_BUR_BUROFAX_ID.NEXTVAL, PPCO.PCO_PRC_ID, CPE.PER_ID, BFE.DD_PCO_BFE_ID, 
    CPE.CNT_ID, CPE.DD_TIN_ID, 'CARGA_PCO', SYSDATE
  FROM CNV_AUX_ALTA_PRC PRC 
    INNER JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN CNV_AUX_ALTA_PRC_CNT C ON C.CODIGO_PROCEDIMIENTO=PRC.CODIGO_PROCEDIMIENTO_NUSE
    INNER JOIN CNV_TMP_CNT_ID TCNT ON C.NUMERO_CONTRATO=TCNT.NUMERO_CONTRATO
    INNER JOIN CPE_CONTRATOS_PERSONAS CPE ON CPE.CNT_ID=TCNT.CNT_ID
    INNER JOIN DD_PCO_BFE_ESTADO BFE ON BFE.DD_PCO_BFE_CODIGO='KO'
    INNER JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    INNER JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID
    INNER JOIN PCO_PRC_PROCEDIMIENTOS PPCO ON PPCO.PRC_ID=PRO.PRC_ID
  WHERE PPCO.PCO_PRC_ID NOT IN (SELECT PCO_PRC_ID FROM PCO_BUR_BUROFAX)]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO TAR_TAREAS_NOTIFICACIONES (TAR_ID, EXP_ID, ASU_ID, DD_EST_ID, DD_EIN_ID, DD_STA_ID, TAR_CODIGO, TAR_TAREA, TAR_DESCRIPCION, 
    TAR_FECHA_INI, TAR_EN_ESPERA, TAR_ALERTA, TAR_EMISOR, 
    VERSION, USUARIOCREAR, FECHACREAR, BORRADO, PRC_ID, DTYPE, NFA_TAR_REVISADA)
SELECT S_TAR_TAREAS_NOTIFICACIONES.NEXTVAL, null, PRO.ASU_ID, '6', '5', DD_STA_ID, '1', TAP_DESCRIPCION, TAP_DESCRIPCION, 
    SYSDATE, '0', '0', 'AUTOMATICA', '0', 
    'CARGA_PCO', SYSDATE, '0', PRC_ID, 'EXTTareaNotificacion', '0' 
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    LEFT JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    LEFT JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID 
    LEFT JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TAP.TAP_CODIGO='PCO_GenerarLiq']';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO TAR_TAREAS_NOTIFICACIONES (TAR_ID, EXP_ID, ASU_ID, DD_EST_ID, DD_EIN_ID, DD_STA_ID, TAR_CODIGO, TAR_TAREA, TAR_DESCRIPCION, 
    TAR_FECHA_INI, TAR_EN_ESPERA, TAR_ALERTA, TAR_EMISOR, 
    VERSION, USUARIOCREAR, FECHACREAR, BORRADO, PRC_ID, DTYPE, NFA_TAR_REVISADA)
SELECT S_TAR_TAREAS_NOTIFICACIONES.NEXTVAL, null, PRO.ASU_ID, '6', '5', DD_STA_ID, '1', TAP_DESCRIPCION, TAP_DESCRIPCION, 
    SYSDATE, '0', '0', 'AUTOMATICA', '0', 
    'CARGA_PCO', SYSDATE, '0', PRC_ID, 'EXTTareaNotificacion', '0' 
  FROM CNV_AUX_ALTA_PRC PRC 
    LEFT JOIN CNV_AUX_ALTA_PCO PCO ON PRC.CODIGO_PROCEDIMIENTO_NUSE=PCO.CODIGO_PROCEDIMIENTO_NUSE
    LEFT JOIN ASU_ASUNTOS ASU ON PRC.CODIGO_PROCEDIMIENTO_NUSE=ASU.ASU_ID_EXTERNO 
    LEFT JOIN PRC_PROCEDIMIENTOS PRO ON PRO.ASU_ID=ASU.ASU_ID 
    LEFT JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TAP.TAP_CODIGO='PCO_SolicitarDoc']';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[INSERT INTO TEX_TAREA_EXTERNA(TEX_ID, TAR_ID, TAP_ID, TEX_DETENIDA, VERSION, USUARIOCREAR, FECHACREAR, BORRADO, TEX_CANCELADA, TEX_NUM_AUTOP, DTYPE)
SELECT S_TEX_TAREA_EXTERNA.NEXTVAL, TAR_ID, TAP_ID, '0', '0', 'CARGA_PCO', SYSDATE, '0', '0', '0', 'EXTTareaExterna' 
  FROM TAR_TAREAS_NOTIFICACIONES TAR 
    LEFT JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TAR.TAR_TAREA=TAP.TAP_CODIGO 
  WHERE TAR.USUARIOCREAR = 'CARGA_PCO' 
    AND TAR.TAR_ID NOT IN (SELECT TEX.TAR_ID FROM TEX_TAREA_EXTERNA TEX WHERE TAR_ID IS NOT NULL) 
    AND TAR.TAR_ID IS NOT NULL]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  V_SQL := q'[merge into tex_tarea_externa te using (select tex.tex_id, pi.roottoken_ from prc_procedimientos p
    inner join BANKMASTER.jbpm_processinstance pi on pi.id_=p.prc_process_bpm
    inner join tar_tareas_notificaciones tar on tar.prc_id=p.prc_id
    inner join tex_tarea_externa tex on tex.tar_id=tar.tar_id
    where p.usuariocrear='CARGA_PCO') q
on (q.tex_id=te.tex_id)
when matched THEN
  update set te.tex_token_id_bpm=q.roottoken_]';
  EXECUTE IMMEDIATE V_SQL; 
  DBMS_OUTPUT.PUT_LINE(RPAD(substr(V_SQL, 1, 60), 60, ' ') || '...' || sql%rowcount);

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('[FIN] 99-CreacionAsuntosPco-Bankia.sql');    
   
EXCEPTION
     WHEN OTHERS THEN
          ERR_NUM := SQLCODE;
          ERR_MSG := SQLERRM;
          DBMS_OUTPUT.put_line('[ERROR] Se ha producido un error en la ejecuciÃ³n:'||TO_CHAR(ERR_NUM));
          DBMS_OUTPUT.put_line('-----------------------------------------------------------'); 
          DBMS_OUTPUT.put_line(ERR_MSG);
          ROLLBACK;
          RAISE;   
END;
/

EXIT;