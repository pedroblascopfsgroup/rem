CREATE TABLE LOAD_CICLOS_NUSE_STAGE_1 (
  ID_EXPEDIENTE VARCHAR2(16 CHAR)
  ,TIPO_FUNCION VARCHAR2(1 CHAR)
  ,CODIGO_SERVICIO VARCHAR2(2 CHAR)
  ,CODIGO_TIPO_GESTION VARCHAR2(3 CHAR)
  ,DESCRIPCION_TIPO_GESTION VARCHAR2(50 CHAR)
  ,CODIGO_SITUACION_NUSE VARCHAR2(6 CHAR)
  ,FECHA_EXTRACCION VARCHAR2(8 CHAR)
  ,FECHA_DATO VARCHAR2(8 CHAR)
  ,CODIGO_ENTIDAD VARCHAR2(4 CHAR)
  ,CODIGO_PROPIETARIO VARCHAR2(5 CHAR)
  ,TIPO_PRODUCTO  VARCHAR2(5 CHAR)
  ,NUMERO_CONTRATO VARCHAR2(17 CHAR)
  ,NUMERO_ESPEC VARCHAR2(15 CHAR)
  ,CODIGO_AGENCIA VARCHAR2(5 CHAR)
  ,FECHA_ALTA_AGENCIA VARCHAR2(8 CHAR)
  ,FECHA_BAJA_AGENCIA VARCHAR2(8 CHAR)
  ,MOTIVO_BAJA  VARCHAR2(3 CHAR)
);



insert into LOAD_CICLOS_NUSE_STAGE_1 (CODIGO_PROPIETARIO, TIPO_PRODUCTO, NUMERO_CONTRATO, NUMERO_ESPEC, CODIGO_AGENCIA, DESCRIPCION_TIPO_GESTION, FECHA_BAJA_AGENCIA, ID_EXPEDIENTE)
select substr(cnt.cnt_contrato, 1,5) codigo_propietario
  , substr(cnt.cnt_contrato, 6,5) tipo_producto
  , substr(cnt.cnt_contrato, 11,17) numero_contrato
  , substr(cnt.cnt_contrato, 28,15) num_espec
  , (select rcf_age_codigo from rcf_age_agencias where rcf_age_id = (mod(cnt.cnt_id, 5) + (select min(rcf_age_id) from rcf_age_agencias)))
  , 'Telecobro Pequeño Deudor' tipo_gestion
  , '00000000' fecha_baja_agencia
  , S_EXP_EXPEDIENTES.NEXTVAL 
from cnt_contratos cnt;



COMMIT;



-- ----------------------------------------------------------------------------
-- SCRIPTS DE MIGRACIÓN DE NUSE A RECOVERY
-- ORDEN DEL SCRIPT: 1
-- SCRIPT: Limpieza de la configuración de Recobro
-- AUTOR: Guillem Pascual Serra   
-- EMPRESA: PFSGROUP
-- -----------------------------------------------------------------------------

-- Limpiamos la tabla de control de procedimientos
DELETE FROM CCP_CONTROL_CALIDAD_PROC;

-- Limpiamos la tabla de control de accesos
DELETE FROM CCA_CONTROL_CALIDAD;

-- Limpiamos la tabla de historico de accesos
DELETE FROM HAC_HISTORICO_ACCESOS;

-- Limpiamos la tabla de relaciones entre personas y expedientes
DELETE FROM PEX_PERSONAS_EXPEDIENTE;

-- Limpiamos la tabla de ciclos de recobro de personas
DELETE FROM CRP_CICLO_RECOBRO_PER;

-- Limpiamos la tabla de ciclos de recobro de contratos
DELETE FROM CRC_CICLO_RECOBRO_CNT;

-- Limpiamos la tabla de ciclos de recobro de notificaciones
DELETE FROM CRT_CICLO_RECOBRO_TAREA_NOTI;

-- Limpiamos la tabla de ciclos de recobro de expedientes
DELETE FROM CRE_CICLO_RECOBRO_EXP;

-- Limpiamos la tabla de relaciones de contratos y expedientes
DELETE FROM CEX_CONTRATOS_EXPEDIENTE;

-- Limpiamos la tabla de tareas y notificaciones
DELETE FROM TAR_TAREAS_NOTIFICACIONES;

-- Limpiamos la tabla de expedientes de recobro
DELETE FROM EXR_EXPEDIENTE_RECOBRO;

-- Limpiamos la tabla de expedientes
DELETE FROM EXP_EXPEDIENTES;

-- Limpiamos la tabla de ranking y subcarteras
DELETE FROM RCF_SUR_SUBCARTERA_RANKING;

-- Limpiamos la tabla de relaciones de subcarteras y agencias
DELETE FROM RCF_SUA_SUBCARTERA_AGENCIAS;  

-- Limpiamos la tabla de procesos de facturación
DELETE FROM PFS_PROC_FAC_SUBCARTERA;

-- Limpiamos la tabla de subcarteras
DELETE FROM RCF_SCA_SUBCARTERA;

-- Limpiamos la tabla de relaciones de esquemas y carteras
DELETE FROM RCF_ESC_ESQUEMA_CARTERAS;

-- Limpiamos la tabla de metas volantes
DELETE FROM RCF_MVL_META_VOLANTE;

-- Limpiamos la tabla de modelos de metas volantes 
DELETE FROM RCF_ITV_ITI_METAS_VOLANTES;

-- Limpiamos la tabla de tarifas de cobro por tramos de facturación
DELETE FROM RCF_TCT_TARIF_COBRO_TRAMO;

-- Limpiamos la tabla de tramos de facturación
DELETE FROM RCF_TRF_TRAMO_FACTURACION;

-- Limpiamos la tabla de tarifas por conceptos de cobros
DELETE FROM RCF_TCC_TARIFAS_CONCEP_COBRO;

-- Limpiamos la tabla de tipos de cobros de facturación
DELETE FROM RCF_TCF_TIPO_COBRO_FACTURA;

-- Limpiamos la tabla de correctores de facturación
DELETE FROM RCF_COF_CORRECTOR_FACTURA;

-- Limpiamos la tabla de modelos de facturación
DELETE FROM RCF_MFA_MODELOS_FACTURACION;

-- Limpiamos la tabla de modelos de políticas de acuerdos
DELETE FROM RCF_POA_POLITICA_ACUERDOS;

-- Limpiamos la tabla de políticas de acuerdos y palancas
DELETE FROM RCF_PAA_POL_ACUERDOS_PALANCAS;

-- Limpiamos la tabla de las agencias de recobro
DELETE FROM RCF_AGE_AGENCIAS;

-- Limpiamos la tabla de simulaciones de esquemas
DELETE FROM RCF_ESS_ESQUEMA_SIMULACION;

-- Limpiamos la tabla de esquemas
DELETE FROM RCF_ESQ_ESQUEMA;

-- Limpiamos la tabla de carteras
DELETE FROM RCF_CAR_CARTERA;

-- Limpiamos la tabla de variables de ranking
DELETE FROM RCF_MRV_MODELO_RANKING_VARS;

-- Limpiamos la tabla de modelos de ranking
DELETE FROM RCF_MOR_MODELO_RANKING;

COMMIT;


-- ----------------------------------------------------------------------------
-- SCRIPTS DE MIGRACIÓN DE NUSE A RECOVERY
-- ORDEN DEL SCRIPT: 2
-- SCRIPT: Creación de la configuración inicial para la plataforma de Recobro
-- AUTOR: Guillem Pascual Serra   
-- EMPRESA: PFSGROUP
-- OBSERVACIONES: 
--   Se toma como usuario de Sistema para la migración el usu_id=1
--   Se toma como Rule Definition por defecto la REGLA GENERICA
-- -----------------------------------------------------------------------------

-- Insertamos las agencias de recobro (PENDIENTE DE RECIBIR LA INFORMACIÓN DE LAS AGENCIAS)
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '107', 'ACUERDO', '8944788-L', 'MIGUEL', 'FERNANDEZ', 'HERRANZ',
  'miguel.fernandez@acuerdosj.com', '902945992', 0, 'MIG-NUSE', sysdate, 0);
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '105', 'ADARVE', '5402690-J', 'ALFONSO', 'MARTIN', 'CANENCIA',
  'alfonso.martin@adarvecorporacion.com', '915913058', 0, 'MIG-NUSE', sysdate, 0);  
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '001', 'AUSECO', '5279178-B', 'MIGUEL ANGEL', 'SANCHEZ', 'QUINTANA',
  'msquintana@geslico.es', '918293304', 0, 'MIG-NUSE', sysdate, 0);    
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '106', 'COBRALIA', '46766527-Y', 'CRISTIAN', 'FAIBELLA', 'BOTET',
  'cfaibella@cobralia.com', '934470642', 0, 'MIG-NUSE', sysdate, 0);      
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '115', 'ESCO', '38896874-Q', 'DAVID', 'MARTIN', 'TINAQUERO',
  'informatica@escoexpansion.com', '608504269', 0, 'MIG-NUSE', sysdate, 0);      
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '005', 'GESCOBRO', '7237285-J', 'JOSE CARLOS', 'RUBIO', 'RODRIGUEZ',
  'jcrubio@gescobro.com', '932296800', 0, 'MIG-NUSE', sysdate, 0);     
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '002', 'GESIF', '38802912-A', 'JOAN', 'TOLEDO', 'MOYA',
  'jtoledo@gesif.es', '934123335', 0, 'MIG-NUSE', sysdate, 0);    
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '004', 'GSS', '02888706-K', 'PABLO', 'PÉREZ-PIÑAR', 'LÓPEZ',
  'paperez@grupogss.com', '912100400 ext: 50154', 0, 'MIG-NUSE', sysdate, 0);      

Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '006', 'LUCANIA', '14254853-M', 'JAGOBA JOSEBA', 'GUTIÉRREZ', 'FERNÁNDEZ',
  'yagoba.gutierrez@lucaniagestion.com', '607782508', 0, 'MIG-NUSE', sysdate, 0);      
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '502', 'MULTIGESTIÓN', '07451218-T', 'SEGUNDO', 'CASTAÑARES', 'TORET',
  'segundo@multigestion.es', '914444834', 0, 'MIG-NUSE', sysdate, 0);   
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '007', 'SPAND', '52364432-X', 'DANIEL', 'ABAD', 'MOLINA',
  'd.abad@grupoespand.com', '913196785', 0, 'MIG-NUSE', sysdate, 0);     
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '100', 'TELEPERFORMANCE', '4846437-S', 'LAURA', 'MÁRQUEZ', 'DEL CAÑO',
  'lmarquez@teleperformance.es', '902146146 ext: 1326', 0, 'MIG-NUSE', sysdate, 0);       

Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '104', 'INTRUM', '50335512-N', 'MARIA JOSE', 'OTEGUI', 'MENDIONDO',
  'm.otegui@es.intrum.com', '914234600 ext 8130', 0, 'MIG-NUSE', sysdate, 0);  
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '003', 'TEAM 4', '09427203-D', 'MADIA', 'FERNÁNDEZ-TRUJILLO', 'GONZÁLEZ',
  'nadia.trujillo@arvato.com', '917901763', 0, 'MIG-NUSE', sysdate, 0);     
  
Insert into RCF_AGE_AGENCIAS
  (RCF_AGE_ID, RCF_AGE_CODIGO, RCF_AGE_NOMBRE, RCF_AGE_NIF, RCF_AGE_CONTACTO_NOMBRE, RCF_AGE_CONTACTO_APE1, RCF_AGE_CONTACTO_APE2,
  RCF_AGE_CONTACTO_MAIL, RCF_AGE_CONTACTO_TELF, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_AGE_AGENCIAS.nextval, '110', 'VERIFICA', '10875789-D', 'SOFÍA', 'GALLEGO', 'MARCILLA',
  'sofia.gallego@verifica-sa.es', '914952776 - Ext.404', 0, 'MIG-NUSE', sysdate, 0);     
    
 -- Creación de las carteras iniciales bloqueadas
 Insert into RCF_CAR_CARTERA
  (RCF_CAR_ID, RCF_CAR_NOMBRE, RCF_CAR_DESCRIPCION, RD_ID, RCF_DD_ECM_ID, 
  RCF_CAR_FECHA_ALTA, USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_CAR_CARTERA.nextval, 'FILTRO GENÉRICO', 'FILTRO GENÉRICO - CARTERA FILTRO CONFIGURACIÓN INICIAL', 
  (select RD_ID from RULE_DEFINITION where RD_NAME = 'REGLA GENERICA'),  
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 
  sysdate, 1, 0, 'MIG-NUSE', sysdate, 0);
 
Insert into RCF_CAR_CARTERA
  (RCF_CAR_ID, RCF_CAR_NOMBRE, RCF_CAR_DESCRIPCION, RD_ID, RCF_DD_ECM_ID, 
  RCF_CAR_FECHA_ALTA, USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_CAR_CARTERA.nextval, 'TELECOBRO', 'TELECOBRO - CARTERA CONFIGURACIÓN INICIAL', 
  (select RD_ID from RULE_DEFINITION where RD_NAME = 'REGLA GENERICA'),  
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 
  sysdate, 1, 0, 'MIG-NUSE', sysdate, 0);

Insert into RCF_CAR_CARTERA
  (RCF_CAR_ID, RCF_CAR_NOMBRE, RCF_CAR_DESCRIPCION, RD_ID, RCF_DD_ECM_ID, 
  RCF_CAR_FECHA_ALTA, USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_CAR_CARTERA.nextval, 'RECOBRO < 210', 'RECOBRO < 210 - CARTERA CONFIGURACIÓN INICIAL', 
  (select RD_ID from RULE_DEFINITION where RD_NAME = 'REGLA GENERICA'),  
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 
  sysdate, 1, 0, 'MIG-NUSE', sysdate, 0);
  
Insert into RCF_CAR_CARTERA
  (RCF_CAR_ID, RCF_CAR_NOMBRE, RCF_CAR_DESCRIPCION, RD_ID, RCF_DD_ECM_ID, 
  RCF_CAR_FECHA_ALTA, USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_CAR_CARTERA.nextval, 'RECOBRO > 210', 'RECOBRO > 210 - CARTERA CONFIGURACIÓN INICIAL', 
  (select RD_ID from RULE_DEFINITION where RD_NAME = 'REGLA GENERICA'),  
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 
  sysdate, 1, 0, 'MIG-NUSE', sysdate, 0);  

-- Creación del modelo de metas volantes
Insert into RCF_ITV_ITI_METAS_VOLANTES
  (RCF_ITV_ID, RCF_ITV_NOMBRE, RCF_ITV_FECHA_ALTA, RCF_ITV_PLAZO_MAX, RCF_ITV_NO_GEST, 
  RCF_DD_ECM_ID, USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_ITV_ITI_METAS_VOLANTES.nextval, 'MODELO DE METAS VOLANTES INICIAL', sysdate, 60, 5, 
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 1, 0, 'MIG-NUSE', sysdate, 0);

-- Creación del modelo de políticas de acuerdo
Insert into RCF_POA_POLITICA_ACUERDOS
  (RCF_POA_ID, RCF_POA_CODIGO, RCF_POA_NOMBRE,RCF_DD_ECM_ID,  USU_ID,
  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_POA_POLITICA_ACUERDOS.nextval, '001', 'POLÍTICA DE ACUERDOS INICIAL', 
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 1, 0, 'MIG-NUSE', sysdate, 0);

-- Creación del modelo de políticas de acuerdos y palancas
Insert into RCF_PAA_POL_ACUERDOS_PALANCAS
  (RCF_PAA_ID, RCF_POA_ID, RCF_STP_ID, RCF_PAA_PRIORIDAD, DD_SIN_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_PAA_POL_ACUER_PALANCAS.nextval, (select rcf_poa_id FROM RCF_POA_POLITICA_ACUERDOS where RCF_POA_CODIGO = '001'),
  (select RCF_STP_ID FROM RCF_STP_SUBTIPO_PALANCA WHERE RCF_STP_CODIGO = 'STP1'), 1, 
  (select DD_SIN_ID FROM BANKMASTER.DD_SIN_SINO WHERE DD_SIN_CODIGO = '01'), 0, 'MIG-NUSE', sysdate, 0);

-- Creación del modelo de ranking inicial y bloqueado
Insert into RCF_MOR_MODELO_RANKING
  (RCF_MOR_ID, RCF_MOR_NOMBRE, RCF_DD_ECM_ID, USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_MOR_MODELO_RANKING.nextval, 'MODELO DE RANKING CONFIGURACIÓN INICIAL',
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 1, 0, 'MIG-NUSE', sysdate, 0);
  
-- Creación de las variables iniciales bloqueadas
Insert into RCF_MRV_MODELO_RANKING_VARS
  (RCF_MRV_ID, RCF_MOR_ID, RCF_DD_VAR_ID, RCF_MRV_COEFICIENTE,
  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_MRV_MODELO_RANKING_VARS.nextval, 
  (select RCF_MOR_ID from RCF_MOR_MODELO_RANKING where RCF_MOR_NOMBRE = 'MODELO DE RANKING CONFIGURACIÓN INICIAL'),
  (select RCF_DD_VAR_ID from RCF_DD_VAR_VARIABLES_RANKING where RCF_DD_VAR_CODIGO = 'EFS'), 100, 0, 'MIG-NUSE', sysdate, 0);
  
-- Creación del modelo de facturación inicial bloqueado con tipo de corrector mejora objetivo del 20%
Insert into RCF_MFA_MODELOS_FACTURACION
  (RCF_MFA_ID, RCF_MFA_NOMBRE, RCF_MFA_DESCRIPCION, RCF_DD_TCO_ID, RCF_MFA_OBJETIVO_RECOBRO,
  RCF_DD_ECM_ID,USU_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_MFA_MODELOS_FACTURACION.nextval, 'MODELO FACTURACIÓN INICIAL', 'MODELO DE FACTURACIÓN INICIAL DE RECOBRO',
  (select RCF_DD_TCO_ID from RCF_DD_TCO_TIPO_CORRECTOR where RCF_DD_TCO_CODIGO = 'MEO'), 20, 
  (select RCF_DD_ECM_ID from RCF_DD_ECM_ESTADO_COMPONENT where RCF_DD_ECM_CODIGO='BLQ'), 1, 0, 'MIG-NUSE', sysdate, 0);

-- Creación de los tipos de cobros de facturas inicales
Insert into RCF_TCF_TIPO_COBRO_FACTURA 
Select S_RCF_TCF_TIPO_COBRO_FACTURA.nextval, 
       (select RCF_MFA_ID from RCF_MFA_MODELOS_FACTURACION where RCF_MFA_NOMBRE = 'MODELO FACTURACIÓN INICIAL'),
       dd_scp_id, 0, 'MIG-NUSE', sysdate, null, null, null, null, 0
from (select scp.DD_SCP_ID from DD_SCP_SUBTIPO_COBRO_PAGO scp /*where tcb.RCF_DD_TCB_FACTURABLE = 1*/);

-- Creación de los tipos de tarifas iniciales
Insert into RCF_TCC_TARIFAS_CONCEP_COBRO 
Select S_RCF_TCC_TARIFAS_CONCEP_COB.nextval, 
       (select min(RCF_TCF_ID) from RCF_TCF_TIPO_COBRO_FACTURA),
       RCF_DD_COC_ID, 100, 5000, 10, 0, 'MIG-NUSE', sysdate, null, null, null, null, 0
from (select RCF_DD_COC_ID from RCF_DD_COC_CONCEPTO_COBRO);

-- Creación del tramo de facturación inicial
Insert into RCF_TRF_TRAMO_FACTURACION
  (RCF_TRF_ID, RCF_MFA_ID, RCF_TRF_DIAS, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_TRF_TRAMO_FACTURACION.nextval, 
  (select RCF_MFA_ID from RCF_MFA_MODELOS_FACTURACION where RCF_MFA_NOMBRE = 'MODELO FACTURACIÓN INICIAL'),
  30, 0, 'MIG-NUSE', sysdate, 0);

-- Creación de los tramos de tarifas de cobros iniciales
Insert into RCF_TCT_TARIF_COBRO_TRAMO
Select S_RCF_TCT_TARIF_COBRO_TRAMO.nextval, 
       (select max(RCF_TRF_ID) from RCF_TRF_TRAMO_FACTURACION where RCF_TRF_DIAS = 30),
        RCF_TCC_ID, 30, 0, 'MIG-NUSE', sysdate, null, null, null, null, 0
from (select tcc.RCF_TCC_ID 
      from RCF_MFA_MODELOS_FACTURACION mfa inner join
           RCF_TCF_TIPO_COBRO_FACTURA tcf on tcf.RCF_MFA_ID = mfa.RCF_MFA_ID inner join   
           RCF_TCC_TARIFAS_CONCEP_COBRO tcc on tcc.RCF_TCF_ID = tcf.RCF_TCF_ID);    

-- Creación del esquema inicial con estado liberado (ESTE ESTA OK)
Insert into RCF_ESQ_ESQUEMA 
  (RCF_ESQ_ID, RCF_ESQ_NOMBRE, RCF_ESQ_DESCRIPCION, RCF_DD_EES_ID, RCF_ESQ_FECHA_ALTA, RCF_ESQ_FECHA_LIB, 
  RCF_ESQ_FECHA_FIN_TRANSICION,RCF_FECHA_DESACT, RCF_ESQ_ID_ANTERIOR, RCF_ESQ_ID_SIGUIENTE, RCF_DD_MTR_ID, 
  RCF_ESQ_PLAZO, USU_ID, RCF_ID_GRUPO_VERSION, RCF_VERSION, RCF_MAJOR_RELEASE, RCF_MINOR_RELEASE, VERSION, 
  USUARIOCREAR, FECHACREAR, USUARIOMODIFICAR, FECHAMODIFICAR, USUARIOBORRAR, FECHABORRAR, BORRADO) 
Values 
  (S_RCF_ESQ_ESQUEMA.nextVal, 'ESQUEMA INICIAL', 'ESQUEMA INICIAL DE RECOBRO', 
  (select rcf_dd_ees_id from rcf_dd_ees_estado_esquema where rcf_dd_ees_codigo = 'LBR'), sysdate, null, null, 
  null, null, null, (select rcf_dd_mtr_id from rcf_dd_mtr_modelo_transicion where rcf_dd_mtr_codigo = 'RU'), 
  null, 1, S_RCF_ESQ_ESQUEMA.CURRVAL, '1', '0', '0', '0', 'MIG-NUSE', sysdate, null, null, null, null, '0');

-- Asignacíon de las carteras iniciales al esquema inicial
Insert into RCF_ESC_ESQUEMA_CARTERAS
  (RCF_ESC_ID, RCF_ESQ_ID, RCF_CAR_ID, DD_TCE_ID, RCF_ESC_PRIORIDAD, 
  DD_TGC_ID, DD_AER_ID,USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_ESC_ESQUEMA_CARTERAS.nextval, 
  (select rcf_esq_id from rcf_esq_esquema where RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'), 
  (select rcf_car_id from RCF_CAR_CARTERA where RCF_CAR_NOMBRE = 'FILTRO GENÉRICO'),
  (select DD_TCE_ID from RCF_DD_TCE_TIPO_CARTERA_ESQ where DD_TCE_CODIGO = 'FIL'), 1,  
  (select dd_tgc_id from RCF_DD_TGC_TIPO_GESTION_CART where dd_tgc_codigo = 'GI'),
  (select dd_aer_id from RCF_DD_AER_AMBITO_EXP_REC where dd_aer_codigo = 'CPGRA'), 'MIG-NUSE', sysdate, 0);

Insert into RCF_ESC_ESQUEMA_CARTERAS
  (RCF_ESC_ID, RCF_ESQ_ID, RCF_CAR_ID, DD_TCE_ID, RCF_ESC_PRIORIDAD, 
  DD_TGC_ID, DD_AER_ID,USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_ESC_ESQUEMA_CARTERAS.nextval, 
  (select rcf_esq_id from rcf_esq_esquema where RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'), 
  (select rcf_car_id from RCF_CAR_CARTERA where RCF_CAR_NOMBRE = 'TELECOBRO'),
  (select DD_TCE_ID from RCF_DD_TCE_TIPO_CARTERA_ESQ where DD_TCE_CODIGO = 'GES'), 2,  
  (select dd_tgc_id from RCF_DD_TGC_TIPO_GESTION_CART where dd_tgc_codigo = 'GI'),
  (select dd_aer_id from RCF_DD_AER_AMBITO_EXP_REC where dd_aer_codigo = 'CPGRA'), 'MIG-NUSE', sysdate, 0);
    
Insert into RCF_ESC_ESQUEMA_CARTERAS
  (RCF_ESC_ID, RCF_ESQ_ID, RCF_CAR_ID, DD_TCE_ID, RCF_ESC_PRIORIDAD, 
  DD_TGC_ID, DD_AER_ID,USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_ESC_ESQUEMA_CARTERAS.nextval, 
  (select rcf_esq_id from rcf_esq_esquema where RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'), 
  (select rcf_car_id from RCF_CAR_CARTERA where RCF_CAR_NOMBRE = 'RECOBRO < 210'),
  (select DD_TCE_ID from RCF_DD_TCE_TIPO_CARTERA_ESQ where DD_TCE_CODIGO = 'GES'), 3,  
  (select dd_tgc_id from RCF_DD_TGC_TIPO_GESTION_CART where dd_tgc_codigo = 'GI'),
  (select dd_aer_id from RCF_DD_AER_AMBITO_EXP_REC where dd_aer_codigo = 'CPGRA'), 'MIG-NUSE', sysdate, 0);
  
Insert into RCF_ESC_ESQUEMA_CARTERAS
  (RCF_ESC_ID, RCF_ESQ_ID, RCF_CAR_ID, DD_TCE_ID, RCF_ESC_PRIORIDAD, 
  DD_TGC_ID, DD_AER_ID,USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_ESC_ESQUEMA_CARTERAS.nextval, 
  (select rcf_esq_id from rcf_esq_esquema where RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'), 
  (select rcf_car_id from RCF_CAR_CARTERA where RCF_CAR_NOMBRE = 'RECOBRO > 210'),
  (select DD_TCE_ID from RCF_DD_TCE_TIPO_CARTERA_ESQ where DD_TCE_CODIGO = 'GES'), 4,  
  (select dd_tgc_id from RCF_DD_TGC_TIPO_GESTION_CART where dd_tgc_codigo = 'GI'),
  (select dd_aer_id from RCF_DD_AER_AMBITO_EXP_REC where dd_aer_codigo = 'CPGRA'), 'MIG-NUSE', sysdate, 0);

-- Cargamos las subcareras iniciales: una por cartera
Insert into RCF_SCA_SUBCARTERA
  (RCF_SCA_ID, RCF_ESC_ID, RCF_SCA_NOMBRE, RCF_SCA_PARTICION, RCF_DD_TPR_ID, 
  RCF_ITV_ID, RCF_MFA_ID, RCF_POA_ID, RCF_MOR_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
 Values
  (S_RCF_SCA_SUBCARTERA.nextval, 
  (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC 
      JOIN RCF_ESQ_ESQUEMA ESQ ON ESC.RCF_ESQ_ID = ESQ.RCF_ESQ_ID 
      JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID 
      WHERE ESQ.RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'
      AND CAR.RCF_CAR_NOMBRE = 'TELECOBRO'), 'SUBCARTERA TELECOBRO', 100, 
  (SELECT RCF_DD_TPR_ID FROM RCF_DD_TPR_TIPO_REPARTO_SUBC WHERE RCF_DD_TPR_CODIGO = 'EST'),
  (SELECT RCF_ITV_ID FROM RCF_ITV_ITI_METAS_VOLANTES WHERE RCF_ITV_NOMBRE = 'MODELO DE METAS VOLANTES INICIAL'),
  (SELECT RCF_MFA_ID FROM RCF_MFA_MODELOS_FACTURACION WHERE RCF_MFA_NOMBRE = 'MODELO FACTURACIÓN INICIAL'),
  (SELECT RCF_POA_ID FROM RCF_POA_POLITICA_ACUERDOS WHERE RCF_POA_NOMBRE = 'POLÍTICA DE ACUERDOS INICIAL'),
  (SELECT RCF_MOR_ID FROM RCF_MOR_MODELO_RANKING WHERE RCF_MOR_NOMBRE ='MODELO DE RANKING CONFIGURACIÓN INICIAL'), 
   0, 'MIG-NUSE', sysdate, 0);
    
Insert into RCF_SCA_SUBCARTERA
  (RCF_SCA_ID, RCF_ESC_ID, RCF_SCA_NOMBRE, RCF_SCA_PARTICION, RCF_DD_TPR_ID, 
   RCF_ITV_ID, RCF_MFA_ID, RCF_POA_ID, RCF_MOR_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
 Values
  (S_RCF_SCA_SUBCARTERA.nextval, 
  (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC 
      JOIN RCF_ESQ_ESQUEMA ESQ ON ESC.RCF_ESQ_ID = ESQ.RCF_ESQ_ID 
      JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID 
      WHERE ESQ.RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'
      AND CAR.RCF_CAR_NOMBRE = 'RECOBRO < 210'), 'SUBCARTERA RECOBRO < 210', 100, 
  (SELECT RCF_DD_TPR_ID FROM RCF_DD_TPR_TIPO_REPARTO_SUBC WHERE RCF_DD_TPR_CODIGO = 'EST'),
  (SELECT RCF_ITV_ID FROM RCF_ITV_ITI_METAS_VOLANTES WHERE RCF_ITV_NOMBRE = 'MODELO DE METAS VOLANTES INICIAL'),
  (SELECT RCF_MFA_ID FROM RCF_MFA_MODELOS_FACTURACION WHERE RCF_MFA_NOMBRE = 'MODELO FACTURACIÓN INICIAL'),
  (SELECT RCF_POA_ID FROM RCF_POA_POLITICA_ACUERDOS WHERE RCF_POA_NOMBRE = 'POLÍTICA DE ACUERDOS INICIAL'),
  (SELECT RCF_MOR_ID FROM RCF_MOR_MODELO_RANKING WHERE RCF_MOR_NOMBRE ='MODELO DE RANKING CONFIGURACIÓN INICIAL'), 
   0, 'MIG-NUSE', sysdate, 0);   
    
Insert into RCF_SCA_SUBCARTERA
  (RCF_SCA_ID, RCF_ESC_ID, RCF_SCA_NOMBRE, RCF_SCA_PARTICION, RCF_DD_TPR_ID, 
  RCF_ITV_ID, RCF_MFA_ID, RCF_POA_ID, RCF_MOR_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
 Values
  (S_RCF_SCA_SUBCARTERA.nextval, 
  (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC 
      JOIN RCF_ESQ_ESQUEMA ESQ ON ESC.RCF_ESQ_ID = ESQ.RCF_ESQ_ID 
      JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID 
      WHERE ESQ.RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL'
      AND CAR.RCF_CAR_NOMBRE = 'RECOBRO > 210'), 'SUBCARTERA RECOBRO > 210', 100, 
  (SELECT RCF_DD_TPR_ID FROM RCF_DD_TPR_TIPO_REPARTO_SUBC WHERE RCF_DD_TPR_CODIGO = 'EST'),
  (SELECT RCF_ITV_ID FROM RCF_ITV_ITI_METAS_VOLANTES WHERE RCF_ITV_NOMBRE = 'MODELO DE METAS VOLANTES INICIAL'),
  (SELECT RCF_MFA_ID FROM RCF_MFA_MODELOS_FACTURACION WHERE RCF_MFA_NOMBRE = 'MODELO FACTURACIÓN INICIAL'),
  (SELECT RCF_POA_ID FROM RCF_POA_POLITICA_ACUERDOS WHERE RCF_POA_NOMBRE = 'POLÍTICA DE ACUERDOS INICIAL'),
  (SELECT RCF_MOR_ID FROM RCF_MOR_MODELO_RANKING WHERE RCF_MOR_NOMBRE ='MODELO DE RANKING CONFIGURACIÓN INICIAL'), 
  0, 'MIG-NUSE', sysdate, 0);        
    
-- Asignamos las subcarteras a las agencias    
Insert into RCF_SUA_SUBCARTERA_AGENCIAS
Select S_RCF_SUA_SUBCARTERA_AGENCIAS.nextval, 
  RCF_AGE_ID, (select RCF_SCA_ID from RCF_SCA_SUBCARTERA where RCF_SCA_NOMBRE = 'SUBCARTERA TELECOBRO'),
  6, 0, 'MIG-NUSE', sysdate, null, null, null, null, 0 
From RCF_AGE_AGENCIAS
Where RCF_AGE_CODIGO <> '001';

Insert into RCF_SUA_SUBCARTERA_AGENCIAS
  (RCF_SUA_ID, RCF_AGE_ID, RCF_SCA_ID, RCF_SUA_COEFICIENTE, 
  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_SUA_SUBCARTERA_AGENCIAS.nextval, (select rcf_age_id from rcf_age_agencias where RCF_AGE_CODIGO = '001'), 
  (select RCF_SCA_ID from RCF_SCA_SUBCARTERA where RCF_SCA_NOMBRE = 'SUBCARTERA TELECOBRO'), 
  16, 0, 'MIG-NUSE', sysdate, 0);    
  
Insert into RCF_SUA_SUBCARTERA_AGENCIAS
Select S_RCF_SUA_SUBCARTERA_AGENCIAS.nextval, 
  RCF_AGE_ID, (select RCF_SCA_ID from RCF_SCA_SUBCARTERA where RCF_SCA_NOMBRE = 'SUBCARTERA RECOBRO < 210'),
  6, 0, 'MIG-NUSE', sysdate, null, null, null, null, 0 
From RCF_AGE_AGENCIAS
Where RCF_AGE_CODIGO <> '001';

Insert into RCF_SUA_SUBCARTERA_AGENCIAS
  (RCF_SUA_ID, RCF_AGE_ID, RCF_SCA_ID, RCF_SUA_COEFICIENTE, 
  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_SUA_SUBCARTERA_AGENCIAS.nextval, (select rcf_age_id from rcf_age_agencias where RCF_AGE_CODIGO = '001'), 
  (select RCF_SCA_ID from RCF_SCA_SUBCARTERA where RCF_SCA_NOMBRE = 'SUBCARTERA RECOBRO < 210'), 
  16, 0, 'MIG-NUSE', sysdate, 0);    
  
Insert into RCF_SUA_SUBCARTERA_AGENCIAS
Select S_RCF_SUA_SUBCARTERA_AGENCIAS.nextval, 
  RCF_AGE_ID, (select RCF_SCA_ID from RCF_SCA_SUBCARTERA where RCF_SCA_NOMBRE = 'SUBCARTERA RECOBRO > 210'),
  6, 0, 'MIG-NUSE', sysdate, null, null, null, null, 0 
From RCF_AGE_AGENCIAS
Where RCF_AGE_CODIGO <> '001';

Insert into RCF_SUA_SUBCARTERA_AGENCIAS
  (RCF_SUA_ID, RCF_AGE_ID, RCF_SCA_ID, RCF_SUA_COEFICIENTE, 
  VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
Values
  (S_RCF_SUA_SUBCARTERA_AGENCIAS.nextval, (select rcf_age_id from rcf_age_agencias where RCF_AGE_CODIGO = '001'),  
  (select RCF_SCA_ID from RCF_SCA_SUBCARTERA where RCF_SCA_NOMBRE = 'SUBCARTERA RECOBRO > 210'), 
  16, 0, 'MIG-NUSE', sysdate, 0);      

COMMIT;

-- ----------------------------------------------------------------------------
-- SCRIPTS DE MIGRACIÓN DE NUSE A RECOVERY
-- ORDEN DEL SCRIPT: 3
-- SCRIPT: Creación de los datos
-- AUTOR: Guillem Pascual Serra   
-- EMPRESA: PFSGROUP
-- -----------------------------------------------------------------------------

-- Creamos una tabla temporal que contendrá los datos provenientes de NUSE filtrados
create table LOAD_CICLOS_NUSE_STAGE_2 as
  select nuse.*, cnt.CNT_CONTRATO AS CNT_CONTRATO
  from LOAD_CICLOS_NUSE_STAGE_1 nuse
  join cnt_contratos cnt on cnt.CNT_CONTRATO = (nuse.CODIGO_PROPIETARIO || nuse.TIPO_PRODUCTO || nuse.NUMERO_CONTRATO || nuse.NUMERO_ESPEC)
  where FECHA_BAJA_AGENCIA = '00000000'
  and NUMERO_CONTRATO <> '00000000000000000';

-- Creamos una tabla TEMPORAL que contendrá los nuevos ids de expediente y sus contratos vinculados
CREATE TABLE TMP_MIGRACION_NUSE_1 (EXP_ID NUMBER(16) NOT NULL, CNT_CONTRATO VARCHAR2(50 BYTE) NOT NULL, CEX_PASE NUMBER(1) DEFAULT 0);

-- Creamos una tabla TEMPORAL que contendrá los nuevos ids de expediente y sus personas vinculadas
CREATE TABLE TMP_MIGRACION_NUSE_2 (EXP_ID NUMBER(16) NOT NULL, PER_ID NUMBER(16) NOT NULL, PEX_PASE NUMBER(1) DEFAULT 0);

-- Cargamos en una TMP los nuevos ids de expediente y sus contratos vinculados
-- inicio sustitucion del PLSQL
CREATE TABLE TMP_NUSE_EXP_ID_NUEVOS AS
SELECT S_EXP_EXPEDIENTES.NEXTVAL EXP_ID, ID_EXPEDIENTE FROM (
  SELECT DISTINCT ID_EXPEDIENTE FROM LOAD_CICLOS_NUSE_STAGE_2
);

INSERT /*+ APPEND PARALLEL(TMP_MIGRACION_NUSE_1, 16) PQ_DISTRIBUTE(TMP_MIGRACION_NUSE_1, NONE) */ INTO TMP_MIGRACION_NUSE_1 (EXP_ID, CNT_CONTRATO, CEX_PASE)
      SELECT EID.EXP_ID, NUSE.CODIGO_PROPIETARIO || NUSE.TIPO_PRODUCTO || NUSE.NUMERO_CONTRATO || NUSE.NUMERO_ESPEC, 0
      FROM LOAD_CICLOS_NUSE_STAGE_2 NUSE
      JOIN TMP_NUSE_EXP_ID_NUEVOS EID ON NUSE.ID_EXPEDIENTE = EID.ID_EXPEDIENTE;
-- fin ejecucion del PL/SQL
COMMIT;

-- Cargamos en una TMP los nuevos ids de expediente y sus personas vinculadas
INSERT INTO TMP_MIGRACION_NUSE_2 (EXP_ID, PER_ID, PEX_PASE)
    SELECT nuse.EXP_ID, PER.PER_ID, 0
    FROM TMP_MIGRACION_NUSE_1 nuse
    JOIN cnt_contratos cnt on nuse.CNT_CONTRATO = cnt.CNT_CONTRATO
    JOIN CPE_CONTRATOS_PERSONAS CPE ON cnt.CNT_ID = CPE.CNT_ID 
    JOIN PER_PERSONAS PER ON CPE.PER_ID = PER.PER_ID;			  

COMMIT;

-- Actualizamos el CEX_PASE en la tabla TMP_MIGRACION_NUSE_1 por expediente y 
-- contrato marcando el contrato mayor deuda irregular
-- inicio sustitucion PL/SQL
update TMP_MIGRACION_NUSE_1 set cex_pase = 1 where (exp_id, cnt_contrato) in (
select exp_id, cnt_contrato from (
select row_number() over (partition by nuse.exp_id order by mov.mov_deuda_irregular desc) indice, nuse.*
FROM TMP_MIGRACION_NUSE_1 nuse 
        join cnt_contratos cnt on cnt.CNT_CONTRATO = nuse.cnt_contrato
        join mov_movimientos mov on cnt.cnt_id = mov.cnt_id and cnt.cnt_fecha_extraccion = mov.mov_fecha_extraccion
) where indice = 1);
-- fin sustitucioN PL/SQL


COMMIT;

-- Actualizamos el PEX_PASE en la tabla TMP_MIGRACION_NUSE_2 por expediente y 
-- persona marcando la persona con el per_id más bajo
-- inicio sustitucion PL/SQL
update TMP_MIGRACION_NUSE_2  set pex_pase = 1 where (exp_id, per_id) in ( 
  select exp_id, per_id from (
    select row_number() over (partition by nuse.exp_id order by per_id) indice, nuse.exp_id, cpe.per_id
    FROM TMP_MIGRACION_NUSE_1 nuse 
        join cnt_contratos cnt on cnt.CNT_CONTRATO = nuse.cnt_contrato
        join cpe_contratos_personas cpe on cnt.cnt_id = cpe.cnt_id
  ) where indice = 1
);
-- fin sustitucion PL/SQL


COMMIT;

-- Primer paso: crear los expedientes y los expedientes de recobro
-- inicio sustitución PL/SQL
create index idx_migraci_01 on TMP_MIGRACION_NUSE_1(cex_pase);

create index idx_migraci_02 on TMP_MIGRACION_NUSE_2(pex_pase);

create index idx_migraci_03 on TMP_MIGRACION_NUSE_2(exp_id);

analyze table TMP_MIGRACION_NUSE_1 compute statistics;

analyze table TMP_MIGRACION_NUSE_2 compute statistics;

/
declare
  vARQ_ID NUMBER(16);
begin		
  select ARQ_ID into vARQ_ID from arq_arquetipos where ARQ_NOMBRE = 'GENERICO EXPEDIENTE DE RECOBRO';
INSERT /*+ APPEND PARALLEL(EXP_EXPEDIENTES, 16) PQ_DISTRIBUTE(EXP_EXPEDIENTES, NONE) */ INTO EXP_EXPEDIENTES (EXP_ID, EXP_DESCRIPCION, EXP_FECHA_EST_ID, OFI_ID, 
    ARQ_ID, DD_EEX_ID, EXP_MANUAL, DD_TPX_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)    
    SELECT DISTINCT nuse.exp_id, REPLACE(nuse.exp_id||' - '||TRIM(PER.PER_NOMBRE||' '||PER.PER_APELLIDO1||' '||PER.PER_APELLIDO2),'''','''''')
    ,SYSDATE, CNT.OFI_ID, vARQ_ID, 2, 0, tpx.dd_tpx_id, 0, 'MIG-NUSE', SYSDATE, 0
    FROM TMP_MIGRACION_NUSE_1 nuse 
    JOIN cnt_contratos CNT on CNT.CNT_CONTRATO = nuse.cnt_contrato
    JOIN TMP_MIGRACION_NUSE_2 nuse2  ON nuse.EXP_ID = nuse2.EXP_ID
    JOIN PER_PERSONAS PER ON nuse2.PER_ID = PER.PER_ID 
    JOIN DD_TPX_TIPO_EXPEDIENTE TPX ON TPX.DD_TPX_CODIGO = 'REC'
    WHERE nuse.CEX_PASE = 1 AND nuse2.PEX_PASE = 1; 
end;
/
COMMIT;

UPDATE EXP_EXPEDIENTES SET DD_EST_ID = (SELECT DD_EST_ID FROM BANKMASTER.DD_EST_ESTADOS_ITINERARIOS WHERE DD_EST_CODIGO = 'CMER');

COMMIT;


    
INSERT /*+ APPEND PARALLEL(EXR_EXPEDIENTE_RECOBRO, 16) PQ_DISTRIBUTE(EXR_EXPEDIENTE_RECOBRO, NONE) */  INTO EXR_EXPEDIENTE_RECOBRO (EXP_ID) 
    SELECT DISTINCT EXP_ID 
    FROM exp_expedientes;    
-- fin sustitución PL/SQL

COMMIT;

-- Segundo paso: crear las relaciones de los expedientes y los contratos
-- inicio sustitución PL/SQL
      
INSERT INTO CEX_CONTRATOS_EXPEDIENTE (CEX_ID, CNT_ID, EXP_ID, DD_AEX_ID, CEX_PASE, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
    SELECT S_CEX_CONTRATOS_EXPEDIENTE.nextVal, D.* FROM (
      SELECT DISTINCT cnt.cnt_id, nuse.EXP_ID, AEX.DD_AEX_ID, nuse.cex_pase, 0 V, 'MIG-NUSE' UC, sysdate FC, 0 B 
      FROM TMP_MIGRACION_NUSE_1 nuse
      JOIN EXP_EXPEDIENTES EXP ON NUSE.EXP_ID = EXP.EXP_ID
      join cnt_contratos cnt on nuse.CNT_CONTRATO = cnt.CNT_CONTRATO
      JOIN BANKMASTER.DD_AEX_AMBITOS_EXPEDIENTE AEX ON AEX.DD_AEX_CODIGO = 'AE_AUTO'
    ) D;			  			  	

-- fin sustitución PL/SQL
COMMIT;

-- Tercer paso: crear las relaciones de los expedientes y las personas
-- inicio sustitución PL/SQL

INSERT INTO PEX_PERSONAS_EXPEDIENTE (PEX_ID, EXP_ID, PER_ID, DD_AEX_ID, PEX_PASE, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
    SELECT S_PEX_PERSONAS_EXPEDIENTE.nextVal, D.* FROM (
      SELECT DISTINCT nuse.EXP_ID, PER.PER_ID, AEX.DD_AEX_ID, nuse.PEX_PASE, 0 V, 'MIG-NUSE' UC, sysdate VC, 0 B  
      FROM TMP_MIGRACION_NUSE_2 nuse
      JOIN EXP_EXPEDIENTES EXP ON NUSE.EXP_ID = EXP.EXP_ID
      JOIN CPE_CONTRATOS_PERSONAS CPE ON nuse.PER_ID = CPE.PER_ID
      JOIN PER_PERSONAS PER ON CPE.PER_ID = PER.PER_ID
      JOIN BANKMASTER.DD_AEX_AMBITOS_EXPEDIENTE AEX ON AEX.DD_AEX_CODIGO = 'AE_AUTO'
    ) D;			  			  	
    
-- fin sustitución PL/SQL

COMMIT;

-- Creamos una tabla TEMPORAL que contendrá los nuevos ciclos de recobro de expedientes
CREATE TABLE TMP_MIGRACION_NUSE_3 (
    EXP_ID      NUMBER(16), 
    RCF_ESQ_ID  NUMBER(16), 
    RCF_ESC_ID  NUMBER(16), 
    RCF_SCA_ID  NUMBER(16), 
    RCF_SUA_ID  NUMBER(16), 
    RCF_AGE_ID  NUMBER(16)
);

-- Cargamos la tabla temporal que contendrá los nuevos ciclos de recobro

-- Creamos los índices necesarios
--create index idx_migraci_04 on CNT_CONTRATOS(cnt_contrato);

analyze table CNT_CONTRATOS compute statistics;

create index idx_migraci_05 on LOAD_CICLOS_NUSE_STAGE_2(cnt_contrato);

create index idx_migraci_06 on LOAD_CICLOS_NUSE_STAGE_2(descripcion_tipo_gestion);

analyze table LOAD_CICLOS_NUSE_STAGE_2 compute statistics;

create index idx_migraci_07 on TMP_MIGRACION_NUSE_1(cnt_contrato);

analyze table TMP_MIGRACION_NUSE_1 compute statistics;

-- Primero cargamos los ciclos de la cartera de Telecobro 
/
declare
  vDD_ESQ_ID NUMBER(16);
  vFecha_Ext DATE;  
begin		
  select rcf_esq_id into vDD_ESQ_ID from rcf_esq_esquema where RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL';
  INSERT INTO TMP_MIGRACION_NUSE_3
  SELECT nuse.EXP_ID, 
    vDD_ESQ_ID,
    (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
        WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'TELECOBRO'),
    (SELECT RCF_SCA_ID FROM RCF_SCA_SUBCARTERA WHERE RCF_ESC_ID = (SELECT ESC.RCF_ESC_ID FROM 
        RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
        WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'TELECOBRO')),    
   (SELECT RCF_SUA_ID FROM RCF_SUA_SUBCARTERA_AGENCIAS WHERE 
        RCF_AGE_ID = (SELECT DISTINCT RCF_AGE_ID FROM RCF_AGE_AGENCIAS WHERE RCF_AGE_CODIGO = load.CODIGO_AGENCIA) AND
        RCF_SCA_ID = (SELECT RCF_SCA_ID FROM RCF_SCA_SUBCARTERA WHERE RCF_ESC_ID = (SELECT ESC.RCF_ESC_ID FROM 
        RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
        WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'TELECOBRO'))),    
    (SELECT DISTINCT RCF_AGE_ID FROM RCF_AGE_AGENCIAS WHERE RCF_AGE_CODIGO = load.CODIGO_AGENCIA)
  FROM TMP_MIGRACION_NUSE_1 nuse
    JOIN LOAD_CICLOS_NUSE_STAGE_2 load on nuse.CNT_CONTRATO = load.CNT_CONTRATO
    JOIN cnt_contratos cnt on nuse.CNT_CONTRATO = cnt.CNT_CONTRATO
    JOIN CEX_CONTRATOS_EXPEDIENTE cex on cnt.cnt_id = cex.cnt_id
  WHERE load.DESCRIPCION_TIPO_GESTION like '%Telecobro%' and cex.cex_pase = 1; 
end;
/
COMMIT;

-- Segundo cargamos los ciclos de las carteras que NO SON Telecobro según el número de días del campo FECHA_POS_VIVA_VENCIDA
-- Primero cargamos la cartera RECOBRO < 210 donde FECHA_POS_VIVA_VENCIDA <= 210
/
declare
  vDD_ESQ_ID NUMBER(16);
  vFecha_Ext DATE;  
begin		
  SELECT max(mov_fecha_extraccion) into vFecha_Ext from mov_movimientos;
  select rcf_esq_id into vDD_ESQ_ID from rcf_esq_esquema where RCF_ESQ_NOMBRE = 'ESQUEMA INICIAL';
  INSERT INTO TMP_MIGRACION_NUSE_3
  SELECT nuse.EXP_ID, 
    vDD_ESQ_ID,
    (CASE WHEN (MOV.MOV_FECHA_POS_VENCIDA + 210) <= sysdate THEN (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC 
      JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
      WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'RECOBRO < 210') 
    ELSE (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID 
      WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'RECOBRO > 210') END),
    (CASE WHEN (MOV.MOV_FECHA_POS_VENCIDA + 210) <= sysdate THEN (SELECT RCF_SCA_ID FROM RCF_SCA_SUBCARTERA 
      WHERE RCF_ESC_ID = (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
      WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'RECOBRO < 210'))
    ELSE (SELECT RCF_SCA_ID FROM RCF_SCA_SUBCARTERA WHERE RCF_ESC_ID = (SELECT ESC.RCF_ESC_ID 
      FROM RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
      WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'RECOBRO > 210')) END),  
    (CASE WHEN (MOV.MOV_FECHA_POS_VENCIDA + 210) <= sysdate THEN (SELECT RCF_SUA_ID FROM RCF_SUA_SUBCARTERA_AGENCIAS 
      WHERE RCF_AGE_ID = (SELECT DISTINCT RCF_AGE_ID FROM RCF_AGE_AGENCIAS WHERE RCF_AGE_CODIGO = load.CODIGO_AGENCIA) 
      AND RCF_SCA_ID = (SELECT RCF_SCA_ID FROM RCF_SCA_SUBCARTERA WHERE RCF_ESC_ID = (SELECT ESC.RCF_ESC_ID 
      FROM RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
      WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'RECOBRO < 210'))) 
    ELSE (SELECT RCF_SUA_ID FROM RCF_SUA_SUBCARTERA_AGENCIAS WHERE RCF_AGE_ID = (SELECT DISTINCT RCF_AGE_ID FROM RCF_AGE_AGENCIAS 
      WHERE RCF_AGE_CODIGO = load.CODIGO_AGENCIA) AND RCF_SCA_ID = (SELECT RCF_SCA_ID FROM RCF_SCA_SUBCARTERA 
      WHERE RCF_ESC_ID = (SELECT ESC.RCF_ESC_ID FROM RCF_ESC_ESQUEMA_CARTERAS ESC JOIN RCF_CAR_CARTERA CAR ON ESC.RCF_CAR_ID = CAR.RCF_CAR_ID
      WHERE ESC.RCF_ESQ_ID = vDD_ESQ_ID AND CAR.RCF_CAR_NOMBRE = 'RECOBRO > 210'))) END),
    (SELECT DISTINCT RCF_AGE_ID FROM RCF_AGE_AGENCIAS WHERE RCF_AGE_CODIGO = load.CODIGO_AGENCIA)
  FROM TMP_MIGRACION_NUSE_1 nuse
    JOIN LOAD_CICLOS_NUSE_STAGE_2 load on nuse.CNT_CONTRATO = load.CNT_CONTRATO
    JOIN cnt_contratos cnt on nuse.CNT_CONTRATO = cnt.CNT_CONTRATO
    JOIN mov_movimientos MOV on cnt.cnt_id = MOV.cnt_id
    JOIN CEX_CONTRATOS_EXPEDIENTE cex on cnt.cnt_id = cex.cnt_id
  WHERE MOV.MOV_FECHA_EXTRACCION = vFecha_Ext AND load.DESCRIPCION_TIPO_GESTION not like '%Telecobro%' and cex.cex_pase = 1; 
end;
/
COMMIT;

-- Creamos una tabla TEMPORAL que contendrá los nuevos ciclos de recobro de expedientes con sus importes
CREATE TABLE TMP_MIGRACION_NUSE_4 (
    EXP_ID      NUMBER(16), 
    RCF_ESQ_ID  NUMBER(16), 
    RCF_ESC_ID  NUMBER(16), 
    RCF_SCA_ID  NUMBER(16), 
    RCF_SUA_ID  NUMBER(16), 
    RCF_AGE_ID  NUMBER(16), 
    CRE_POS_VIVA_NO_VENCIDA NUMBER(16,2), 
    CRE_POS_VIVA_VENCIDA    NUMBER(16,2), 
    CRE_INT_ORDIN_DEVEN     NUMBER(16,2), 
    CRE_INT_MORAT_DEVEN     NUMBER(16,2), 
    CRE_COMISIONES          NUMBER(16,2), 
    CRE_GASTOS              NUMBER(16,2), 
    CRE_IMPUESTOS           NUMBER(16,2)
);

-- Cargamos la tabla temporal que contendrá los nuevos ciclos de recobro
/
declare
  vFecha_Ext DATE;  
begin		
  SELECT max(mov_fecha_extraccion) into vFecha_Ext from mov_movimientos;
  INSERT INTO TMP_MIGRACION_NUSE_4
  SELECT nuse.EXP_ID, 
    nuse.RCF_ESQ_ID,
    nuse.RCF_ESC_ID, 
    nuse.RCF_SCA_ID,
    nuse.RCF_SUA_ID,
    nuse.RCF_AGE_ID,
    SUM(NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0)),
    SUM(NVL(MOV.MOV_POS_VIVA_VENCIDA,0)),
    SUM(NVL(MOV.MOV_INT_REMUNERATORIOS,0)),
    SUM(NVL(MOV.MOV_INT_MORATORIOS,0)),
    SUM(NVL(MOV.MOV_COMISIONES,0)),
    SUM(NVL(MOV.MOV_GASTOS,0)),
    SUM(NVL(MOV.MOV_IMPUESTOS,0))
  FROM TMP_MIGRACION_NUSE_3 nuse
    JOIN TMP_MIGRACION_NUSE_1 nuse2 on nuse.EXP_ID = nuse2.EXP_ID
    JOIN LOAD_CICLOS_NUSE_STAGE_2 load on nuse2.CNT_CONTRATO = load.CNT_CONTRATO
    JOIN cnt_contratos cnt on load.CNT_CONTRATO = cnt.CNT_CONTRATO
    JOIN mov_movimientos MOV on cnt.cnt_id = MOV.cnt_id
  WHERE MOV.MOV_FECHA_EXTRACCION = vFecha_Ext
  GROUP BY nuse.EXP_ID, nuse.RCF_ESQ_ID, nuse.RCF_ESC_ID, nuse.RCF_SCA_ID, nuse.RCF_SUA_ID, nuse.RCF_AGE_ID;  
end;
/
COMMIT;

-- Cuarto paso: crear los ciclos de expedientes de recobro de expedientes
/
declare
begin		
  INSERT INTO CRE_CICLO_RECOBRO_EXP (CRE_ID, EXP_ID, CRE_FECHA_ALTA, RCF_ESQ_ID, RCF_ESC_ID, RCF_SCA_ID, RCF_SUA_ID, RCF_AGE_ID, 
    CRE_POS_VIVA_NO_VENCIDA, CRE_POS_VIVA_VENCIDA, CRE_INT_ORDIN_DEVEN, CRE_INT_MORAT_DEVEN, CRE_COMISIONES, CRE_GASTOS, 
    CRE_IMPUESTOS, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
  SELECT S_CRE_CICLO_RECOBRO_EXP.NEXTVAL, 
    TMP.EXP_ID,
    TRUNC(SYSDATE), 
    TMP.RCF_ESQ_ID, 
    TMP.RCF_ESC_ID, 
    TMP.RCF_SCA_ID, 
    TMP.RCF_SUA_ID, 
    TMP.RCF_AGE_ID, 
    TMP.CRE_POS_VIVA_NO_VENCIDA, 
    TMP.CRE_POS_VIVA_VENCIDA, 
    TMP.CRE_INT_ORDIN_DEVEN, 
    TMP.CRE_INT_MORAT_DEVEN, 
    TMP.CRE_COMISIONES, 
    TMP.CRE_GASTOS, 
    TMP.CRE_IMPUESTOS, 0, 'MIG-NUSE', sysdate, 0 
  FROM TMP_MIGRACION_NUSE_4 TMP;
end;
/
COMMIT;

-- Creamos una tabla TEMPORAL que contendrá los nuevos ciclos de recobro de contratos
CREATE TABLE TMP_MIGRACION_NUSE_5 (
  CNT_ID  NUMBER(16),
  CRE_ID  NUMBER(16),
  CRC_ID_ENVIO NUMBER(16),
  CRC_FECHA_ALTA  TIMESTAMP,
  CRC_POS_VIVA_NO_VENCIDA NUMBER(16,2), 
  CRC_POS_VIVA_VENCIDA  NUMBER(16,2),
  CRC_INT_ORDIN_DEVEN NUMBER(16,2),
  CRC_INT_MORAT_DEVEN NUMBER(16,2),
  CRC_COMISIONES  NUMBER(16,2),
  CRC_GASTOS  NUMBER(16,2), 
  CRC_IMPUESTOS NUMBER(16,2)
);

-- Cargamos la tabla temporal que contendrá los nuevos ciclos de recobro de contrato
/
declare
  vFecha_Ext DATE;  
begin		
  SELECT max(mov_fecha_extraccion) into vFecha_Ext from mov_movimientos;
  INSERT INTO TMP_MIGRACION_NUSE_5
  SELECT cnt.cnt_id, 
    cre.cre_id,
    to_number(to_char(TRUNC(sysdate), 'yyyyMMdd') || cnt.CNT_ID),
    sysdate,
    NVL(MOV.MOV_POS_VIVA_NO_VENCIDA,0),
    NVL(MOV.MOV_POS_VIVA_VENCIDA,0), 
    NVL(MOV.MOV_INT_REMUNERATORIOS,0),
    NVL(MOV.MOV_INT_MORATORIOS,0), 
    NVL(MOV.MOV_COMISIONES,0), 
    NVL(MOV.MOV_GASTOS,0), 
    NVL(MOV.MOV_IMPUESTOS,0)
  FROM TMP_MIGRACION_NUSE_1 nuse
    JOIN CRE_CICLO_RECOBRO_EXP cre on nuse.exp_id = cre.exp_id
    JOIN cnt_contratos cnt on nuse.CNT_CONTRATO = cnt.CNT_CONTRATO
    JOIN mov_movimientos MOV on cnt.cnt_id = MOV.cnt_id
    WHERE MOV.MOV_FECHA_EXTRACCION = vFecha_Ext;  
end;
/
COMMIT;

-- Quinto paso: crear los ciclos de contratos de recobro
/
declare
begin		
  INSERT INTO CRC_CICLO_RECOBRO_CNT (CRC_ID, CNT_ID, CRE_ID, CRC_ID_ENVIO, CRC_FECHA_ALTA, CRC_POS_VIVA_NO_VENCIDA, CRC_POS_VIVA_VENCIDA, 
    CRC_INT_ORDIN_DEVEN, CRC_INT_MORAT_DEVEN, CRC_COMISIONES, CRC_GASTOS, CRC_IMPUESTOS, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
  SELECT S_CRC_CICLO_RECOBRO_CNT.NEXTVAL,
    CNT_ID, 
    CRE_ID, 
    CRC_ID_ENVIO, 
    TRUNC(SYSDATE), 
    CRC_POS_VIVA_NO_VENCIDA, 
    CRC_POS_VIVA_VENCIDA, 
    CRC_INT_ORDIN_DEVEN, 
    CRC_INT_MORAT_DEVEN, 
    CRC_COMISIONES, 
    CRC_GASTOS, 
    CRC_IMPUESTOS, 0, 'MIG-NUSE', sysdate, 0 
  FROM TMP_MIGRACION_NUSE_5;
end;
/
COMMIT;

-- Creamos una tabla TEMPORAL que contendrá los nuevos ciclos de recobro de personas
CREATE TABLE TMP_MIGRACION_NUSE_6 (
  PER_ID    NUMBER(16),
  CRE_ID  NUMBER(16),
  CRP_FECHA_ALTA  TIMESTAMP,
  CRP_RIESGO_DIRECTO  NUMBER(16,2),
  CRP_RIESGO_INDIRECTO  NUMBER(16,2)
);

-- Cargamos la tabla temporal que contendrá los nuevos ciclos de recobro de personas
/
declare
begin		
  INSERT /*+ APPEND PARALLEL(TMP_MIGRACION_NUSE_6, 16) PQ_DISTRIBUTE(TMP_MIGRACION_NUSE_6, NONE) */ INTO TMP_MIGRACION_NUSE_6
  SELECT PER.PER_ID,
    cre.cre_id,
    sysdate,
    NVL(PER.PER_RIESGO, 0),
    NVL(PER.PER_RIESGO_IND, 0)
  FROM TMP_MIGRACION_NUSE_2 nuse
    JOIN CRE_CICLO_RECOBRO_EXP cre on nuse.exp_id = cre.exp_id  
    JOIN PER_PERSONAS PER ON nuse.per_id = PER.per_id;
end;
/
COMMIT;

-- Sexto paso: crear los ciclos de personas de recobro
/
declare
  vDD_AEX_ID NUMBER(16);
begin		
  INSERT /*+ APPEND PARALLEL(CRP_CICLO_RECOBRO_PER, 16) PQ_DISTRIBUTE(CRP_CICLO_RECOBRO_PER, NONE) */ INTO CRP_CICLO_RECOBRO_PER (CRP_ID, PER_ID, CRE_ID, CRP_FECHA_ALTA, CRP_RIESGO_DIRECTO, CRP_RIESGO_INDIRECTO,
    VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
  SELECT S_CRP_CICLO_RECOBRO_PER.NEXTVAL,
    PER_ID,
    CRE_ID,
    CRP_FECHA_ALTA,
    CRP_RIESGO_DIRECTO,
    CRP_RIESGO_INDIRECTO,
    0, 'MIG-NUSE', sysdate, 0 
  FROM TMP_MIGRACION_NUSE_6;
end;
/
COMMIT;


-- ----------------------------------------------------------------------------
-- SCRIPTS DE MIGRACIÓN DE NUSE A RECOVERY
-- ORDEN DEL SCRIPT: 4
-- SCRIPT: Eliminación de la tabla de carga de datos de NUSE
-- AUTOR: Guillem Pascual Serra   
-- EMPRESA: PFSGROUP
-- -----------------------------------------------------------------------------

-- AQUI SE PUEDEN METER LOS ÍNDICES CREADOS DURANTE EL PROCESO DE MIGRACIÓN

-- Eliminamos la tabla donde hemos cargado los datos provenientes de NUSE
--DROP TABLE LOAD_CICLOS_NUSE_STAGE_1;

-- Eliminamos la tabla donde hemos cargado los datos provenientes de NUSE filtrados
DROP TABLE LOAD_CICLOS_NUSE_STAGE_2 PURGE;

-- Eliminamos la tabla temporal que contiene los expedientes y los contratos
DROP TABLE TMP_MIGRACION_NUSE_1 PURGE;

-- Eliminamos la tabla temporal que contiene los expedientes y sus personas
DROP TABLE TMP_MIGRACION_NUSE_2 PURGE;

-- Eliminamos la tabla temporal que contiene los ciclos de recobro de los expedientes
DROP TABLE TMP_MIGRACION_NUSE_3 PURGE;

-- Eliminamos la tabla temporal que contiene los ciclos de recobro de los expedientes y sus importes
DROP TABLE TMP_MIGRACION_NUSE_4 PURGE;

-- Eliminamos la tabla temporal que contiene los ciclos de recobro de los contratos
DROP TABLE TMP_MIGRACION_NUSE_5 PURGE;

-- Eliminamos la tabla temporal que contiene los ciclos de recobro de los personas
DROP TABLE TMP_MIGRACION_NUSE_6 PURGE;

-- Eliminamos la tabla temporal que contiene los nuevos id de expedientes
DROP TABLE TMP_NUSE_EXP_ID_NUEVOS PURGE;

COMMIT;

DROP TABLE LOAD_CICLOS_NUSE_STAGE_1 PURGE;

