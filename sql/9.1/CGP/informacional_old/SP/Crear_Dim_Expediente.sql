-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

DROP PROCEDURE IF EXISTS `Crear_Dim_Expediente` $$

-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

SET NAMES UTF8 $$

CREATE DEFINER=`bi_cdd`@`62.15.160.14` PROCEDURE `Crear_Dim_Expediente`(OUT o_error_status varchar(500))
MY_BLOCK_DIM_EXP: BEGIN

-- ===============================================================================================
-- Autor: Gonzalo Martín, PFS Group
-- Fecha creación: Julio 2014
-- Responsable última modificación: 
-- Fecha última modificación: 
-- Motivos del cambio: 
-- Cliente: Recovery BI Central de Demandas 
--
-- Descripción: Procedimiento almancenado que crea las tablas de la dimensión Expediente.
-- ===============================================================================================
DECLARE HAY_TABLA INT;
-- --------------------------------------------------------------------------------
-- DEFINICIÓN DE LOS HANDLER DE ERROR
-- --------------------------------------------------------------------------------
DECLARE EXIT handler for 1062 set o_error_status := 'Error 1062: La tabla ya existe';
DECLARE EXIT handler for 1048 set o_error_status := 'Error 1048: Has intentado insertar un valor nulo'; 
DECLARE EXIT handler for 1318 set o_error_status := 'Error 1318: Número de parámetros incorrecto'; 

-- --------------------------------------------------------------------------------
-- DEFINICIÓN DEL HANDLER GENÉRICO DE ERROR
-- --------------------------------------------------------------------------------
DECLARE EXIT handler for sqlexception set o_error_status:= 'Se ha producido un error en el proceso';

DROP TABLE D_EXP_CEDENTE;
 CREATE TABLE IF NOT EXISTS D_EXP_CEDENTE(
  `CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  `CEDENTE_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`CEDENTE_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_PROVEEDOR;
 CREATE TABLE IF NOT EXISTS D_EXP_PROVEEDOR(
  `PROVEEDOR_ID` DECIMAL(16,0) NOT NULL ,
  `PROVEEDOR_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`PROVEEDOR_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_EST_ENTRADA;
 CREATE TABLE IF NOT EXISTS D_EXP_EST_ENTRADA(
  `EST_ENTRADA_ID` DECIMAL(16,0) NOT NULL ,
  `EST_ENTRADA_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_ENTRADA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_EST_HERRAMIENTA;
CREATE TABLE IF NOT EXISTS D_EXP_EST_HERRAMIENTA(
  `EST_HERRAMIENTA_ID` DECIMAL(16,0) NOT NULL ,
  `EST_HERRAMIENTA_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_HERRAMIENTA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_FASE;
CREATE TABLE IF NOT EXISTS D_EXP_FASE(
  `FASE_ID` DECIMAL(16,0) NOT NULL ,
  `FASE_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`FASE_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_EST_VIDA;
CREATE TABLE IF NOT EXISTS D_EXP_EST_VIDA(
  `EST_VIDA_ID` DECIMAL(16,0) NOT NULL ,
  `EST_VIDA_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_VIDA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_EST_GESTION;
CREATE TABLE IF NOT EXISTS D_EXP_EST_GESTION(
  `EST_GESTION_ID` DECIMAL(16,0) NOT NULL ,
  `EST_GESTION_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_GESTION_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_MOTIVO_FACTURA;
CREATE TABLE IF NOT EXISTS D_EXP_MOTIVO_FACTURA(
  `MOTIVO_FACTURA_ID` DECIMAL(16,0) NOT NULL ,
  `MOTIVO_FACTURA_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`MOTIVO_FACTURA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_MOTIVO_KO;
CREATE TABLE IF NOT EXISTS D_EXP_MOTIVO_KO(
  `MOTIVO_KO_ID` DECIMAL(16,0) NOT NULL ,
  `MOTIVO_KO_DESC` VARCHAR(100) NULL ,
  `TIPO_KO_ID` DECIMAL(16,0) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`MOTIVO_KO_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_TIPO_KO;
CREATE TABLE IF NOT EXISTS D_EXP_TIPO_KO(
  `TIPO_KO_ID` DECIMAL(16,0) NOT NULL ,
  `TIPO_KO_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`TIPO_KO_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_PROCURADOR;
CREATE TABLE IF NOT EXISTS D_EXP_PROCURADOR(
  `PROCURADOR_ID` DECIMAL(16,0) NOT NULL ,
  `PROCURADOR_NOMBRE` VARCHAR(100) NULL ,
  -- `PROCURADOR_APELLIDO1` VARCHAR(100) NULL ,
  -- `PROCURADOR_APELLIDO2` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`PROCURADOR_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_TIPO_PROCEDIMIENTO;
CREATE TABLE IF NOT EXISTS D_EXP_TIPO_PROCEDIMIENTO(
  `TIPO_PROCEDIMIENTO_ID` DECIMAL(16,0) NOT NULL ,
  `TIPO_PROCEDIMIENTO_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`TIPO_PROCEDIMIENTO_ID`, `ENTIDAD_CEDENTE_ID`));

/* Dimensión para D_EXP_PLAZA_UNICO */
select count(table_name) into HAY_TABLA from information_schema.tables where table_name = 'D_EXP_PLAZA_UNICO' and table_schema = 'bi_cdd_dwh';
if (HAY_TABLA > 0) then 
    DROP TABLE D_EXP_PLAZA_UNICO;
end if;  
CREATE TABLE D_EXP_PLAZA_UNICO(
 `PLAZA_UNICO_ID` DECIMAL(16,0) NOT NULL ,
 `PLAZA_UNICO_DESC` VARCHAR(100) NULL ,
 `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
PRIMARY KEY (`PLAZA_UNICO_ID`, `ENTIDAD_CEDENTE_ID`));
  
DROP TABLE D_EXP_PLAZA;
CREATE TABLE IF NOT EXISTS D_EXP_PLAZA(
  `PLAZA_ID` DECIMAL(16,0) NOT NULL ,
  `PLAZA_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`PLAZA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_JUZGADO;
CREATE TABLE IF NOT EXISTS D_EXP_JUZGADO(
  `JUZGADO_ID` DECIMAL(16,0) NOT NULL ,
  `JUZGADO_DESC` VARCHAR(100) NULL ,
  `PLAZA_ID` DECIMAL(16,0) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`JUZGADO_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_EST_FACTURA;
CREATE TABLE IF NOT EXISTS D_EXP_EST_FACTURA(
  `EST_FACTURA_ID` DECIMAL(16,0) NOT NULL ,
  `EST_FACTURA_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_FACTURA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_FACTURA;
CREATE TABLE IF NOT EXISTS D_EXP_FACTURA(
  `FACTURA_ID` DECIMAL(16,0) NOT NULL ,
  `FACTURA_NUM_FAC` VARCHAR(100) NULL ,
  `FACTURA_CONCEPTO` VARCHAR(500) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`FACTURA_ID`, `ENTIDAD_CEDENTE_ID`));

DROP TABLE D_EXP_EST_CONEXP;
CREATE TABLE IF NOT EXISTS D_EXP_EST_CONEXP(
  `EST_CONEXP_ID` DECIMAL(16,0) NOT NULL ,
  `EST_CONEXP_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_CONEXP_ID`, `ENTIDAD_CEDENTE_ID`));
  
DROP TABLE D_EXP_SITUACION;
CREATE TABLE IF NOT EXISTS D_EXP_SITUACION(
  `SITUACION_CONEXP_ID` DECIMAL(16,0) NOT NULL ,
  `SITUACION_CONEXP_DESC` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`SITUACION_CONEXP_ID`, `ENTIDAD_CEDENTE_ID`));

/* Dimensión para Tabla Iniciados */  
DROP TABLE D_EXP_EST_INICIO;
CREATE TABLE IF NOT EXISTS D_EXP_EST_INICIO(
  `EST_INICIO_ID` DECIMAL(16,0) NOT NULL,
  `EST_INICIO_CODIGO` VARCHAR(10) NULL ,
  `EST_INICIO_DESC` VARCHAR(255) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EST_INICIO_ID`, `ENTIDAD_CEDENTE_ID`));  
 
/* Dimensión para Tabla Escaneado */  
DROP TABLE D_EXP_ESCANEADO;
CREATE TABLE IF NOT EXISTS D_EXP_ESCANEADO(
  `ESCANEADO_ID` DECIMAL(16,0) NOT NULL,
  `ESCANEADO_DESC` VARCHAR(100) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`ESCANEADO_ID`, `ENTIDAD_CEDENTE_ID`));  
  
/* Dimensión para Tabla Cartera */  
DROP TABLE D_EXP_CARTERA;
CREATE TABLE IF NOT EXISTS D_EXP_CARTERA(
  `CARTERA_ID` DECIMAL(16,0) NOT NULL,
  `CARTERA_DESC` VARCHAR(100) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`CARTERA_ID`, `ENTIDAD_CEDENTE_ID`));  

/* Dimensión para Tabla Cuadre Cartera, es CROSS a Procedimientos y Expedientes */  
DROP TABLE D_CUADRE_CARTERA;
CREATE TABLE IF NOT EXISTS D_CUADRE_CARTERA(
  `CUADRE_CARTERA_ID` DECIMAL(16,0) NOT NULL,
  `CUADRE_CARTERA_DESC` VARCHAR(100) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`CUADRE_CARTERA_ID`, `ENTIDAD_CEDENTE_ID`));  
  
/* Dimensión para DIAS_ENTRE_ENTRADA_ENVIO_ID */  
DROP TABLE D_EXP_PLAZO_ENT_ENV;
CREATE TABLE IF NOT EXISTS D_EXP_PLAZO_ENT_ENV(
  `DIAS_ENTRE_ENTRADA_ENVIO_ID` DECIMAL(16,0) NOT NULL,
  `DIAS_ENTRE_ENTRADA_ENVIO_DESC` VARCHAR(100) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`DIAS_ENTRE_ENTRADA_ENVIO_ID`, `ENTIDAD_CEDENTE_ID`));  
  
/* Dimensión para DIAS_ENTRE_ENVIO_PRESEN_ID */  
DROP TABLE D_EXP_PLAZO_ENV_PRE;
CREATE TABLE IF NOT EXISTS D_EXP_PLAZO_ENV_PRE(
  `DIAS_ENTRE_ENVIO_PRESEN_ID` DECIMAL(16,0) NOT NULL,
  `DIAS_ENTRE_ENVIO_PRESEN_DESC` VARCHAR(100) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`DIAS_ENTRE_ENVIO_PRESEN_ID`, `ENTIDAD_CEDENTE_ID`));

/* Dimensión para TIENE_FACTURA */
select count(table_name) into HAY_TABLA from information_schema.tables where table_name = 'D_EXP_TIENE_FACTURA' and table_schema = 'bi_cdd_dwh';
if (HAY_TABLA > 0) then 
    DROP TABLE D_EXP_TIENE_FACTURA;
end if;
CREATE TABLE D_EXP_TIENE_FACTURA(
  `TIENE_FACTURA` DECIMAL(16,0) NOT NULL,
  `TIENE_FACTURA_DESC` VARCHAR(100) NULL,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`TIENE_FACTURA`, `ENTIDAD_CEDENTE_ID`));
  
DROP TABLE D_EXP;
 CREATE TABLE IF NOT EXISTS D_EXP( 
  `EXPEDIENTE_ID` DECIMAL(16,0) NOT NULL ,
  `COD_CLIENTE` VARCHAR(100) NULL ,
  `COD_RECOVERY` VARCHAR(100) NULL ,
  `ENTIDAD_CEDENTE_ID` DECIMAL(16,0) NOT NULL ,
  PRIMARY KEY (`EXPEDIENTE_ID`, `ENTIDAD_CEDENTE_ID`));

END MY_BLOCK_DIM_EXP
