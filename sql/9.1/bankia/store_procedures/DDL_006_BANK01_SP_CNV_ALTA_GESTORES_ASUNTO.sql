--/*
--##########################################
--## AUTOR=David González
--## FECHA_CREACION=20151027
--## ARTEFACTO=batch
--## VERSION_ARTEFACTO=0.1
--## INCIDENCIA_LINK=BKREC-1114
--## PRODUCTO=NO
--## 
--## Finalidad: 
--## INSTRUCCIONES:  
--## VERSIONES:
--##        0.1 Versión inicial
--##########################################
--*/

--Para permitir la visualización de texto en un bloque PL/SQL utilizando DBMS_OUTPUT.PUT_LINE

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON;
SET DEFINE OFF;


create or replace PROCEDURE CNV_ALTA_GESTORES_ASUNTO AS
  --/* CONSTANTES */
   C_USUCNV VARCHAR2(10 CHAR);

  --/* VARIABLES */
    V_FECHA_RECH TIMESTAMP;

  --/* Consulta para gestores del Asunto */
     CURSOR CUR_GES_ASUNTO (P_FECHA TIMESTAMP) IS
     WITH USU AS (
      SELECT USU_ID, USU_USERNAME FROM #ESQUEMA_MASTER#.USU_USUARIOS WHERE BORRADO = 0
    )
    , USD AS (
      SELECT USD.USD_ID, USD.USU_ID, DES.DES_CODIGO, TDE.DD_TDE_CODIGO
      FROM #ESQUEMA#.USD_USUARIOS_DESPACHOS USD
        JOIN #ESQUEMA#.DES_DESPACHO_EXTERNO DES ON USD.DES_ID = DES.DES_ID
        JOIN #ESQUEMA_MASTER#.DD_TDE_TIPO_DESPACHO TDE ON DES.DD_TDE_ID = TDE.DD_TDE_ID
      WHERE USD.BORRADO = 0 AND USD.USD_GESTOR_DEFECTO = 1
    )
    , TGE AS (
      SELECT DD_TGE_ID, DD_TGE_CODIGO FROM #ESQUEMA_MASTER#.DD_TGE_TIPO_GESTOR WHERE DD_TGE_CODIGO IN ('GEXT', 'PROC')
    )
    SELECT ASU.ASU_ID, USD_L.USD_ID GEXT, USD_P.USD_ID PROC, TGE_L.DD_TGE_ID TGE_GEXT, TGE_P.DD_TGE_ID TGE_PROC
    FROM #ESQUEMA#.CNV_AUX_ALTA_PRC D
      JOIN #ESQUEMA#.ASU_ASUNTOS ASU ON D.CODIGO_PROCEDIMIENTO_NUSE = ASU.ASU_ID_EXTERNO
      JOIN USD USD_L ON D.COD_LETRADO = USD_L.DES_CODIGO
      JOIN USD USD_P ON D.COD_PROCURADOR = USD_P.DES_CODIGO
      JOIN TGE TGE_L ON TGE_L.DD_TGE_CODIGO = 'GEXT'
      JOIN TGE TGE_P ON TGE_P.DD_TGE_CODIGO = 'PROC'
      WHERE CODIGO_PROCEDIMIENTO_NUSE NOT IN (SELECT CODIGO_PROCEDIMIENTO_NUSE FROM #ESQUEMA#.CNV_ALTA_GES_ASU_RECHAZOS WHERE FECHA_RECH = P_FECHA)
        AND NOT EXISTS (SELECT 1 FROM #ESQUEMA#.GAA_GESTOR_ADICIONAL_ASUNTO WHERE ASU_ID = ASU.ASU_ID);

  TYPE T_GEST IS TABLE OF CUR_GES_ASUNTO%ROWTYPE INDEX BY BINARY_INTEGER;
  L_GEST T_GEST;
BEGIN
  --/* CONSTANTES */
   C_USUCNV := 'CONVIVE_F2';

  --/* Gestión de rechazos */
  SELECT SYSDATE INTO V_FECHA_RECH FROM DUAL;

  INSERT INTO #ESQUEMA#.CNV_ALTA_GES_ASU_RECHAZOS
  WITH USU AS (
    SELECT USU_ID, USU_USERNAME FROM #ESQUEMA_MASTER#.USU_USUARIOS WHERE BORRADO = 0
  )
  , USD AS (
    SELECT USD.USD_ID, USD.USU_ID, DES.DES_CODIGO, TDE.DD_TDE_CODIGO
    FROM #ESQUEMA#.USD_USUARIOS_DESPACHOS USD
      JOIN #ESQUEMA#.DES_DESPACHO_EXTERNO DES ON USD.DES_ID = DES.DES_ID
      JOIN #ESQUEMA_MASTER#.DD_TDE_TIPO_DESPACHO TDE ON DES.DD_TDE_ID = TDE.DD_TDE_ID
    WHERE USD.BORRADO = 0 AND USD.USD_GESTOR_DEFECTO = 1
  )
  SELECT V_FECHA_RECH,  D.*
  FROM #ESQUEMA#.CNV_AUX_ALTA_PRC D
    LEFT JOIN #ESQUEMA#.ASU_ASUNTOS ASU ON D.CODIGO_PROCEDIMIENTO_NUSE = ASU.ASU_ID_EXTERNO
    LEFT JOIN USD USD_L ON D.COD_LETRADO = USD_L.DES_CODIGO
    LEFT JOIN USD USD_P ON D.COD_PROCURADOR = USD_P.DES_CODIGO
    WHERE ASU.ASU_ID IS NULL
      OR USD_L.DES_CODIGO IS NULL
      OR USD_P.DES_CODIGO IS NULL;


  --/* Insertamos los letrados de los asuntos no rechazados */
  OPEN CUR_GES_ASUNTO(V_FECHA_RECH);
  LOOP
    FETCH CUR_GES_ASUNTO BULK COLLECT INTO L_GEST LIMIT 1000;

    FORALL I IN 1..L_GEST.COUNT
    INSERT INTO #ESQUEMA#.GAA_GESTOR_ADICIONAL_ASUNTO (GAA_ID, ASU_ID, USD_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
    VALUES (
      #ESQUEMA#.S_GAA_GESTOR_ADICIONAL_ASUNTO.NEXTVAL, L_GEST(I).ASU_ID, L_GEST(I).GEXT, L_GEST(I).TGE_GEXT, 0, C_USUCNV, SYSDATE, 0
    );

    FORALL I IN 1..L_GEST.COUNT
    INSERT INTO #ESQUEMA#.GAA_GESTOR_ADICIONAL_ASUNTO (GAA_ID, ASU_ID, USD_ID, DD_TGE_ID, VERSION, USUARIOCREAR, FECHACREAR, BORRADO)
    VALUES (
      #ESQUEMA#.S_GAA_GESTOR_ADICIONAL_ASUNTO.NEXTVAL, L_GEST(I).ASU_ID, L_GEST(I).PROC, L_GEST(I).TGE_PROC, 0, C_USUCNV, SYSDATE, 0
    );

    FORALL I IN 1..L_GEST.COUNT
    INSERT INTO #ESQUEMA#.GAH_GESTOR_ADICIONAL_HISTORICO (GAH_ID, GAH_ASU_ID, GAH_GESTOR_ID, GAH_TIPO_GESTOR_ID, GAH_FECHA_DESDE, VERSION, USUARIOCREAR, FECHACREAR,BORRADO)
    VALUES(
      #ESQUEMA#.S_GAH_GESTOR_ADIC_HISTORICO.NEXTVAL, L_GEST(I).ASU_ID, L_GEST(I).GEXT, L_GEST(I).TGE_GEXT, TRUNC(SYSDATE), 0, C_USUCNV, SYSDATE, 0
    );

    FORALL I IN 1..L_GEST.COUNT
    INSERT INTO #ESQUEMA#.GAH_GESTOR_ADICIONAL_HISTORICO (GAH_ID, GAH_ASU_ID, GAH_GESTOR_ID, GAH_TIPO_GESTOR_ID, GAH_FECHA_DESDE, VERSION, USUARIOCREAR, FECHACREAR,BORRADO)
    VALUES(
      #ESQUEMA#.S_GAH_GESTOR_ADIC_HISTORICO.NEXTVAL, L_GEST(I).ASU_ID, L_GEST(I).PROC, L_GEST(I).TGE_PROC, TRUNC(SYSDATE), 0, C_USUCNV, SYSDATE, 0
    );

    EXIT WHEN CUR_GES_ASUNTO%NOTFOUND;
  END LOOP;
  COMMIT;

	EXCEPTION
     	WHEN OTHERS THEN

          DBMS_OUTPUT.put_line('[ERROR] Se ha producido un error en la ejecuciÃ³n:'||TO_CHAR(SQLCODE));
          DBMS_OUTPUT.put_line('-----------------------------------------------------------');
          DBMS_OUTPUT.put_line(SQLERRM);

          ROLLBACK;
          RAISE;

END CNV_ALTA_GESTORES_ASUNTO;
/
