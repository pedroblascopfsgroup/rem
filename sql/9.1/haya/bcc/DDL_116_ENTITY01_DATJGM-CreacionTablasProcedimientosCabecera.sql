--/*
--##########################################
--## AUTOR=JUAN GALLEGO MOLERO
--## FECHA_CREACION=20151001
--## ARTEFACTO=batch
--## VERSION_ARTEFACTO=0.1
--## INCIDENCIA_LINK=CMREC-868
--## PRODUCTO=NO
--## 
--## Finalidad: Creación de tabla MIG_PROCEDIMIENTOS_CABECERA
--## INSTRUCCIONES:  Configurar las variables necesarias en el principio del DECLARE
--## VERSIONES:
--##        0.1 Versión inicial
--##########################################
--*/

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON;


DECLARE

 V_ESQUEMA VARCHAR2(25 CHAR):=   '#ESQUEMA#'; 			-- Configuracion Esquema
 V_ESQUEMA_M VARCHAR2(25 CHAR):= '#ESQUEMA_MASTER#'; 		-- Configuracion Esquema Master
 TABLA VARCHAR(30) :='MIG_PROCEDIMIENTOS_CABECERA';
 ITABLE_SPACE VARCHAR(25) :='#TABLESPACE_INDEX#';
 err_num NUMBER;
 err_msg VARCHAR2(2048); 
 V_MSQL VARCHAR2(8500 CHAR);
 S_MSQL VARCHAR2(8500 CHAR);
 V_EXISTE NUMBER (1);
 SEQUENCE VARCHAR(30) :='S_MIG_PROCEDIMIENTOS_CABECERA';


BEGIN 

--Validamos si la tabla existe antes de crearla

  SELECT COUNT(*) INTO V_EXISTE
  FROM ALL_TABLES
  WHERE TABLE_NAME = ''||TABLA||'';

  
  V_MSQL := 'CREATE TABLE '||V_ESQUEMA||'.'||TABLA||' 
   (	
	  ID_PROC_CABECERA              NUMBER(16) 	   NOT NULL ENABLE, 
	  CD_PROCEDIMIENTO              NUMBER(16)         NOT NULL,
	  CD_DESPACHO                   VARCHAR2(20 CHAR)  NOT NULL,
	  CD_PROCURADOR                 VARCHAR2(20 CHAR)  NOT NULL,
	  TIPO_PROCEDIMIENTO            VARCHAR2(20 CHAR)  NOT NULL,
	  ESTADO_PROCEDIMIENTO          VARCHAR2(20 CHAR)  NOT NULL,
	  MOTIVO_FINALIZACION           VARCHAR2(20 CHAR),
	  PLAZA                         VARCHAR2(30 CHAR),
	  JUZGADO                       VARCHAR2(20 CHAR),
	  NUM_AUTOS                     VARCHAR2(10 CHAR),
	  NUM_AUTO_SIN_FORMATO          VARCHAR2(50 CHAR),
	  IMPORTE_PRINCIPAL             NUMBER(16,2), 
	  IMPORTE_INTERESES_COSTAS      NUMBER(16,2), 
	  IMPORTE_DEMANDA               NUMBER(16,2), 
	  IMPORTE_RECONOCIDO_JUZGADO    NUMBER(16,2), 
	  FECHA_PRESENTACION_DEMANDA    DATE,
	  FECHA_ADMISION_DEMANDA        DATE,
	  FECHA_INADMISION_DEMANDA      DATE,
	  MOTIVO_INADMISION             VARCHAR2(20 CHAR),
	  FECHA_PRESENTACION_LITC       DATE,
	  FECHA_IMPUGNACION_LITC        DATE,
	  FECHA_APROBACION_LITC         DATE,
	  IMPORTE_INTERESES_APROBADOS   NUMBER(16,2), 
	  IMPORTE_COSTAS_LETRADO_APROB  NUMBER(16,2), 
	  IMPORTE_COSTAS_PROCU_APROB    NUMBER(16,2), 
	  IMPORTE_COSTAS_TOTALES_APROB  NUMBER(16,2), 
	  CD_EXPEDIENTE_NUSE            NUMBER(16)   	   NOT NULL,
	  CD_PROCEDIMIENTO_ORIGEN       NUMBER(16), 
	  ULTIMO_HITO                   VARCHAR2(100 CHAR) NOT NULL,
	  NUMERO_EXP_NUSE		VARCHAR2(50)       NOT NULL,
	  ENTIDAD_PROPIETARIA           VARCHAR2 (20)      NOT NULL,      
	  GESTION_PLATAFORMA            VARCHAR2 (1)       NOT NULL ,       
	   CONSTRAINT "PK_ID_PROC_CABECERA" PRIMARY KEY ("ID_PROC_CABECERA")
	  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOCOMPRESS LOGGING
	  TABLESPACE '||ITABLE_SPACE||'  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING';
 
 
  IF V_EXISTE = 0 THEN   
     EXECUTE IMMEDIATE V_MSQL;
     DBMS_OUTPUT.PUT_LINE( TABLA||' CREADA');
  ELSE   
     EXECUTE IMMEDIATE ('DROP TABLE '||V_ESQUEMA||'.'||TABLA );
     DBMS_OUTPUT.PUT_LINE( TABLA||' BORRADA');
     EXECUTE IMMEDIATE V_MSQL;
     DBMS_OUTPUT.PUT_LINE( TABLA||' CREADA');     
  END IF;  

--Fin crear tabla

--Validamos si la tabla existe para hacer la secuencia.

  SELECT COUNT(*) INTO V_EXISTE
  FROM user_sequences
  WHERE sequence_name = ''||SEQUENCE||'';


 S_MSQL := 'CREATE SEQUENCE '||V_ESQUEMA||'.'||SEQUENCE||'
 INCREMENT BY 1
 START WITH 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 CACHE 100 NOORDER 
 NOCYCLE ';


IF V_EXISTE = 0 THEN  
     EXECUTE IMMEDIATE S_MSQL;
     DBMS_OUTPUT.PUT_LINE( SEQUENCE||' CREADA');
END IF;

--Fin crear secuencia

--Excepciones         

EXCEPTION
WHEN OTHERS THEN  
  err_num := SQLCODE;
  err_msg := SQLERRM;

  DBMS_OUTPUT.put_line('Error:'||TO_CHAR(err_num));
  DBMS_OUTPUT.put_line(err_msg);
  
  ROLLBACK;
  RAISE;
END;
/
EXIT;   



