--/*
--##########################################
--## AUTOR=Kevin Fernandez
--## FECHA_CREACION=20160316
--## ARTEFACTO=online
--## VERSION_ARTEFACTO=9.2.0
--## INCIDENCIA_LINK=PRODUCTO-954
--## PRODUCTO=SI
--## Finalidad: DDL para generar una nueva tabla CCO_CONTABILIDAD_COBROS
--##           
--## INSTRUCCIONES: Configurar las variables necesarias en el principio del DECLARE
--## VERSIONES:
--##        0.1 Versión inicial
--##########################################
--*/

--Para permitir la visualización de texto en un bloque PL/SQL utilizando DBMS_OUTPUT.PUT_LINE

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON;
SET DEFINE OFF;

DECLARE

    V_MSQL VARCHAR2(32000 CHAR); -- Sentencia a ejecutar    
    V_ESQUEMA VARCHAR2(25 CHAR):= '#ESQUEMA#'; -- Configuracion Esquema
    V_ESQUEMA_M VARCHAR2(25 CHAR):= '#ESQUEMA_MASTER#'; -- Configuracion Esquema Master
    V_TS_INDEX VARCHAR2(25 CHAR):= '#TABLESPACE_INDEX#'; -- Configuracion Indice
    V_SQL VARCHAR2(4000 CHAR); -- Vble. para consulta que valida la existencia de una tabla.
    V_NUM_TABLAS NUMBER(16); -- Vble. para validar la existencia de una tabla.  
    ERR_NUM NUMBER(25);  -- Vble. auxiliar para registrar errores en el script.
    ERR_MSG VARCHAR2(1024 CHAR); -- Vble. auxiliar para registrar errores en el script.

    BEGIN

    -- ******** CCO_CONTABILIDAD_COBROS *******
    DBMS_OUTPUT.PUT_LINE('******** CCO_CONTABILIDAD_COBROS ********'); 
    DBMS_OUTPUT.PUT_LINE('[INFO] '||V_ESQUEMA||'.CCO_CONTABILIDAD_COBROS... Comprobaciones previas'); 
    
    -- Comprobamos si existe la tabla   
    V_SQL := 'SELECT COUNT(1) FROM ALL_TABLES WHERE TABLE_NAME = ''CCO_CONTABILIDAD_COBROS'' and owner = '''||V_ESQUEMA||'''';
    EXECUTE IMMEDIATE V_SQL INTO V_NUM_TABLAS;
    -- Si existe la tabla no hacemos nada
    IF V_NUM_TABLAS = 1 THEN 
            DBMS_OUTPUT.PUT_LINE('[INFO] '||V_ESQUEMA||'.CCO_CONTABILIDAD_COBROS... Tabla YA EXISTE');    
    ELSE  
    	 --Creamos la tabla
    	 V_MSQL := 'CREATE TABLE '||V_ESQUEMA||'.CCO_CONTABILIDAD_COBROS
               (CCO_ID NUMBER(16, 0) NOT NULL
				, CCO_FECHA_ENTREGA DATE 
				, CCO_FECHA_VALOR DATE 
				, CCO_IMPORTE NUMBER(16, 2) 
				, DD_ATE_ID NUMBER(16, 0) NOT NULL 
				, DD_ACE_ID NUMBER(16, 0) NOT NULL 
				, CCO_NOMINAL NUMBER(16, 2) 
				, CCO_INTERESES NUMBER(16, 2) 
				, CCO_DEMORAS NUMBER(16, 2) 
				, CCO_IMPUESTOS NUMBER(16, 2) 
				, CCO_GASTOS_PROCURADOR NUMBER(16, 2) 
				, CCO_GASTOS_LETRADO NUMBER(16, 2) 
				, CCO_OTROS_GASTOS NUMBER(16, 2) 
				, CCO_QUITA_NOMINAL NUMBER(16, 2) 
				, CCO_QUITA_INTERESES NUMBER(16, 2) 
				, CCO_QUITA_DEMORAS NUMBER(16, 2) 
				, CCO_QUITA_IMPUESTOS NUMBER(16, 2) 
				, CCO_QUITA_GASTOS_PROCURADOR NUMBER(16, 2) 
				, CCO_QUITA_GASTOS_LETRADO NUMBER(16, 2) 
				, CCO_QUITA_OTROS_GASTOS NUMBER(16, 2) 
				, CCO_TOTAL_ENTREGA NUMBER(16, 2) 
				, CCO_NUM_ENLACE VARCHAR2(50 BYTE) 
				, CCO_NUM_MANDAMIENTO VARCHAR2(50 BYTE) 
				, CCO_CHEQUE VARCHAR2(50 BYTE) 
				, CCO_OBSERVACIONES VARCHAR2(255 BYTE) 
				, ASU_ID NUMBER(16, 0) NOT NULL 
				, USUARIOCREAR VARCHAR2(50 BYTE) NOT NULL 
				, FECHACREAR DATE NOT NULL 
				, USUARIOMODIFICAR VARCHAR2(50 BYTE) 
				, FECHAMODIFICAR DATE 
				, USUARIOBORRAR VARCHAR2(50 BYTE) 
				, FECHABORRAR DATE 
				, BORRADO NUMBER(1, 0) DEFAULT 0 NOT NULL 
				, VERSION NUMBER(38, 0) DEFAULT 0 NOT NULL 
				, CCO_OPERACIONES_TRAMITE NUMBER(1, 0) DEFAULT 0 
			  )';
		EXECUTE IMMEDIATE V_MSQL;
		DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS... Tabla creada');
		
		-- Creamos sequencia.
  	    EXECUTE immediate 'CREATE SEQUENCE ' || V_ESQUEMA || '.S_CCO_CONTABILIDAD_COBROS  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 100 NOORDER  NOCYCLE';
		DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.S_CCO_CONTABILIDAD_COBROS... Secuencia creada correctamente.');
		
		-- Creamos Indices.
		V_SQL := 'CREATE UNIQUE INDEX '||V_ESQUEMA||'.IDX1_CCO_CONTABILIDAD_COBROS ON '||V_ESQUEMA||'.CCO_CONTABILIDAD_COBROS (CCO_ID)  TABLESPACE ' || V_TS_INDEX;
    	EXECUTE IMMEDIATE V_SQL;
    	DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS... Indice creado');
    	
    	V_SQL := 'CREATE INDEX '||V_ESQUEMA||'.IDX2_CCO_CONTABILIDAD_COBROS ON '||V_ESQUEMA||'.CCO_CONTABILIDAD_COBROS (DD_ATE_ID)  TABLESPACE ' || V_TS_INDEX;
    	EXECUTE IMMEDIATE V_SQL;
    	DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS... Indice creado');
    	
    	V_SQL := 'CREATE INDEX '||V_ESQUEMA||'.IDX3_CCO_CONTABILIDAD_COBROS ON '||V_ESQUEMA||'.CCO_CONTABILIDAD_COBROS (DD_ACE_ID)  TABLESPACE ' || V_TS_INDEX;
    	EXECUTE IMMEDIATE V_SQL;
    	DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS... Indice creado');
    	
    	-- Creamos Foreign Keys.
		V_SQL := 'ALTER TABLE ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS ADD CONSTRAINT FK1_CCO_CONTABILIDAD_COBROS FOREIGN KEY (DD_ATE_ID) ' ||
		'  REFERENCES  ' || V_ESQUEMA || '.DD_ATE_ADJ_TPO_ENTREGA (DD_ATE_ID)';
  		EXECUTE IMMEDIATE V_SQL;
  		DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS... FK1 creada');
  		
  		V_SQL := 'ALTER TABLE ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS ADD CONSTRAINT FK2_CCO_CONTABILIDAD_COBROS FOREIGN KEY (DD_ACE_ID) ' ||
		'  REFERENCES  ' || V_ESQUEMA || '.DD_ACE_ADJ_CONCEPTO_ENTREGA (DD_ACE_ID)';
  		EXECUTE IMMEDIATE V_SQL;
  		DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.CCO_CONTABILIDAD_COBROS... FK2 creada');
		
    END IF;
    
EXCEPTION
  WHEN OTHERS THEN
    ERR_NUM := SQLCODE;
    ERR_MSG := SQLERRM;
    DBMS_OUTPUT.put_line('[ERROR] Se ha producido un error en la ejecución:'||TO_CHAR(ERR_NUM));
    DBMS_OUTPUT.put_line('-----------------------------------------------------------'); 
    DBMS_OUTPUT.put_line(ERR_MSG);
    ROLLBACK;
    RAISE;   
END;
/
EXIT;