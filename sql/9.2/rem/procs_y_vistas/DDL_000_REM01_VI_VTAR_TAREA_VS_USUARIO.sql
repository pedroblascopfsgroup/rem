--/*
--##########################################
--## AUTOR=Cristian Montoya
--## FECHA_CREACION=20200310
--## ARTEFACTO=online
--## VERSION_ARTEFACTO=2.0.0
--## INCIDENCIA_LINK=REMVIP-6630
--## PRODUCTO=NO
--## Finalidad: DDL
--##           
--## INSTRUCCIONES: Configurar las variables necesarias en el principio del DECLARE
--## VERSIONES:
--##        0.1 Versión inicial
--##        0.2 Refactorizado: Eliminadas decenas de lineas comentadas. Cambiada la vista a una Materializada.
--##########################################
--*/

--Para permitir la visualización de texto en un bloque PL/SQL utilizando DBMS_OUTPUT.PUT_LINE

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON;
SET DEFINE OFF;

DECLARE
    V_MSQL VARCHAR2(32000 CHAR); -- Sentencia a ejecutar     
    V_ESQUEMA VARCHAR2(25 CHAR):= '#ESQUEMA#'; -- Configuracion Esquema
    V_ESQUEMA_M VARCHAR2(25 CHAR):= '#ESQUEMA_MASTER#'; -- Configuracion Esquema Master
    V_TABLESPACE_IDX VARCHAR2(25 CHAR):= '#TABLESPACE_INDEX#'; -- Configuracion Tablespace de Indices
    V_SQL VARCHAR2(4000 CHAR); -- Vble. para consulta que valida la existencia de una tabla.
    V_NUM_TABLAS NUMBER(16); -- Vble. para validar la existencia de una tabla.   
    V_COUNT NUMBER(16); -- Vble. para validar la existencia de una tabla. 
    ERR_NUM NUMBER(25);  -- Vble. auxiliar para registrar errores en el script.
    ERR_MSG VARCHAR2(1024 CHAR); -- Vble. auxiliar para registrar errores en el script.
	
    V_TEXT1 VARCHAR2(2400 CHAR); -- Vble. auxiliar
    V_ENTIDAD_ID NUMBER(16);
    V_VIEWNAME VARCHAR2(30):= 'VTAR_TAREA_VS_USUARIO';

BEGIN


DBMS_OUTPUT.PUT_LINE('[INICIO]');

DBMS_OUTPUT.PUT_LINE('[INFO] Bloque scripts para la inclusión de un nuevo tipo del histórico de operaciones - Notificación - (7/7)');
DBMS_OUTPUT.PUT_LINE('[INFO] Modificación de la vista '||V_VIEWNAME||'...');

-- Comprobamos si existe la vista   

	V_MSQL := 'SELECT COUNT(1) FROM ALL_VIEWS WHERE VIEW_NAME LIKE '''|| V_VIEWNAME ||'''';
	EXECUTE IMMEDIATE V_MSQL INTO V_COUNT;        
	IF V_COUNT > 0     
	THEN          
         DBMS_OUTPUT.PUT_LINE('[INFO] EXISTE LA VISTA OBSOLETA '||V_ESQUEMA||'.'|| V_VIEWNAME ||' Ya Existe');
         V_MSQL := 'DROP VIEW '||V_ESQUEMA||'.'|| V_VIEWNAME ||'';
         EXECUTE IMMEDIATE V_MSQL;
         DBMS_OUTPUT.PUT_LINE('[INFO] '||V_ESQUEMA||'.'|| V_VIEWNAME ||'... Vista borrada');
	END IF;  
	
	V_MSQL := 'SELECT COUNT(1) FROM ALL_MVIEWS WHERE MVIEW_NAME = '''|| V_VIEWNAME ||''' and owner = '''||V_ESQUEMA||'''';
	EXECUTE IMMEDIATE V_MSQL INTO V_COUNT;        
	IF V_COUNT > 0     
    THEN          
         DBMS_OUTPUT.PUT_LINE('[INFO] VISTA MATERIALIZADA '||V_ESQUEMA||'.'''|| V_VIEWNAME ||''' Ya Existe');
         V_MSQL := 'DROP MATERIALIZED VIEW '||V_ESQUEMA||'.'|| V_VIEWNAME ||'';
         EXECUTE IMMEDIATE V_MSQL;
         DBMS_OUTPUT.PUT_LINE('[INFO] '||V_ESQUEMA||'.'''|| V_VIEWNAME ||'''... Vista borrada');
	END IF;  

--/**
-- * Modificacion o creación de vista: Si existe modifica y si no, la crea como nueva - Script relanzable
-- *************************************************************/
V_MSQL := 'CREATE MATERIALIZED VIEW '||V_ESQUEMA||'.'||V_VIEWNAME||'
(USU_PENDIENTES, USU_ESPERA, USU_ALERTA, DD_TGE_ID_PENDIENTE, DD_TGE_ID_ESPERA, DD_TGE_ID_ALERTA, TAR_ID, CLI_ID,
 EXP_ID, ASU_ID, TAR_TAR_ID, SPR_ID, SCX_ID, DD_EST_ID, DD_EIN_ID, DD_STA_ID, TAR_CODIGO, TAR_TAREA, TAR_DESCRIPCION, TAR_FECHA_FIN,
 TAR_FECHA_INI, TAR_EN_ESPERA, TAR_ALERTA, TAR_TAREA_FINALIZADA, TAR_EMISOR, VERSION, USUARIOCREAR, FECHACREAR, USUARIOMODIFICAR, FECHAMODIFICAR,  
 USUARIOBORRAR, FECHABORRAR, BORRADO, PRC_ID, CMB_ID, SET_ID, TAR_FECHA_VENC, OBJ_ID, TAR_FECHA_VENC_REAL, DTYPE, NFA_TAR_REVISADA,  
 NFA_TAR_FECHA_REVIS_ALER, NFA_TAR_COMENTARIOS_ALERTA, DD_TRA_ID, CNT_ID, TAR_DESTINATARIO, TAR_TIPO_DESTINATARIO, TAR_ID_DEST, PER_ID,  
 RPR_REFERENCIA, TAR_TIPO_ENT_COD, TAR_DTYPE, TAR_SUBTIPO_COD, TAR_SUBTIPO_DESC, PLAZO, ENTIDADINFORMACION, CODENTIDAD, GESTOR,  
 TIPOSOLICITUDSQL, IDENTIDAD, FCREACIONENTIDAD, CODIGOSITUACION, IDTAREAASOCIADA, DESCRIPCIONTAREAASOCIADA, SUPERVISOR, DIASVENCIDOSQL,  
 DESCRIPCIONENTIDAD, SUBTIPOTARCODTAREA, FECHACREACIONENTIDADFORMATEADA, DESCRIPCIONEXPEDIENTE, DESCRIPCIONCONTRATO, IDENTIDADPERSONA,  
 VOLUMENRIESGOSQL, TIPOITINERARIOENTIDAD, PRORROGAFECHAPROPUESTA, PRORROGACAUSADESCRIPCION, CODIGOCONTRATO, CONTRATO, ULTIMO_REFRESCO_VISTA) 
 REFRESH START WITH SYSDATE NEXT SYSDATE + (5/60)/24 FORCE
AS 
SELECT
    CASE EIN.DD_EIN_CODIGO
      WHEN ''61'' --Activo
        THEN
            NVL(TAC.USU_ID,V.USU_PENDIENTES)
        ELSE CAST(NULL AS NUMBER(16,0))
    END USU_PENDIENTES,
    
    CASE
      WHEN (NVL(TAR.TAR_EN_ESPERA,0) = 1)
      THEN NVL(ESP.USU_ID,-1)
    ELSE -1
    END USU_ESPERA,
    
    V.USU_ALERTA,
    V.DD_TGE_ID_PENDIENTE,
    -1 DD_TGE_ID_ESPERA,
    V.DD_TGE_ID_ALERTA,
    TAR.TAR_ID,
    TAR.CLI_ID,
    TAR.EXP_ID,
    TAR.ASU_ID,
    TAR.TAR_TAR_ID,
    TAR.SPR_ID,
    TAR.SCX_ID,
    TAR.DD_EST_ID,
    TAR.DD_EIN_ID,
    TAR.DD_STA_ID,
    TAR.TAR_CODIGO,
    TAR.TAR_TAREA,

    CASE TAR.DD_EIN_ID
		WHEN 61
		THEN
			CASE
				WHEN TPO.DD_TPO_DESCRIPCION IS NOT NULL
					THEN TPO.DD_TPO_DESCRIPCION 
				ELSE TAR.TAR_DESCRIPCION 
            END
        ELSE TAR.TAR_DESCRIPCION
    END TAR_DESCRIPCION,
    
    TAR.TAR_FECHA_FIN,
    TAR.TAR_FECHA_INI,
    TAR.TAR_EN_ESPERA,
    TAR.TAR_ALERTA,
    TAR.TAR_TAREA_FINALIZADA,
    TAR.TAR_EMISOR,
    TAR.VERSION,
    TAR.USUARIOCREAR,
    TAR.FECHACREAR,
    TAR.USUARIOMODIFICAR,
    TAR.FECHAMODIFICAR,
    TAR.USUARIOBORRAR,
    TAR.FECHABORRAR,
    TAR.BORRADO,
    TAR.PRC_ID,
    TAR.CMB_ID,
    TAR.SET_ID,
    TAR.TAR_FECHA_VENC,
    TAR.OBJ_ID,
    TAR.TAR_FECHA_VENC_REAL,
    TAR.DTYPE,
    TAR.NFA_TAR_REVISADA,
    TAR.NFA_TAR_FECHA_REVIS_ALER,
    TAR.NFA_TAR_COMENTARIOS_ALERTA,
    TAR.DD_TRA_ID,
    TAR.CNT_ID,
    TAR.TAR_DESTINATARIO,
    TAR.TAR_TIPO_DESTINATARIO,
    TAR.TAR_ID_DEST,
    TAR.PER_ID,
    TAR.RPR_REFERENCIA,
    EIN.DD_EIN_CODIGO TAR_TIPO_ENT_COD,
    TAR.DTYPE TAR_DTYPE,
    STA.DD_STA_CODIGO TAR_SUBTIPO_COD,
    STA.DD_STA_DESCRIPCION
    TAR_SUBTIPO_DESC,
    CAST('''' AS VARCHAR2(20 CHAR)) PLAZO,

	CASE EIN.DD_EIN_CODIGO
       WHEN ''61''--Activo
        THEN EIN.DD_EIN_DESCRIPCION || '' ['' || TAC.TAR_ID || '']''
        ELSE CAST('''' AS VARCHAR2(50 CHAR))
    END ENTIDADINFORMACION,

    CASE EIN.DD_EIN_CODIGO
      WHEN ''61''--Activo
        THEN
		 	CASE
	    	WHEN TO_NUMBER(IRG2.IRG_VALOR) IS NULL
	       	THEN ACT.ACT_NUM_ACTIVO
				ELSE TO_NUMBER(IRG2.IRG_VALOR)
            END
      ELSE -1
    END CODENTIDAD,
    
    GES.APELLIDO_NOMBRE GESTOR,

    CASE
      WHEN STA.DD_STA_CODIGO IN (''NTGPS'')
        THEN ''Notificación automática''
      ELSE CAST(NULL AS VARCHAR2(20 CHAR))
    END TIPOSOLICITUDSQL,

   CASE EIN.DD_EIN_CODIGO
      WHEN ''61'' --Activo
        THEN TAC.ACT_ID
      ELSE -1
    END IDENTIDAD,

    CASE EIN.DD_EIN_CODIGO
      WHEN ''61'' --Activo
        THEN TAC.FECHACREAR
      ELSE CAST(NULL AS TIMESTAMP(6))
    END FCREACIONENTIDAD,

    CASE EIN.DD_EIN_CODIGO
      WHEN ''61''
	      THEN CAST('''' AS VARCHAR2(20 CHAR))
      ELSE CAST('''' AS VARCHAR2(20 CHAR))
    END CODIGOSITUACION,

    TAR.TAR_TAR_ID IDTAREAASOCIADA,
    ASOC.TAR_DESCRIPCION
    DESCRIPCIONTAREAASOCIADA,

    CASE EIN.DD_EIN_CODIGO
      WHEN ''61'' --Activo
      THEN SUP.APELLIDO_NOMBRE
    END SUPERVISOR,

	 EXTRACT (DAY FROM ((TRUNC(TAR.TAR_FECHA_VENC)) - SYSTIMESTAMP)) DIASVENCIDOSQL,

    CASE EIN.DD_EIN_CODIGO
      WHEN ''61'' --Activo
        THEN NVL(TPO.DD_TPO_DESCRIPCION,''--'')
      ELSE ''--''
    END DESCRIPCIONENTIDAD,
    
    STA.DD_STA_CODIGO SUBTIPOTARCODTAREA,

    CASE EIN.DD_EIN_CODIGO
      WHEN ''61'' --Activo
        THEN TO_CHAR (TAC.FECHACREAR, ''dd/mm/yyyy'')
      ELSE CAST(NULL AS VARCHAR2(20 CHAR))
    END FECHACREACIONENTIDADFORMATEADA,
    
    CAST(NULL AS VARCHAR2(250 CHAR)) DESCRIPCIONEXPEDIENTE,
    CAST(NULL AS VARCHAR2(250 CHAR)) DESCRIPCIONCONTRATO,
    CAST(NULL AS VARCHAR2(250 CHAR)) IDENTIDADPERSONA,

	CASE EIN.DD_EIN_CODIGO 
        WHEN ''61''
            THEN 0
         ELSE 0
    END VOLUMENRIESGOSQL,
    
    CAST(NULL AS VARCHAR2(250 CHAR)) TIPOITINERARIOENTIDAD,
    CAST(NULL AS VARCHAR2(250 CHAR)) PRORROGAFECHAPROPUESTA,
    CAST(NULL AS VARCHAR2(250 CHAR)) PRORROGACAUSADESCRIPCION,
    CAST(NULL AS VARCHAR2(250 CHAR)) CODIGOCONTRATO,
    TAC.TRA_ID CONTRATO,
	TO_CHAR(SYSDATE,''dd/mm/yyyy hh24:mi:ss'') ULTIMO_REFRESCO_VISTA
  FROM (
      SELECT /*+ no_merge(VTAR2) */ * FROM '||V_ESQUEMA||'.VTAR_TAREA_VS_USUARIO_PART2 VTAR2
		 UNION ALL
	   SELECT /*+ no_merge(VTAR3) */ * FROM '||V_ESQUEMA||'.VTAR_TAREA_VS_USUARIO_PART3 VTAR3
    ) V
  JOIN '||V_ESQUEMA||'.TAR_TAREAS_NOTIFICACIONES TAR ON V.TAR_ID = TAR.TAR_ID
  LEFT JOIN '||V_ESQUEMA||'.TAC_TAREAS_ACTIVOS TAC ON TAR.TAR_ID = TAC.TAR_ID
  JOIN '||V_ESQUEMA_M||'.DD_EIN_ENTIDAD_INFORMACION EIN ON TAR.DD_EIN_ID = EIN.DD_EIN_ID
  JOIN '||V_ESQUEMA_M||'.DD_STA_SUBTIPO_TAREA_BASE STA ON TAR.DD_STA_ID = STA.DD_STA_ID
  LEFT JOIN '||V_ESQUEMA||'.VTAR_NOMBRES_USUARIOS GES ON V.USU_PENDIENTES = GES.USU_ID
  LEFT JOIN '||V_ESQUEMA||'.VTAR_NOMBRES_USUARIOS SUP ON V.USU_SUPERVISOR = SUP.USU_ID
  LEFT JOIN '||V_ESQUEMA||'.VTAR_NOMBRES_USUARIOS ESP ON TAR.TAR_EMISOR = ESP.APELLIDO_NOMBRE
  LEFT JOIN '||V_ESQUEMA||'.TAR_TAREAS_NOTIFICACIONES ASOC ON TAR.TAR_TAR_ID = ASOC.TAR_ID AND (TAR.BORRADO = 0 AND TAR.TAR_FECHA_FIN IS NULL)
  LEFT JOIN '||V_ESQUEMA||'.ACT_ACTIVO ACT ON TAC.ACT_ID = ACT.ACT_ID
  LEFT JOIN '||V_ESQUEMA||'.ACT_TRA_TRAMITE ATT ON TAC.TRA_ID = ATT.TRA_ID
  LEFT JOIN '||V_ESQUEMA||'.DD_TPO_TIPO_PROCEDIMIENTO TPO ON ATT.DD_TPO_ID = TPO.DD_TPO_ID
  LEFT JOIN '||V_ESQUEMA||'.MEJ_IRG_INFO_REGISTRO IRG ON IRG.IRG_VALOR = TAR.TAR_ID AND IRG.IRG_CLAVE = ''ID_NOTIF''
  LEFT JOIN '||V_ESQUEMA||'.MEJ_IRG_INFO_REGISTRO IRG2 ON IRG2.REG_ID = IRG.REG_ID AND IRG2.IRG_CLAVE = ''NUM_AGR''';
  
execute immediate V_MSQL;

--/* Recompilar nueva vista
--************************************************************/
--execute immediate ('alter view '||V_ESQUEMA||'.'||V_VIEWNAME||' compile');


COMMIT;

DBMS_OUTPUT.PUT_LINE('OK modificada');

DBMS_OUTPUT.PUT_LINE('[FIN]');



EXCEPTION
     WHEN OTHERS THEN
          err_num := SQLCODE;
          err_msg := SQLERRM;

          DBMS_OUTPUT.PUT_LINE('KO no modificada');
          DBMS_OUTPUT.put_line('[ERROR] Se ha producido un error en la ejecución:'||TO_CHAR(err_num));
          DBMS_OUTPUT.put_line('-----------------------------------------------------------'); 
          DBMS_OUTPUT.put_line(err_msg);

          ROLLBACK;
          RAISE;          

END;

/

EXIT