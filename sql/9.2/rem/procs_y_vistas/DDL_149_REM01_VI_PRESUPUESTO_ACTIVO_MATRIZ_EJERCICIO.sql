  --/*
--##########################################
--## AUTOR=Juan Angel Sánchez
--## FECHA_CREACION=20190529
--## ARTEFACTO=online
--## VERSION_ARTEFACTO=9.2
--## INCIDENCIA_LINK=HREOS-6597
--## PRODUCTO=NO
--## Finalidad: Creación de vista para calcular el presupuesto de una Activo Matriz incluyendo la suma de los trabajos de el y sus UAs
--##           
--## INSTRUCCIONES: Configurar las variables necesarias en el principio del DECLARE
--## VERSIONES:
--##        0.1 Versión inicial
--##        0.2 Corrección AM en tabla ACT_TRABAJO
--##########################################
--*/

--Para permitir la visualización de texto en un bloque PL/SQL utilizando DBMS_OUTPUT.PUT_LINE

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON; 

DECLARE
    seq_count number(3); -- Vble. para validar la existencia de las Secuencias.
    table_count number(3); -- Vble. para validar la existencia de las Tablas.
    v_column_count number(3); -- Vble. para validar la existencia de las Columnas.    
    v_constraint_count number(3); -- Vble. para validar la existencia de las Constraints.
    err_num NUMBER; -- N?mero de errores
    err_msg VARCHAR2(2048); -- Mensaje de error
    V_ESQUEMA VARCHAR2(25 CHAR):= '#ESQUEMA#'; -- Configuracion Esquemas
    V_ESQUEMA_MASTER VARCHAR2(25 CHAR):= '#ESQUEMA_MASTER#'; -- Configuracion Esquemas
    V_MSQL VARCHAR2(4000 CHAR); 

    CUENTA NUMBER;
    
BEGIN

  SELECT COUNT(*) INTO CUENTA FROM ALL_OBJECTS WHERE OBJECT_NAME = 'V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO' AND OWNER=V_ESQUEMA AND OBJECT_TYPE='MATERIALIZED VIEW';  
  IF CUENTA>0 THEN
    DBMS_OUTPUT.PUT_LINE('DROP MATERIALIZED VIEW '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO...');
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW ' || V_ESQUEMA || '.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO';  
    DBMS_OUTPUT.PUT_LINE('DROP MATERIALIZED VIEW '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO... borrada OK');
  END IF;

  SELECT COUNT(*) INTO CUENTA FROM ALL_OBJECTS WHERE OBJECT_NAME = 'V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO' AND OWNER=V_ESQUEMA AND OBJECT_TYPE='VIEW';  
  IF CUENTA>0 THEN
    DBMS_OUTPUT.PUT_LINE('DROP VIEW '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO...');
    EXECUTE IMMEDIATE 'DROP VIEW ' || V_ESQUEMA || '.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO';  
    DBMS_OUTPUT.PUT_LINE('DROP VIEW '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO... borrada OK');
  END IF;

  DBMS_OUTPUT.PUT_LINE('CREATE VIEW '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO...');
  EXECUTE IMMEDIATE 'CREATE VIEW ' || V_ESQUEMA || '.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO 
		
	AS	
  WITH PRESUPESTO AS (
	SELECT
	AGA.ACT_ID ACTIVO_MATRIZ
	, NVL(PTO_AM.INICIAL,0) INICIAL
	, NVL(PTO_AM.INCREMENTOS,0) INCREMENTOS
	, SUM(NVL(PTO.IMPORTES_TRABAJOS,0)) IMPORTES_TRABAJOS
	, PTO_AM.EJE_ANYO
    , SUM(NVL(PTO.IMPORTE_TRABAJO_PENDIENTE_PAGO,0)) IMPORTE_TRABAJO_PENDIENTE_PAGO
	FROM '|| V_ESQUEMA ||'.ACT_AGA_AGRUPACION_ACTIVO AGA
	INNER JOIN '|| V_ESQUEMA ||'.ACT_AGR_AGRUPACION AGR ON AGA.AGR_ID = AGR.AGR_ID AND AGR.BORRADO = 0
	    AND AGR.DD_TAG_ID = (SELECT TAG.DD_TAG_ID FROM '|| V_ESQUEMA ||'.DD_TAG_TIPO_AGRUPACION TAG WHERE TAG.DD_TAG_CODIGO = ''16'')
	INNER JOIN '|| V_ESQUEMA ||'.ACT_AGA_AGRUPACION_ACTIVO AGA2 ON AGA2.AGR_ID = AGR.AGR_ID AND AGA2.BORRADO = 0
	LEFT JOIN '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_EJERCICIO PTO_AM ON AGA.ACT_ID = PTO_AM.ACT_ID
	LEFT JOIN '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_EJERCICIO PTO ON AGA2.ACT_ID = PTO.ACT_ID AND PTO_AM.EJE_ANYO = PTO.EJE_ANYO
	WHERE AGA.AGA_PRINCIPAL = 1 AND AGA.BORRADO = 0
	GROUP BY
	AGA.ACT_ID
	, NVL(PTO_AM.INICIAL,0)
	, NVL(PTO_AM.INCREMENTOS,0)
	, PTO_AM.EJE_ANYO
	)
	SELECT
	PTO.ACTIVO_MATRIZ
	, PTO.INICIAL
	, PTO.INCREMENTOS
	, PTO.IMPORTES_TRABAJOS
	, NVL(PTO.INICIAL - PTO.IMPORTES_TRABAJOS,0) SALDO_DISPONIBLE
	, CASE WHEN NVL(PTO.INICIAL - PTO.IMPORTES_TRABAJOS,0) < 0 THEN NVL(TBJ.TBJ_IMPORTE_TOTAL * ACTTBJ.ACT_TBJ_PARTICIPACION / 100 ,0)
	      WHEN NVL(PTO.INICIAL - PTO.IMPORTES_TRABAJOS,0) > 0 AND (NVL(TBJ.TBJ_IMPORTE_TOTAL * ACTTBJ.ACT_TBJ_PARTICIPACION / 100 ,0)) > (PTO.INICIAL + PTO.INCREMENTOS - NVL(PTO.IMPORTES_TRABAJOS,0)) THEN (NVL(TBJ.TBJ_IMPORTE_TOTAL * ACTTBJ.ACT_TBJ_PARTICIPACION / 100 ,0)) - (PTO.INICIAL + PTO.INCREMENTOS - NVL(PTO.IMPORTES_TRABAJOS,0))
	    ELSE 0
	    END AS SALDO_NECESARIO
    , PTO.IMPORTE_TRABAJO_PENDIENTE_PAGO
	, PTO.EJE_ANYO
	FROM '|| V_ESQUEMA ||'.ACT_TBJ ACTTBJ
	INNER JOIN '|| V_ESQUEMA ||'.ACT_TBJ_TRABAJO TBJ ON ACTTBJ.TBJ_ID = TBJ.TBJ_ID AND TBJ.BORRADO = 0
	INNER JOIN PRESUPESTO PTO ON TBJ.ACT_ID = PTO.ACTIVO_MATRIZ
	GROUP BY
	PTO.ACTIVO_MATRIZ
	, PTO.INICIAL
	, PTO.INCREMENTOS
	, PTO.IMPORTES_TRABAJOS
	, NVL(PTO.INICIAL - PTO.IMPORTES_TRABAJOS,0)
	, CASE WHEN NVL(PTO.INICIAL - PTO.IMPORTES_TRABAJOS,0) < 0 THEN NVL(TBJ.TBJ_IMPORTE_TOTAL * ACTTBJ.ACT_TBJ_PARTICIPACION / 100 ,0)
	      WHEN NVL(PTO.INICIAL - PTO.IMPORTES_TRABAJOS,0) > 0 AND (NVL(TBJ.TBJ_IMPORTE_TOTAL * ACTTBJ.ACT_TBJ_PARTICIPACION / 100 ,0)) > (PTO.INICIAL + PTO.INCREMENTOS - NVL(PTO.IMPORTES_TRABAJOS,0)) THEN (NVL(TBJ.TBJ_IMPORTE_TOTAL * ACTTBJ.ACT_TBJ_PARTICIPACION / 100 ,0)) - (PTO.INICIAL + PTO.INCREMENTOS - NVL(PTO.IMPORTES_TRABAJOS,0))
	    ELSE 0
	    END
    , PTO.IMPORTE_TRABAJO_PENDIENTE_PAGO
	, PTO.EJE_ANYO';
      	
  DBMS_OUTPUT.PUT_LINE('CREATE VIEW '|| V_ESQUEMA ||'.V_PRESUPUESTO_ACTIVO_MATRIZ_EJERCICIO...Creada OK');
  
END;
/

EXIT;