--/*
--##########################################
--## AUTOR=Ivan Castelló Cabrelles
--## FECHA_CREACION=20190221
--## ARTEFACTO=online
--## VERSION_ARTEFACTO=9.2
--## INCIDENCIA_LINK=REMVIP-3425
--## PRODUCTO=NO
--## Finalidad: DDL
--##           
--## INSTRUCCIONES: Configurar las variables necesarias en el principio del DECLARE
--## VERSIONES:
--##        0.1 Versión inicial
--##########################################
--*/

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON; 
SET DEFINE OFF;


DECLARE

    V_MSQL VARCHAR2(32000 CHAR); -- Sentencia a ejecutar     
    V_ESQUEMA VARCHAR2(25 CHAR):= 'REM01'; -- Configuracion Esquema
    V_ESQUEMA_M VARCHAR2(25 CHAR):= 'REMMASTER'; -- Configuracion Esquema Master
    V_ESQUEMA_1 VARCHAR2(20 CHAR) := 'REM01';
	V_ESQUEMA_2 VARCHAR2(20 CHAR) := 'REMMASTER'; --SE CREA UNA SEGUNDA VARIABLE DE ESQUEMA POR SI EN ALGÚN MOMENTO QUEREMOS CREAR LA TABLA EN UN ESQUEMA DIFERENTE AL DEL USUARIO QUE LA ACCEDE O VICEVERSA
	V_ESQUEMA_3 VARCHAR2(20 CHAR) := 'REM_QUERY';
	V_ESQUEMA_4 VARCHAR2(20 CHAR) := 'PFSREM';
    V_TABLESPACE_IDX VARCHAR2(25 CHAR):= '#TABLESPACE_INDEX#'; -- Configuracion Tablespace de Indices
    V_TABLA VARCHAR2(40 CHAR) := 'JOB_PERIMETRO';
    TABLE_COUNT NUMBER(1,0) := 0;
    V_SQL VARCHAR2(4000 CHAR); -- Vble. para consulta que valida la existencia de una tabla.
    V_NUM_TABLAS NUMBER(16); -- Vble. para validar la existencia de una tabla.  
    V_NUM_SEQ NUMBER(16); -- Vble. para validar la existencia de una secuencia.  
    ERR_NUM NUMBER(25);  -- Vble. auxiliar para registrar errores en el script.
    ERR_MSG VARCHAR2(1024 CHAR); -- Vble. auxiliar para registrar errores en el script.

    V_TEXT1 VARCHAR2(2400 CHAR); -- Vble. auxiliar
	X NUMBER;

  BEGIN



  	SELECT COUNT(1) INTO TABLE_COUNT FROM ALL_TABLES WHERE TABLE_NAME = ''||V_TABLA||'' AND OWNER= ''||V_ESQUEMA_1||'';

	IF TABLE_COUNT > 0 THEN

	    DBMS_OUTPUT.PUT_LINE('[INFO] TABLA '||V_ESQUEMA_1||'.'||V_TABLA||' YA EXISTENTE. SE PROCEDE A BORRAR Y CREAR DE NUEVO.');
	    EXECUTE IMMEDIATE 'DROP TABLE '||V_ESQUEMA||'.'||V_TABLA||'';
	    
	END IF;

	EXECUTE IMMEDIATE '
			CREATE TABLE '||V_ESQUEMA_1||'.'||V_TABLA||'
			(
				   PAC_ID NUMBER(16, 0) NOT NULL 
				, ACT_ID NUMBER(16, 0) NOT NULL 
				, PAC_INCLUIDO NUMBER(1, 0) DEFAULT 1 NOT NULL 
				, PAC_CHECK_TRA_ADMISION NUMBER(1, 0) 
				, PAC_FECHA_TRA_ADMISION DATE 
				, PAC_MOTIVO_TRA_ADMISION VARCHAR2(255 CHAR) 
				, PAC_CHECK_GESTIONAR NUMBER(1, 0) 
				, PAC_FECHA_GESTIONAR DATE 
				, PAC_MOTIVO_GESTIONAR VARCHAR2(255 CHAR) 
				, PAC_CHECK_ASIGNAR_MEDIADOR NUMBER(1, 0) 
				, PAC_FECHA_ASIGNAR_MEDIADOR DATE 
				, PAC_MOTIVO_ASIGNAR_MEDIADOR VARCHAR2(255 CHAR) 
				, PAC_CHECK_COMERCIALIZAR NUMBER(1, 0) 
				, PAC_FECHA_COMERCIALIZAR DATE 
				, DD_MCO_ID NUMBER(16, 0) 
				, PAC_CHECK_FORMALIZAR NUMBER(1, 0) 
				, PAC_FECHA_FORMALIZAR DATE 
				, PAC_MOTIVO_FORMALIZAR VARCHAR2(255 CHAR) 
				, VERSION NUMBER(38, 0) DEFAULT 0 NOT NULL 
				, USUARIOCREAR VARCHAR2(50 CHAR) NOT NULL 
				, FECHACREAR TIMESTAMP(6) NOT NULL 
				, USUARIOMODIFICAR VARCHAR2(50 CHAR) 
				, FECHAMODIFICAR TIMESTAMP(6) 
				, USUARIOBORRAR VARCHAR2(50 CHAR) 
				, FECHABORRAR TIMESTAMP(6) 
				, BORRADO NUMBER(1, 0) DEFAULT 0 NOT NULL 
				, PAC_MOT_EXCL_COMERCIALIZAR VARCHAR2(256 CHAR) 
				, PAC_CHECK_PUBLICAR NUMBER(1, 0) 
				, PAC_FECHA_PUBLICAR DATE 
				, PAC_MOTIVO_PUBLICAR VARCHAR2(255 CHAR) 
				, FECHA_INSERT_JOB DATE
				    
			)'
	;

	DBMS_OUTPUT.PUT_LINE('[INFO] '||V_ESQUEMA||'. CREADA');  


IF V_ESQUEMA_2 != V_ESQUEMA_1 THEN

	EXECUTE IMMEDIATE 'GRANT ALL ON "'||V_ESQUEMA_1||'"."'||V_TABLA||'" TO "'||V_ESQUEMA_2||'" WITH GRANT OPTION';
	DBMS_OUTPUT.PUT_LINE('[INFO] PERMISOS SOBRE LA TABLA '||V_ESQUEMA_1||'.'||V_TABLA||' OTORGADOS A '||V_ESQUEMA_2||''); 

END IF;

IF V_ESQUEMA_3 != V_ESQUEMA_1 THEN

	EXECUTE IMMEDIATE 'GRANT ALL ON "'||V_ESQUEMA_1||'"."'||V_TABLA||'" TO "'||V_ESQUEMA_3||'" WITH GRANT OPTION';
	DBMS_OUTPUT.PUT_LINE('[INFO] PERMISOS SOBRE LA TABLA '||V_ESQUEMA_1||'.'||V_TABLA||' OTORGADOS A '||V_ESQUEMA_3||''); 

END IF;

IF V_ESQUEMA_4 != V_ESQUEMA_1 THEN
	
	EXECUTE IMMEDIATE 'GRANT ALL ON "'||V_ESQUEMA_1||'"."'||V_TABLA||'" TO "'||V_ESQUEMA_4||'" WITH GRANT OPTION';
	DBMS_OUTPUT.PUT_LINE('[INFO] PERMISOS SOBRE LA TABLA '||V_ESQUEMA_1||'.'||V_TABLA||' OTORGADOS A '||V_ESQUEMA_4||''); 

END IF;


	DBMS_OUTPUT.PUT_LINE('[INFO] CREAMOS EL JOB');  

  
   	-- Verificar si ya existe el JOB
	V_MSQL := 'SELECT COUNT(1) FROM ALL_SCHEDULER_JOBS WHERE JOB_NAME = ''JOB_ACTIVO_PUBLICACION_AUTO''';
	EXECUTE IMMEDIATE V_MSQL INTO V_NUM_TABLAS;	
	IF V_NUM_TABLAS = 1 THEN
		DBMS_OUTPUT.PUT_LINE('[INFO] ' || V_ESQUEMA || '.JOB_ACTIVO_PUBLICACION_AUTO... Ya existe. Se borrará.');
		DBMS_SCHEDULER.DROP_JOB(JOB_NAME => 'JOB_ACTIVO_PUBLICACION_AUTO');
	END IF;
	
	
  DBMS_SCHEDULER.CREATE_JOB (
   job_name             => 'JOB_MONITORIZAR_PERIMETRO',
   job_type             => 'PLSQL_BLOCK',
   job_action           => 'INSERT INTO '|| V_ESQUEMA || '.JOB_PERIMETRO
							(
							PAC_ID,
							ACT_ID,
							PAC_INCLUIDO,
							PAC_CHECK_TRA_ADMISION,
							PAC_FECHA_TRA_ADMISION,
							PAC_MOTIVO_TRA_ADMISION,
							PAC_CHECK_GESTIONAR,
							PAC_FECHA_GESTIONAR,
							PAC_MOTIVO_GESTIONAR,
							PAC_CHECK_ASIGNAR_MEDIADOR,
							PAC_FECHA_ASIGNAR_MEDIADOR,
							PAC_MOTIVO_ASIGNAR_MEDIADOR,
							PAC_CHECK_COMERCIALIZAR,
							PAC_FECHA_COMERCIALIZAR,
							DD_MCO_ID,
							PAC_CHECK_FORMALIZAR,
							PAC_FECHA_FORMALIZAR,
							PAC_MOTIVO_FORMALIZAR,
							VERSION,
							USUARIOCREAR,
							FECHACREAR,
							USUARIOMODIFICAR,
							FECHAMODIFICAR,
							USUARIOBORRAR,
							FECHABORRAR,
							BORRADO,
							PAC_MOT_EXCL_COMERCIALIZAR,
							PAC_CHECK_PUBLICAR,
							PAC_FECHA_PUBLICAR,
							PAC_MOTIVO_PUBLICAR
							)
							SELECT 
							PAC.PAC_ID,
							PAC.ACT_ID,
							PAC.PAC_INCLUIDO,
							PAC.PAC_CHECK_TRA_ADMISION,
							PAC.PAC_FECHA_TRA_ADMISION,
							PAC.PAC_MOTIVO_TRA_ADMISION,
							PAC.PAC_CHECK_GESTIONAR,
							PAC.PAC_FECHA_GESTIONAR,
							PAC.PAC_MOTIVO_GESTIONAR,
							PAC.PAC_CHECK_ASIGNAR_MEDIADOR,
							PAC.PAC_FECHA_ASIGNAR_MEDIADOR,
							PAC.PAC_MOTIVO_ASIGNAR_MEDIADOR,
							PAC.PAC_CHECK_COMERCIALIZAR,
							PAC.PAC_FECHA_COMERCIALIZAR,
							PAC.DD_MCO_ID,
							PAC.PAC_CHECK_FORMALIZAR,
							PAC.PAC_FECHA_FORMALIZAR,
							PAC.PAC_MOTIVO_FORMALIZAR,
							PAC.VERSION,
							PAC.USUARIOCREAR,
							PAC.FECHACREAR,
							PAC.USUARIOMODIFICAR,
							PAC.FECHAMODIFICAR,
							PAC.USUARIOBORRAR,
							PAC.FECHABORRAR,
							PAC.BORRADO,
							PAC.PAC_MOT_EXCL_COMERCIALIZAR,
							PAC.PAC_CHECK_PUBLICAR,
							PAC.PAC_FECHA_PUBLICAR,
							PAC.PAC_MOTIVO_PUBLICAR,
							SYSDATE
							FROM REM01.ACT_PAC_PERIMETRO_ACTIVO PAC
							JOIN REM01.ACT_ACTIVO ACT ON ACT.ACT_ID = PAC.ACT_ID
							WHERE ACT.ACT_NUM_ACTIVO IN (5950609,
							5965838,
							6052965,
							6055032,
							6891435
							)',
   repeat_interval      => 'FREQ=HOURLY', 
   enabled              =>  TRUE,
   comments             => 'Job de monitorización del perimetro');
  
DBMS_OUTPUT.PUT_LINE('[INFO] Proceso ejecutado CORRECTAMENTE. Job creado.');
	
COMMIT;


EXCEPTION
     WHEN OTHERS THEN 
         DBMS_OUTPUT.PUT_LINE('KO!');
          err_num := SQLCODE;
          err_msg := SQLERRM;

          DBMS_OUTPUT.put_line('[ERROR] Se ha producido un error en la ejecución:'||TO_CHAR(err_num));
          DBMS_OUTPUT.put_line('-----------------------------------------------------------'); 
          DBMS_OUTPUT.put_line(err_msg);

          ROLLBACK;
          RAISE;          

END;

/

EXIT
