--/*
--#########################################
--## AUTOR=Carles Molins
--## FECHA_CREACION=20200411
--## ARTEFACTO=migracion
--## VERSION_ARTEFACTO=9.3
--## INCIDENCIA_LINK=REMVIP-6940
--## PRODUCTO=NO
--## 
--## Finalidad:
--##                    
--## INSTRUCCIONES:  
--## VERSIONES:
--##        0.1 Versión inicial
--#########################################
--*/

--Para permitir la visualización de texto en un bloque PL/SQL utilizando DBMS_OUTPUT.PUT_LINE

WHENEVER SQLERROR EXIT SQL.SQLCODE;
SET SERVEROUTPUT ON;
SET DEFINE OFF;

DECLARE

V_ESQUEMA VARCHAR2(20 CHAR) := 'REM01';
V_ESQUEMA_M VARCHAR2(20 CHAR) := 'REMMASTER';
V_QUERY VARCHAR2(8000 CHAR);

 TOKEN_ID NUMBER(16);
MODULE_ID NUMBER(16);
VMAP_ID NUMBER(16);
VINST_ID NUMBER(16);


BEGIN
FOR CURSOR IN (SELECT 
		CASE WHEN TIENE_RESERVA = 1 THEN 
			(SELECT ID_ FROM REMMASTER.JBPM_NODE WHERE NAME_ = 'forkReservaSi' AND processdefinition_ = AUX.processdefinition_) 
		    ELSE (SELECT ID_ FROM REMMASTER.JBPM_NODE WHERE NAME_ = 'forkReservaNo' AND processdefinition_ = AUX.processdefinition_) END AS NODE_PARENT,
		AUX.* FROM(SELECT DISTINCT
		TRA.TRA_ID,
		TRA.TRA_PROCESS_BPM,
		INST.PROCESSDEFINITION_,
		TAR.TAR_ID,
		TAP.TAP_CODIGO,
		TEX.TEX_ID,
		TEX.TEX_TOKEN_ID_BPM,
		NODE.ID_ NODE_ID,
		TOKEN.PARENT_,
		ECO.ECO_NUM_EXPEDIENTE,
		CASE WHEN RES.RES_ID IS NULL THEN 0 ELSE 1 END AS TIENE_RESERVA,
		TAR.TAR_TAREA_FINALIZADA
		FROM REM01.ECO_EXPEDIENTE_COMERCIAL ECO
        INNER JOIN REM01.OFR_OFERTAS OFR
        ON OFR.OFR_ID = ECO.OFR_ID
        INNER JOIN REM01.AUX_REMVIP_6940 AUX
        ON AUX.OFR_NUM_OFERTA = OFR.OFR_NUM_OFERTA
		INNER JOIN REM01.ACT_TRA_TRAMITE TRA
		ON TRA.TBJ_ID = ECO.TBJ_ID
		INNER JOIN REMMASTER.JBPM_PROCESSINSTANCE INST 
		ON INST.ID_ = TRA.TRA_PROCESS_BPM
		INNER JOIN REM01.TAC_TAREAS_ACTIVOS TAC
		ON TAC.TRA_ID = TRA.TRA_ID
		INNER JOIN REM01.TAR_TAREAS_NOTIFICACIONES TAR
		ON TAR.TAR_ID = TAC.TAR_ID
		INNER JOIN REM01.TEX_TAREA_EXTERNA TEX
		ON TEX.TAR_ID = TAR.TAR_ID
		INNER JOIN REM01.TAP_TAREA_PROCEDIMIENTO TAP
		ON TEX.TAP_ID = TAP.TAP_ID
		INNER JOIN REMMASTER.JBPM_TOKEN TOKEN
		ON TOKEN.ID_ = TEX.TEX_TOKEN_ID_BPM
		INNER JOIN REMMASTER.JBPM_NODE NODE
		ON NODE.ID_ = TOKEN.NODE_
		LEFT JOIN REM01.RES_RESERVAS RES
		ON RES.ECO_ID = ECO.ECO_ID
		WHERE ECO.USUARIOCREAR = 'MIG_DIVARIAN'
		AND TAP.TAP_CODIGO IN (
		'T017_AdvisoryNote',
		'T017_InformeJuridico',
		'T017_InstruccionesReserva',
		'T017_ObtencionContratoReserva',
		'T017_PBCReserva',
		'T017_PBCVenta',
		'T017_RecomendCES',
		'T017_ResolucionPROManzana'
		)
		ORDER BY TRA_ID ASC, TAP_CODIGO ASC) AUX) LOOP
IF CURSOR.TAR_TAREA_FINALIZADA = 0 THEN
	IF CURSOR.PARENT_ IS NULL THEN
		TOKEN_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		MODULE_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		VMAP_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		VINST_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		V_QUERY := 'INSERT INTO '||V_ESQUEMA_M||'.JBPM_TOKEN(ID_, VERSION_, NAME_, START_, END_, NODEENTER_, NEXTLOGINDEX_, ISABLETOREACTIVATEPARENT_, ISTERMINATIONIMPLICIT_, ISSUSPENDED_, LOCK_, NODE_, PROCESSINSTANCE_, PARENT_, SUBPROCESSINSTANCE_,  RPR_REFERENCIA, T_REFERENCIA) VALUES (
		'||TOKEN_ID||', 0, (SELECT NAME_ FROM '||V_ESQUEMA_M||'.JBPM_NODE WHERE ID_ = '||CURSOR.NODE_PARENT||'), SYSDATE, NULL, SYSDATE, 2, 0, 0, 0, NULL, '||CURSOR.NODE_PARENT||', '||CURSOR.TRA_PROCESS_BPM||', NULL, NULL, NULL, NULL)';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		V_QUERY := 'UPDATE '||V_ESQUEMA_M||'.JBPM_TOKEN SET ISABLETOREACTIVATEPARENT_ = 1, NEXTLOGINDEX_ = 2, PARENT_ = '||TOKEN_ID||' WHERE ID_ = '||CURSOR.TEX_TOKEN_ID_BPM;
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		V_QUERY := 'UPDATE '||V_ESQUEMA_M||'.JBPM_PROCESSINSTANCE SET ROOTTOKEN_ = '||TOKEN_ID||'  WHERE ID_ = '||CURSOR.TRA_PROCESS_BPM;
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		--DBMS_OUTPUT.PUT_LINE('Actualizando las module y vmap...') ;
		V_QUERY := 'INSERT INTO REMMASTER.JBPM_MODULEINSTANCE
		            (ID_, CLASS_, VERSION_, PROCESSINSTANCE_, NAME_) VALUES (
		            '||MODULE_ID||'
		            , ''C'' 
		            , 0
		            , '||CURSOR.TRA_PROCESS_BPM||'
		            , ''org.jbpm.context.exe.ContextInstance'' )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		 V_QUERY := 'INSERT INTO REMMASTER.JBPM_TOKENVARIABLEMAP
		            (ID_, VERSION_, TOKEN_, CONTEXTINSTANCE_) VALUES (
		      	'||VMAP_ID||'
		        , 0 
		        , '||TOKEN_ID||'
		        , '||MODULE_ID||'  
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		  --DBMS_OUTPUT.PUT_LINE('module y vmap actualizadas!!') ;


		    --DBMS_OUTPUT.PUT_LINE('Actualizando VARIABLE INSTABLE...') ;

		    --DBMS_OUTPUT.PUT_LINE('Insertamos la variable DB_ID para cada instancia..') ;
		   V_QUERY := 'INSERT INTO REMMASTER.JBPM_VARIABLEINSTANCE
		        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_) VALUES (
		      '||VINST_ID||'
		      ,''L'' 
		      , 0 
		      , ''DB_ID''
		      , '||TOKEN_ID||'
		      , '||VMAP_ID||'
		      , '||CURSOR.TRA_PROCESS_BPM||'
		      , 1
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		    --DBMS_OUTPUT.PUT_LINE('Insertamos la variable procedimientoTareaExterna para cada instancia..') ;
		VINST_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		    V_QUERY := 'INSERT INTO REMMASTER.JBPM_VARIABLEINSTANCE
		        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_) VALUES (
		      '||VINST_ID||'
		        ,''L'' 
		        , 0 
		        , ''procedimientoTareaExterna''
		        , '||TOKEN_ID||'
		      , '||VMAP_ID||'
		      , '||CURSOR.TRA_PROCESS_BPM||'
		        , '||CURSOR.TRA_ID||'
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		    --DBMS_OUTPUT.PUT_LINE('Insertamos la variable bpmParalizado para cada instancia..') ;
		VINST_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		    V_QUERY := 'INSERT INTO REMMASTER.JBPM_VARIABLEINSTANCE
		        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_) VALUES (
		      '||VINST_ID||'
		      ,''L'' 
		      , 0 
		      , ''bpmParalizado''
		      , '||TOKEN_ID||'
		      , '||VMAP_ID||'
		      , '||CURSOR.TRA_PROCESS_BPM||'
		      , 0 
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		    --DBMS_OUTPUT.PUT_LINE('Insertamos la variable idCODIGOTAREA para cada instancia..') ;
		VINST_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		    V_QUERY := 'INSERT INTO REMMASTER.JBPM_VARIABLEINSTANCE
		        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_) VALUES (
		      '||VINST_ID||'
		      ,''L'' 
		      , 0 
		      , ''id'||CURSOR.TAP_CODIGO||'.'||CURSOR.TEX_TOKEN_ID_BPM||'''
		      , '||TOKEN_ID||'
		      , '||VMAP_ID||'
		      , '||CURSOR.TRA_PROCESS_BPM||'
		      , '||CURSOR.TEX_ID||'
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		  --DBMS_OUTPUT.PUT_LINE('FIN VARIABLE INSTANCE!!') ;


		--Insertamos variable sin concatenar TOKEN_PADRE_ID
		VINST_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		    V_QUERY := 'INSERT INTO REMMASTER.JBPM_VARIABLEINSTANCE
		        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_) VALUES (
		      '||VINST_ID||'
		      ,''L'' 
		      , 0 
		      , ''id'||CURSOR.TAP_CODIGO||'''
		      , '||TOKEN_ID||'
		      , '||VMAP_ID||'
		      , '||CURSOR.TRA_PROCESS_BPM||'
		      , '||CURSOR.TEX_ID||'
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		  --DBMS_OUTPUT.PUT_LINE('FIN VARIABLE INSTANCE!!') ;


		VINST_ID := REMMASTER.HIBERNATE_SEQUENCE.NEXTVAL;
		    V_QUERY := 'INSERT INTO REMMASTER.JBPM_VARIABLEINSTANCE
		        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_) VALUES (
		       '||VINST_ID||'
		      ,''L'' 
		      , 0
		      , ''activoTramiteTareaExterna''
		      , '||TOKEN_ID||'
		      , '||VMAP_ID||'
		      , '||CURSOR.TRA_PROCESS_BPM||'
		      , '||CURSOR.TRA_ID||'
		    )';
		EXECUTE IMMEDIATE V_QUERY;
		--DBMS_OUTPUT.PUT_LINE(V_QUERY);
		  --DBMS_OUTPUT.PUT_LINE('FIN VARIABLE INSTANCE!!') ;

	ELSE
		V_QUERY := 'UPDATE '||V_ESQUEMA_M||'.JBPM_TOKEN SET NODE_ = '||CURSOR.NODE_PARENT||' WHERE ID_ = '||CURSOR.PARENT_;	
		EXECUTE IMMEDIATE V_QUERY;
		V_QUERY := 'UPDATE '||V_ESQUEMA_M||'.JBPM_TOKEN SET NEXTLOGINDEX_= 2, ISABLETOREACTIVATEPARENT_ = 1 WHERE ID_ = '||CURSOR.TEX_TOKEN_ID_BPM;
		EXECUTE IMMEDIATE V_QUERY;
	END IF;
END IF;
END LOOP;
			
		

COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('[ERROR] Se ha producido un error en la ejecucion:'||TO_CHAR(SQLCODE));
        DBMS_OUTPUT.put_line('-----------------------------------------------------------');
        DBMS_OUTPUT.put_line(SQLERRM);
        ROLLBACK;
        RAISE;


END;
/

EXIT;
