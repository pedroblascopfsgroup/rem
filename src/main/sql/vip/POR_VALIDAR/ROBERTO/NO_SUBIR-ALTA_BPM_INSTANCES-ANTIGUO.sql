create or replace 
PROCEDURE "ALTA_BPM_INSTANCES" AS 
  /* Consulta, procedimientos sin BPM */
  CURSOR CUR_PROCEDIMIENTOS IS 
  WITH BPM_DEFINITIONS AS (
    SELECT NAME_, MAX(ID_) ID_
    FROM HAYAMASTER.JBPM_PROCESSDEFINITION
    GROUP BY NAME_
  )
  , TAREAS AS (
    SELECT  PRC_ID, MAX(TAR_ID) TAR_ID
    FROM TAR_TAREAS_NOTIFICACIONES
    WHERE (TAR_TAREA_FINALIZADA IS NULL OR TAR_TAREA_FINALIZADA = 0) AND BORRADO = 0
    GROUP BY PRC_ID
  )
  SELECT PRC.PRC_ID, DEF.ID_ DEFINITION_ID, NODE.ID_ NODE_ID, TAP.TAP_CODIGO, TEX.TEX_ID
  FROM PRC_PROCEDIMIENTOS PRC
    JOIN DD_TPO_TIPO_PROCEDIMIENTO TPO ON PRC.DD_TPO_ID = TPO.DD_TPO_ID
    JOIN BPM_DEFINITIONS DEF ON TPO.DD_TPO_XML_JBPM = DEF.NAME_
    JOIN TAREAS TAR ON PRC.PRC_ID = TAR.PRC_ID
    JOIN TEX_TAREA_EXTERNA TEX ON TAR.TAR_ID = TEX.TAR_ID
    JOIN TAP_TAREA_PROCEDIMIENTO TAP ON TEX.TAP_ID = TAP.TAP_ID
    JOIN HAYAMASTER.JBPM_NODE NODE ON DEF.ID_ = NODE.PROCESSDEFINITION_ AND TAP.TAP_CODIGO = NODE.NAME_
  WHERE PRC.PRC_PROCESS_BPM IS NULL;
  
  TYPE T_PRC IS TABLE OF CUR_PROCEDIMIENTOS%ROWTYPE INDEX BY BINARY_INTEGER;
  L_PRC T_PRC;
  
  /* Variables */
  V_DBID NUMBER(16);
BEGIN
  SELECT ENTIDAD_ID INTO V_DBID
  FROM HAYAMASTER.ENTIDADCONFIG
  WHERE DATAKEY = 'schema' AND UPPER(DATAVALUE) = 'HAYA01';

  OPEN CUR_PROCEDIMIENTOS;
  LOOP
    FETCH CUR_PROCEDIMIENTOS BULK COLLECT INTO L_PRC LIMIT 1000;
    
    /* ----- Reservamos id's objetos de BPM ------- */
    DELETE FROM TMP_ALTA_BPM_INSTANCES;
    
    FORALL I IN 1..L_PRC.COUNT
    INSERT INTO TMP_ALTA_BPM_INSTANCES(PRC_ID, INST_ID,DEF_ID, NODE_ID, TAP_CODIGO, TEX_ID) VALUES (L_PRC(I).PRC_ID, HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL, L_PRC(I).DEFINITION_ID, L_PRC(I).NODE_ID, L_PRC(I).TAP_CODIGO, L_PRC(I).TEX_ID);
    
    FORALL I IN 1..L_PRC.COUNT
    UPDATE TMP_ALTA_BPM_INSTANCES SET TOKEN_ID = HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL WHERE PRC_ID  = L_PRC(I).PRC_ID;
    
    FORALL I IN 1..L_PRC.COUNT
    UPDATE TMP_ALTA_BPM_INSTANCES SET MODULE_ID = HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL WHERE PRC_ID  = L_PRC(I).PRC_ID;
    
    FORALL I IN 1..L_PRC.COUNT
    UPDATE TMP_ALTA_BPM_INSTANCES SET VMAP_ID = HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL WHERE PRC_ID  = L_PRC(I).PRC_ID;
    
    /* ----- Insertamos instancia de BPM ------- */
    FORALL I IN 1..L_PRC.COUNT
    INSERT INTO HAYAMASTER.JBPM_PROCESSINSTANCE
        (ID_, VERSION_, START_, END_, ISSUSPENDED_, PROCESSDEFINITION_)
    SELECT TMP.INST_ID -- ID_
            ,1 --VERSION
            , SYSDATE --START_
            ,NULL --END_
            , 0 --ISSUSPENDED_
            , L_PRC(I).DEFINITION_ID --PRCESSDEFINITION_
    FROM TMP_ALTA_BPM_INSTANCES TMP WHERE TMP.PRC_ID = L_PRC(I).PRC_ID;
    
    /* ----- Insertamos el token para la instancia ------- */
    FORALL I IN 1..L_PRC.COUNT
    INSERT INTO HAYAMASTER.JBPM_TOKEN
              (ID_, VERSION_, START_, END_, NODEENTER_, ISSUSPENDED_, NODE_, PROCESSINSTANCE_, NEXTLOGINDEX_,ISABLETOREACTIVATEPARENT_,ISTERMINATIONIMPLICIT_)   
        SELECT TMP.TOKEN_ID
              , 1 --VERSION_
              , SYSDATE --START_
              , NULL --END_
              , SYSDATE --NODEENTER_
              , 0 --ISSUSPENDED_
              , L_PRC(I).NODE_ID --_ NODE_
              , TMP.INST_ID  --PROCESSINSTANCE_
              ,0
              ,0
              ,0
    FROM TMP_ALTA_BPM_INSTANCES TMP WHERE TMP.PRC_ID = L_PRC(I).PRC_ID;
    
    /* ----- Actualizamos el roottoken en cada instancia ------- */
    MERGE INTO HAYAMASTER.JBPM_PROCESSINSTANCE INS
    USING (SELECT * FROM TMP_ALTA_BPM_INSTANCES) TMP
    ON (INS.ID_ = TMP.INST_ID)
    WHEN MATCHED THEN UPDATE SET INS.ROOTTOKEN_ = TMP.TOKEN_ID;
    
    /* ----- Actualizamos el id de instancia en el procedimiento ------- */
    MERGE INTO PRC_PROCEDIMIENTOS PRC
    USING (SELECT * FROM TMP_ALTA_BPM_INSTANCES) TMP
    ON (PRC.PRC_ID = TMP.PRC_ID)
    WHEN MATCHED THEN UPDATE SET PRC.PRC_PROCESS_BPM = TMP.INST_ID;
    
    /* ----- Insertamos el moduleinstance para cada instancia ------- */
    INSERT INTO HAYAMASTER.JBPM_MODULEINSTANCE
            (ID_, CLASS_, VERSION_, PROCESSINSTANCE_, NAME_)
        SELECT  TMP.MODULE_ID
            , 'C' --CLASS_
            , 0 --VERSION_
            , TMP.INST_ID --PROCESSINSTANCE_
            , 'org.jbpm.context.exe.ContextInstance' --NAME_
    FROM TMP_ALTA_BPM_INSTANCES TMP;
    
    /* ----- Insertamos el variablemap para cada instancia ------- */
    INSERT INTO HAYAMASTER.JBPM_TOKENVARIABLEMAP 
            (ID_, VERSION_, TOKEN_, CONTEXTINSTANCE_)
      SELECT TMP.VMAP_ID
        , 0 --VERSION_
        , TMP.TOKEN_ID --ROOTTOKEN_
        , TMP.MODULE_ID  --CONTEXTINSTANCE_
    FROM TMP_ALTA_BPM_INSTANCES TMP;
    
    /* ----- Insertamos la variable DB_ID para cada instancia ------- */
    INSERT INTO HAYAMASTER.JBPM_VARIABLEINSTANCE
        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_ 
      , 'DB_ID' --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , V_DBID --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP;
    
    /* ----- Insertamos la variable procedimientoTareaExterna para cada instancia ------- */
    INSERT INTO HAYAMASTER.JBPM_VARIABLEINSTANCE
        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_ 
      , 'procedimientoTareaExterna' --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , TMP.PRC_ID --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP;
    
    /* ----- Insertamos la variable bpmParalizado para cada instancia ------- */
    INSERT INTO HAYAMASTER.JBPM_VARIABLEINSTANCE
        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_ 
      , 'bpmParalizado' --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , 0 --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP;
    
    /* ----- Insertamos la variable idCODIGOTAREA para cada instancia ------- */
    FORALL I IN 1..L_PRC.COUNT
    INSERT INTO HAYAMASTER.JBPM_VARIABLEINSTANCE
        (ID_, CLASS_, VERSION_, NAME_, TOKEN_, TOKENVARIABLEMAP_, PROCESSINSTANCE_, LONGVALUE_)
      SELECT HAYAMASTER.HIBERNATE_SEQUENCE.NEXTVAL
      ,'L' --CLASS_
      , 0 --VERSION_ 
      , 'id'||L_PRC(I).TAP_CODIGO --NAME_
      , TMP.TOKEN_ID --TOKEM_
      , TMP.VMAP_ID  --TOKENVARIABLEMAP_
      , TMP.INST_ID --PROCESSINSTANCE_
      , L_PRC(I).TEX_ID --LONGVLAUE_
    FROM TMP_ALTA_BPM_INSTANCES TMP WHERE TMP.PRC_ID = L_PRC(I).PRC_ID;
    
    
    /* ----- Deleteamos porsiaca ------- */
    DELETE FROM TMP_ALTA_BPM_INSTANCES;
    EXIT WHEN CUR_PROCEDIMIENTOS%NOTFOUND;
  END LOOP;
  CLOSE CUR_PROCEDIMIENTOS;
END ALTA_BPM_INSTANCES;
/
